"use strict";



define('ghost-admin/adapters/application', ['exports', 'ghost-admin/adapters/embedded-relation-adapter'], function (exports, _embeddedRelationAdapter) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _embeddedRelationAdapter.default.extend({

        shouldBackgroundReloadRecord() {
            return false;
        }

    });
});
define('ghost-admin/adapters/base', ['exports', 'ember-ajax/mixins/ajax-support', 'ember-simple-auth/mixins/data-adapter-mixin', 'ember-data/adapters/rest', 'ghost-admin/utils/ghost-paths'], function (exports, _ajaxSupport, _dataAdapterMixin, _rest, _ghostPaths) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _rest.default.extend(_dataAdapterMixin.default, _ajaxSupport.default, {
        host: window.location.origin,
        namespace: (0, _ghostPaths.default)().apiRoot.slice(1),

        session: Ember.inject.service(),

        shouldBackgroundReloadRecord() {
            return false;
        },

        /* eslint-disable camelcase */
        authorize(xhr) {
            if (this.get('session.isAuthenticated')) {
                var _get = this.get('session.data.authenticated');

                let access_token = _get.access_token;

                xhr.setRequestHeader('Authorization', `Bearer ${access_token}`);
            }
        },
        /* eslint-enable camelcase */

        query(store, type, query) {
            let id;

            if (query.id) {
                id = query.id;
                delete query.id;
            }

            return this.ajax(this.buildURL(type.modelName, id), 'GET', { data: query });
        },

        buildURL() {
            // Ensure trailing slashes
            let url = this._super(...arguments);

            if (url.slice(-1) !== '/') {
                url += '/';
            }

            return url;
        }
    });
});
define('ghost-admin/adapters/embedded-relation-adapter', ['exports', 'ghost-admin/adapters/base'], function (exports, _base) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.extend({
        find(store, type, id, snapshot) {
            return this.ajax(this.buildIncludeURL(store, type.modelName, id, snapshot, 'find'), 'GET');
        },

        findRecord(store, type, id, snapshot) {
            return this.ajax(this.buildIncludeURL(store, type.modelName, id, snapshot, 'findRecord'), 'GET');
        },

        findAll(store, type, sinceToken) {
            let query, url;

            if (sinceToken) {
                query = { since: sinceToken };
            }

            url = this.buildIncludeURL(store, type.modelName, null, null, 'findAll');

            return this.ajax(url, 'GET', { data: query });
        },

        query(store, type, query) {
            return this._super(store, type, this.buildQuery(store, type.modelName, query));
        },

        queryRecord(store, type, query) {
            return this._super(store, type, this.buildQuery(store, type.modelName, query));
        },

        createRecord(store, type, snapshot) {
            return this.saveRecord(store, type, snapshot, { method: 'POST' }, 'createRecord');
        },

        updateRecord(store, type, snapshot) {
            let options = {
                method: 'PUT',
                id: Ember.get(snapshot, 'id')
            };

            return this.saveRecord(store, type, snapshot, options, 'updateRecord');
        },

        saveRecord(store, type, snapshot, options, requestType) {
            let _options = options || {};
            let url = this.buildIncludeURL(store, type.modelName, _options.id, snapshot, requestType);
            let payload = this.preparePayload(store, type, snapshot);

            return this.ajax(url, _options.method, payload);
        },

        preparePayload(store, type, snapshot) {
            let serializer = store.serializerFor(type.modelName);
            let payload = {};

            serializer.serializeIntoHash(payload, type, snapshot);

            return { data: payload };
        },

        buildIncludeURL(store, modelName, id, snapshot, requestType, query) {
            let includes = this.getEmbeddedRelations(store, modelName);
            let url = this.buildURL(modelName, id, snapshot, requestType, query);

            if (includes.length) {
                url += `?include=${includes.join(',')}`;
            }

            return url;
        },

        buildQuery(store, modelName, options) {
            let deDupe = {};
            let toInclude = this.getEmbeddedRelations(store, modelName);
            let query = options || {};

            if (toInclude.length) {
                // If this is a find by id, build a query object and attach the includes
                if (typeof options === 'string' || typeof options === 'number') {
                    query = {};
                    query.id = options;
                    query.include = toInclude.join(',');
                } else if (typeof options === 'object' || Ember.isNone(options)) {
                    // If this is a find all (no existing query object) build one and attach
                    // the includes.
                    // If this is a find with an existing query object then merge the includes
                    // into the existing object. Existing properties and includes are preserved.
                    query = query || {};
                    toInclude = toInclude.concat(query.include ? query.include.split(',') : []);

                    toInclude.forEach(include => {
                        deDupe[include] = true;
                    });

                    query.include = Object.keys(deDupe).join(',');
                }
            }

            return query;
        },

        getEmbeddedRelations(store, modelName) {
            let model = store.modelFor(modelName);
            let ret = [];
            let embedded = [];

            // Iterate through the model's relationships and build a list
            // of those that need to be pulled in via "include" from the API
            model.eachRelationship((name, meta) => {
                if (meta.kind === 'hasMany' && Object.prototype.hasOwnProperty.call(meta.options, 'embedded') && meta.options.embedded === 'always') {
                    ret.push(name);
                    embedded.push([name, meta.type]);
                }
            });

            embedded.forEach(([relName, modelName]) => {
                this.getEmbeddedRelations(store, modelName).forEach(name => {
                    ret.push(`${relName}.${name}`);
                });
            });

            return ret;
        }
    });
});
define('ghost-admin/adapters/setting', ['exports', 'ghost-admin/adapters/application'], function (exports, _application) {
        'use strict';

        Object.defineProperty(exports, "__esModule", {
                value: true
        });
        exports.default = _application.default.extend({
                updateRecord(store, type, record) {
                        let data = {};
                        let serializer = store.serializerFor(type.modelName);

                        // remove the fake id that we added onto the model.
                        delete record.id;

                        // use the SettingSerializer to transform the model back into
                        // an array of settings objects like the API expects
                        serializer.serializeIntoHash(data, type, record);

                        // use the ApplicationAdapter's buildURL method but do not
                        // pass in an id.
                        return this.ajax(this.buildURL(type.modelName), 'PUT', { data });
                }
        });
});
define('ghost-admin/adapters/tag', ['exports', 'ghost-admin/adapters/application', 'ghost-admin/mixins/slug-url'], function (exports, _application, _slugUrl) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _application.default.extend(_slugUrl.default);
});
define('ghost-admin/adapters/theme', ['exports', 'ghost-admin/adapters/application'], function (exports, _application) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _application.default.extend({

        activate(model) {
            let url = `${this.buildURL('theme', model.get('id'))}activate/`;

            return this.ajax(url, 'PUT', { data: {} }).then(data => {
                this.store.pushPayload(data);
                return model;
            });
        }

    });
});
define('ghost-admin/adapters/user', ['exports', 'ghost-admin/adapters/application', 'ghost-admin/mixins/slug-url'], function (exports, _application, _slugUrl) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _application.default.extend(_slugUrl.default, {
        find(store, type, id) {
            return this.findQuery(store, type, { id, status: 'all' });
        },

        // TODO: This is needed because the API currently expects you to know the
        // status of the record before retrieving by ID. Quick fix is to always
        // include status=all in the query
        findRecord(store, type, id, snapshot) {
            let url = this.buildIncludeURL(store, type.modelName, id, snapshot, 'findRecord');

            url += '&status=all';

            return this.ajax(url, 'GET');
        },

        findAll(store, type, id) {
            return this.query(store, type, { id, status: 'all' });
        },

        queryRecord(store, type, query) {
            if (!query || query.id !== 'me') {
                return this._super(...arguments);
            }

            let url = this.buildURL(type.modelName, 'me', null, 'findRecord');

            return this.ajax(url, 'GET', { data: { include: 'roles' } });
        }
    });
});
define('ghost-admin/app', ['exports', 'ghost-admin/resolver', 'ghost-admin/config/environment', 'ember-load-initializers', 'ghost-admin/utils/link-component', 'ghost-admin/utils/route', 'ghost-admin/utils/text-field'], function (exports, _resolver, _environment, _emberLoadInitializers) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    const App = Ember.Application.extend({
        Resolver: _resolver.default,
        modulePrefix: _environment.default.modulePrefix,
        podModulePrefix: _environment.default.podModulePrefix,

        // eslint-disable-next-line
        customEvents: {
            touchstart: null,
            touchmove: null,
            touchend: null,
            touchcancel: null
        }
    });

    // TODO: remove once the validations refactor is complete
    // eslint-disable-next-line
    Ember.Debug.registerWarnHandler((message, options, next) => {
        let skip = ['ds.errors.add', 'ds.errors.remove', 'ds.errors.clear'];

        if (skip.includes(options.id)) {
            return;
        }

        next(message, options);
    });

    (0, _emberLoadInitializers.default)(App, _environment.default.modulePrefix);

    exports.default = App;
});
define('ghost-admin/authenticators/oauth2', ['exports', 'ember-simple-auth/authenticators/oauth2-password-grant'], function (exports, _oauth2PasswordGrant) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _oauth2PasswordGrant.default.extend({
        ajax: Ember.inject.service(),
        session: Ember.inject.service(),
        config: Ember.inject.service(),
        ghostPaths: Ember.inject.service(),

        init() {
            this._super(...arguments);

            let handler = Ember.run.bind(this, () => {
                this.onOnline();
            });
            window.addEventListener('online', handler);
        },

        serverTokenEndpoint: Ember.computed('ghostPaths.apiRoot', function () {
            return `${this.get('ghostPaths.apiRoot')}/authentication/token`;
        }),

        // disable general token revocation because the requests will always 401
        // (revocation is triggered by invalid access token so it's already invalid)
        // we have a separate logout procedure that sends revocation requests
        serverTokenRevocationEndpoint: null,

        makeRequest(url, data) {
            /* eslint-disable camelcase */
            data.client_id = this.get('config.clientId');
            data.client_secret = this.get('config.clientSecret');
            /* eslint-enable camelcase */

            let options = {
                data,
                dataType: 'json',
                contentType: 'application/x-www-form-urlencoded'
            };

            return this.get('ajax').post(url, options);
        },

        /**
         * Invoked when "navigator.online" event is trigerred.
         * This is a helper function to handle intermittent internet connectivity. Token is refreshed
         * when browser status becomes "online".
         */
        onOnline() {
            if (this.get('session.isAuthenticated')) {
                let autoRefresh = this.get('refreshAccessTokens');
                if (autoRefresh) {
                    let expiresIn = this.get('session.data.authenticated.expires_in');
                    let token = this.get('session.data.authenticated.refresh_token');
                    return this._refreshAccessToken(expiresIn, token);
                }
            }
        },

        authenticate(identification, password, scope = [], headers = {}) {
            return new Ember.RSVP.Promise((resolve, reject) => {
                let data = { grant_type: 'password', username: identification, password };
                let serverTokenEndpoint = this.get('serverTokenEndpoint');
                let scopesString = Ember.makeArray(scope).join(' ');
                if (!Ember.isEmpty(scopesString)) {
                    data.scope = scopesString;
                }
                this.makeRequest(serverTokenEndpoint, data, headers).then(response => {
                    Ember.run(() => {
                        /* eslint-disable camelcase */
                        let expiresAt = this._absolutizeExpirationTime(response.expires_in);
                        this._scheduleAccessTokenRefresh(response.expires_in, expiresAt, response.refresh_token);
                        /* eslint-enable camelcase */

                        if (!Ember.isEmpty(expiresAt)) {
                            response = Ember.assign(response, { expires_at: expiresAt });
                        }

                        resolve(response);
                    });
                }, error => {
                    reject(error);
                });
            });
        }
    });
});
define('ghost-admin/breakpoints', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    mobile: '(max-width: 767px)',
    tablet: '(min-width: 768px) and (max-width: 991px)',
    desktop: '(min-width: 992px) and (max-width: 1200px)',
    jumbo: '(min-width: 1201px)'
  };
});
define("ghost-admin/components/-lf-get-outlet-state", ["exports", "liquid-fire/components/-lf-get-outlet-state"], function (exports, _lfGetOutletState) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _lfGetOutletState.default;
    }
  });
});
define('ghost-admin/components/as-scrollable', ['exports', 'ember-scrollable/components/ember-scrollable'], function (exports, _emberScrollable) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _emberScrollable.default.extend({
    classNames: 'as-scrollable'
  });
});
define('ghost-admin/components/basic-dropdown', ['exports', 'ember-basic-dropdown/components/basic-dropdown'], function (exports, _basicDropdown) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _basicDropdown.default;
    }
  });
});
define('ghost-admin/components/basic-dropdown/content-element', ['exports', 'ember-basic-dropdown/components/basic-dropdown/content-element'], function (exports, _contentElement) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _contentElement.default;
    }
  });
});
define('ghost-admin/components/basic-dropdown/content', ['exports', 'ember-basic-dropdown/components/basic-dropdown/content'], function (exports, _content) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _content.default;
    }
  });
});
define('ghost-admin/components/basic-dropdown/trigger', ['exports', 'ember-basic-dropdown/components/basic-dropdown/trigger'], function (exports, _trigger) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _trigger.default;
    }
  });
});
define('ghost-admin/components/draggable-object-target', ['exports', 'ember-drag-drop/components/draggable-object-target'], function (exports, _draggableObjectTarget) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _draggableObjectTarget.default;
});
define('ghost-admin/components/draggable-object', ['exports', 'ember-drag-drop/components/draggable-object'], function (exports, _draggableObject) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _draggableObject.default;
});
define('ghost-admin/components/ember-load-remover', ['exports', 'ember-load/components/ember-load-remover'], function (exports, _emberLoadRemover) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberLoadRemover.default;
    }
  });
});
define('ghost-admin/components/ember-scrollable', ['exports', 'ember-scrollable/components/ember-scrollable'], function (exports, _emberScrollable) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberScrollable.default;
    }
  });
});
define('ghost-admin/components/ember-scrollbar', ['exports', 'ember-scrollable/components/ember-scrollbar'], function (exports, _emberScrollbar) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberScrollbar.default;
    }
  });
});
define('ghost-admin/components/ember-wormhole', ['exports', 'ember-wormhole/components/ember-wormhole'], function (exports, _emberWormhole) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberWormhole.default;
    }
  });
});
define('ghost-admin/components/gh-activating-list-item', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        active: false,
        classNameBindings: ['active'],
        linkClasses: null,
        tagName: 'li',

        actions: {
            setActive(value) {
                Ember.run.schedule('afterRender', this, function () {
                    this.set('active', value);
                });
            }
        },

        click() {
            this.$('a').blur();
        }
    });
});
define('ghost-admin/components/gh-alert', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        notifications: Ember.inject.service(),

        classNameBindings: ['typeClass'],
        classNames: ['gh-alert'],
        tagName: 'article',

        typeClass: Ember.computed('message.type', function () {
            let type = this.get('message.type');
            let classes = '';
            let typeMapping;

            typeMapping = {
                success: 'green',
                error: 'red',
                warn: 'blue',
                info: 'blue'
            };

            if (typeMapping[type] !== undefined) {
                classes += `gh-alert-${typeMapping[type]}`;
            }

            return classes;
        }),

        actions: {
            closeNotification() {
                this.get('notifications').closeNotification(this.get('message'));
            }
        }
    });
});
define('ghost-admin/components/gh-alerts', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        notifications: Ember.inject.service(),

        classNames: 'gh-alerts',
        tagName: 'aside',

        messages: Ember.computed.alias('notifications.alerts')
    });
});
define('ghost-admin/components/gh-app', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        classNames: ['gh-app'],

        showSettingsMenu: false,

        didReceiveAttrs() {
            this._super(...arguments);
            let showSettingsMenu = this.get('showSettingsMenu');

            Ember.$('body').toggleClass('settings-menu-expanded', showSettingsMenu);
        }
    });
});
define('ghost-admin/components/gh-basic-dropdown', ['exports', 'ember-basic-dropdown/components/basic-dropdown', 'ember-basic-dropdown/templates/components/basic-dropdown'], function (exports, _basicDropdown, _basicDropdown2) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _basicDropdown.default.extend({
        dropdown: Ember.inject.service(),

        layout: _basicDropdown2.default,

        didInsertElement() {
            this._super(...arguments);
            this.get('dropdown').on('close', this, this.close);
        },

        willDestroyElement() {
            this._super(...arguments);
            this.get('dropdown').off('close');
        }
    });
});
define('ghost-admin/components/gh-blog-url', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        config: Ember.inject.service(),

        tagName: ''
    });
});
define('ghost-admin/components/gh-cm-editor', ['exports', 'ghost-admin/utils/bound-one-way', 'ember-concurrency'], function (exports, _boundOneWay, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    /* global CodeMirror */
    const CmEditorComponent = Ember.Component.extend({
        lazyLoader: Ember.inject.service(),

        classNameBindings: ['isFocused:focus'],

        isFocused: false,
        isInitializingCodemirror: true,

        // options for the editor
        autofocus: false,
        indentUnit: 4,
        lineNumbers: true,
        lineWrapping: false,
        mode: 'htmlmixed',
        theme: 'xq-light',

        _editor: null, // reference to CodeMirror editor

        // Allowed actions
        'focus-in': () => {},
        update: () => {},

        _value: (0, _boundOneWay.default)('value'), // make sure a value exists

        didReceiveAttrs() {
            if (this.get('value') === null || undefined) {
                this.set('value', '');
            }
        },

        didInsertElement() {
            this._super(...arguments);
            this.get('initCodeMirror').perform();
        },

        willDestroyElement() {
            this._super(...arguments);

            // Ensure the editor exists before trying to destroy it. This fixes
            // an error that occurs if codemirror hasn't finished loading before
            // the component is destroyed.
            if (this._editor) {
                let editor = this._editor.getWrapperElement();
                editor.parentNode.removeChild(editor);
                this._editor = null;
            }
        },

        actions: {
            updateFromTextarea(value) {
                this.update(value);
            }
        },

        initCodeMirror: (0, _emberConcurrency.task)(function* () {
            let loader = this.get('lazyLoader');

            yield Ember.RSVP.all([loader.loadStyle('codemirror', 'assets/codemirror/codemirror.css'), loader.loadScript('codemirror', 'assets/codemirror/codemirror.js')]);

            Ember.run.scheduleOnce('afterRender', this, function () {
                this._initCodeMirror();
            });
        }),

        _initCodeMirror() {
            let options = this.getProperties('lineNumbers', 'lineWrapping', 'indentUnit', 'mode', 'theme', 'autofocus');
            Ember.assign(options, { value: this.get('_value') });

            let textarea = this.element.querySelector('textarea');
            if (textarea && textarea === document.activeElement) {
                options.autofocus = true;
            }

            this.set('isInitializingCodemirror', false);
            this._editor = new CodeMirror(this.element, options);

            // by default CodeMirror will place the cursor at the beginning of the
            // content, it makes more sense for the cursor to be at the end
            if (options.autofocus) {
                this._editor.setCursor(this._editor.lineCount(), 0);
            }

            // events
            this._setupCodeMirrorEventHandler('focus', this, this._focus);
            this._setupCodeMirrorEventHandler('blur', this, this._blur);
            this._setupCodeMirrorEventHandler('change', this, this._update);
        },

        _setupCodeMirrorEventHandler(event, target, method) {
            let callback = Ember.run.bind(target, method);

            this._editor.on(event, callback);

            this.one('willDestroyElement', this, function () {
                this._editor.off(event, callback);
            });
        },

        _update(codeMirror, changeObj) {
            Ember.run.once(this, this.update, codeMirror.getValue(), codeMirror, changeObj);
        },

        _focus(codeMirror, event) {
            this.set('isFocused', true);
            Ember.run.once(this, this.get('focus-in'), codeMirror.getValue(), codeMirror, event);
        },

        _blur() /* codeMirror, event */{
            this.set('isFocused', false);
        }
    });

    CmEditorComponent.reopenClass({
        positionalParams: ['value']
    });

    exports.default = CmEditorComponent;
});
define('ghost-admin/components/gh-content-cover', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        ui: Ember.inject.service(),

        classNames: ['content-cover'],

        onMouseEnter: null,

        click() {
            this.get('ui').closeMenus();
        },

        mouseEnter() {
            this.get('ui').closeAutoNav();
        }
    });
});
define('ghost-admin/components/gh-date-time-picker', ['exports', 'moment'], function (exports, _moment) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        settings: Ember.inject.service(),

        tagName: '',

        date: '',
        time: '',
        errors: null,
        dateErrorProperty: null,
        timeErrorProperty: null,

        _time: '',
        _previousTime: '',
        _minDate: null,
        _maxDate: null,

        blogTimezone: Ember.computed.reads('settings.activeTimezone'),
        hasError: Ember.computed.or('dateError', 'timeError'),

        timezone: Ember.computed('blogTimezone', function () {
            let blogTimezone = this.get('blogTimezone');
            return _moment.default.utc().tz(blogTimezone).format('z');
        }),

        dateError: Ember.computed('errors.[]', 'dateErrorProperty', function () {
            let errors = this.get('errors');
            let property = this.get('dateErrorProperty');

            if (!Ember.isEmpty(errors.errorsFor(property))) {
                return errors.errorsFor(property).get('firstObject').message;
            }
        }),

        timeError: Ember.computed('errors.[]', 'timeErrorProperty', function () {
            let errors = this.get('errors');
            let property = this.get('timeErrorProperty');

            if (!Ember.isEmpty(errors.errorsFor(property))) {
                return errors.errorsFor(property).get('firstObject').message;
            }
        }),

        didReceiveAttrs() {
            let date = this.get('date');
            let time = this.get('time');
            let minDate = this.get('minDate');
            let maxDate = this.get('maxDate');
            let blogTimezone = this.get('blogTimezone');

            if (!Ember.isBlank(date)) {
                this.set('_date', (0, _moment.default)(date));
            } else {
                this.set('_date', (0, _moment.default)().tz(blogTimezone));
            }

            if (Ember.isBlank(time)) {
                this.set('_time', this.get('_date').format('HH:mm'));
            } else {
                this.set('_time', this.get('time'));
            }
            this.set('_previousTime', this.get('_time'));

            // unless min/max date is at midnight moment will diable that day
            if (minDate === 'now') {
                this.set('_minDate', (0, _moment.default)((0, _moment.default)().format('YYYY-MM-DD')));
            } else if (!Ember.isBlank(minDate)) {
                this.set('_minDate', (0, _moment.default)((0, _moment.default)(minDate).format('YYYY-MM-DD')));
            } else {
                this.set('_minDate', null);
            }

            if (maxDate === 'now') {
                this.set('_maxDate', (0, _moment.default)((0, _moment.default)().format('YYYY-MM-DD')));
            } else if (!Ember.isBlank(maxDate)) {
                this.set('_maxDate', (0, _moment.default)((0, _moment.default)(maxDate).format('YYYY-MM-DD')));
            } else {
                this.set('_maxDate', null);
            }
        },

        actions: {
            // if date or time is set and the other property is blank set that too
            // so that we don't get "can't be blank" errors
            setDate(date) {
                if (date !== this.get('_date')) {
                    this.get('setDate')(date);

                    if (Ember.isBlank(this.get('time'))) {
                        this.get('setTime')(this.get('_time'));
                    }
                }
            },

            setTime(time) {
                if (time.match(/^\d:\d\d$/)) {
                    time = `0${time}`;
                }

                if (time !== this.get('_previousTime')) {
                    this.get('setTime')(time);
                    this.set('_previousTime', time);

                    if (Ember.isBlank(this.get('date'))) {
                        this.get('setDate')(this.get('_date'));
                    }
                }
            }
        }
    });
});
define('ghost-admin/components/gh-download-count', ['exports', 'ghost-admin/config/environment', 'ember-concurrency'], function (exports, _environment, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        ajax: Ember.inject.service(),
        ghostPaths: Ember.inject.service(),

        tagName: '',
        count: '',

        didInsertElement() {
            this.get('_poll').perform();
        },

        _poll: (0, _emberConcurrency.task)(function* () {
            let url = this.get('ghostPaths.count');
            let pattern = /(-?\d+)(\d{3})/;

            try {
                let data = yield this.get('ajax').request(url);
                let count = data.count.toString();

                while (pattern.test(count)) {
                    count = count.replace(pattern, '$1,$2');
                }

                this.set('count', count);

                if (_environment.default.environment !== 'test') {
                    yield (0, _emberConcurrency.timeout)(2000);
                    this.get('_poll').perform();
                }
            } catch (e) {
                // no-op - we don't want to create noise for a failed download count
            }
        })
    });
});
define('ghost-admin/components/gh-dropdown-button', ['exports', 'ghost-admin/mixins/dropdown-mixin'], function (exports, _dropdownMixin) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend(_dropdownMixin.default, {
        dropdown: Ember.inject.service(),

        tagName: 'button',
        attributeBindings: ['href', 'role'],
        role: 'button',

        // matches with the dropdown this button toggles
        dropdownName: null,

        // Notify dropdown service this dropdown should be toggled
        click(event) {
            this._super(event);
            this.get('dropdown').toggleDropdown(this.get('dropdownName'), this);

            if (this.get('tagName') === 'a') {
                return false;
            }
        }
    });
});
define('ghost-admin/components/gh-dropdown', ['exports', 'ghost-admin/mixins/dropdown-mixin'], function (exports, _dropdownMixin) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend(_dropdownMixin.default, {
        dropdown: Ember.inject.service(),

        classNames: 'dropdown',
        classNameBindings: ['fadeIn:fade-in-scale:fade-out', 'isOpen:open:closed'],

        name: null,
        closeOnClick: false,

        // Helps track the user re-opening the menu while it's fading out.
        closing: false,

        // Helps track whether the dropdown is open or closes, or in a transition to either
        isOpen: false,

        // Managed the toggle between the fade-in and fade-out classes
        fadeIn: Ember.computed('isOpen', 'closing', function () {
            return this.get('isOpen') && !this.get('closing');
        }),

        didInsertElement() {
            let dropdownService = this.get('dropdown');

            this._super(...arguments);

            dropdownService.on('close', this, this.close);
            dropdownService.on('toggle', this, this.toggle);
        },

        willDestroyElement() {
            let dropdownService = this.get('dropdown');

            this._super(...arguments);

            dropdownService.off('close', this, this.close);
            dropdownService.off('toggle', this, this.toggle);
        },

        open() {
            this.set('isOpen', true);
            this.set('closing', false);
            this.set('button.isOpen', true);
        },

        close() {
            this.set('closing', true);

            if (this.get('button')) {
                this.set('button.isOpen', false);
            }

            this.$().on('animationend webkitAnimationEnd oanimationend MSAnimationEnd', event => {
                if (event.originalEvent.animationName === 'fade-out') {
                    Ember.run(this, function () {
                        if (this.get('closing')) {
                            this.set('isOpen', false);
                            this.set('closing', false);
                        }
                    });
                }
            });
        },

        // Called by the dropdown service when any dropdown button is clicked.
        toggle(options) {
            let isClosing = this.get('closing');
            let isOpen = this.get('isOpen');
            let name = this.get('name');
            let targetDropdownName = options.target;
            let button = this.get('button');

            if (name === targetDropdownName && (!isOpen || isClosing)) {
                if (!button) {
                    button = options.button;
                    this.set('button', button);
                }
                this.open();
            } else if (isOpen) {
                this.close();
            }
        },

        click(event) {
            this._super(event);

            if (this.get('closeOnClick')) {
                return this.close();
            }
        }
    });
});
define('ghost-admin/components/gh-editor-post-status', ['exports', 'ghost-admin/config/environment', 'ember-concurrency'], function (exports, _environment, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        post: null,
        isSaving: false,

        'data-test-editor-post-status': true,

        _isSaving: false,

        isNew: Ember.computed.reads('post.isNew'),
        isScheduled: Ember.computed.reads('post.isScheduled'),

        isPublished: Ember.computed('post.{isPublished,pastScheduledTime}', function () {
            let isPublished = this.get('post.isPublished');
            let pastScheduledTime = this.get('post.pastScheduledTime');

            return isPublished || pastScheduledTime;
        }),

        // isSaving will only be true briefly whilst the post is saving,
        // we want to ensure that the "Saving..." message is shown for at least
        // a few seconds so that it's noticeable
        didReceiveAttrs() {
            if (this.get('isSaving')) {
                this.get('showSavingMessage').perform();
            }
        },

        showSavingMessage: (0, _emberConcurrency.task)(function* () {
            this.set('_isSaving', true);
            yield (0, _emberConcurrency.timeout)(_environment.default.environment === 'test' ? 0 : 3000);
            this.set('_isSaving', false);
        }).drop()
    });
});
define('ghost-admin/components/gh-editor', ['exports', 'ghost-admin/components/gh-image-uploader'], function (exports, _ghImageUploader) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    const debounce = Ember.run.debounce;
    exports.default = Ember.Component.extend({
        ui: Ember.inject.service(),

        classNameBindings: ['isDraggedOver:-drag-over', 'isFullScreen:gh-editor-fullscreen', 'isPreview:gh-editor-preview'],

        // Public attributes
        navIsClosed: false,

        // Internal attributes
        droppedFiles: null,
        headerClass: '',
        headerHeight: 0,
        imageExtensions: _ghImageUploader.IMAGE_EXTENSIONS,
        imageMimeTypes: _ghImageUploader.IMAGE_MIME_TYPES,
        isDraggedOver: false,
        isFullScreen: false,
        isSplitScreen: false,
        uploadedImageUrls: null,

        // Private
        _dragCounter: 0,
        _navIsClosed: false,
        _onResizeHandler: null,
        _viewActionsWidth: 190,

        init() {
            this._super(...arguments);
            this._onResizeHandler = evt => {
                debounce(this, this._setHeaderClass, evt, 100);
            };
        },

        didReceiveAttrs() {
            let navIsClosed = this.get('navIsClosed');

            if (navIsClosed !== this._navIsClosed) {
                Ember.run.scheduleOnce('afterRender', this, this._setHeaderClass);
            }

            this._navIsClosed = navIsClosed;
        },

        didInsertElement() {
            this._super(...arguments);
            window.addEventListener('resize', this._onResizeHandler);
            this._setHeaderClass();
        },

        willDestroyElement() {
            this._super(...arguments);
            window.removeEventListener('resize', this._onResizeHandler);
        },

        actions: {
            toggleFullScreen(isFullScreen) {
                this.set('isFullScreen', isFullScreen);
                this.get('ui').set('isFullScreen', isFullScreen);
                Ember.run.scheduleOnce('afterRender', this, this._setHeaderClass);
            },

            togglePreview(isPreview) {
                this.set('isPreview', isPreview);
            },

            toggleSplitScreen(isSplitScreen) {
                this.set('isSplitScreen', isSplitScreen);
                Ember.run.scheduleOnce('afterRender', this, this._setHeaderClass);
            },

            uploadImages(fileList, resetInput) {
                // convert FileList to an array so that resetting the input doesn't
                // clear the file references before upload actions can be triggered
                let files = Array.from(fileList);
                this.set('droppedFiles', files);
                resetInput();
            },

            uploadComplete(uploads) {
                this.set('uploadedImageUrls', uploads.mapBy('url'));
                this.set('droppedFiles', null);
            },

            uploadCancelled() {
                this.set('droppedFiles', null);
            }
        },

        _setHeaderClass() {
            let editorTitle = this.element.querySelector('.gh-editor-title, .kg-title-input');
            let smallHeaderClass = 'gh-editor-header-small';
            let newHeaderClass = '';

            this._editorTitleElement = editorTitle;

            if (this.get('isSplitScreen')) {
                this.set('headerClass', smallHeaderClass);
                return;
            }

            if (editorTitle) {
                let boundingRect = editorTitle.getBoundingClientRect();
                let maxRight = window.innerWidth - this._viewActionsWidth;

                if (boundingRect.right >= maxRight) {
                    newHeaderClass = smallHeaderClass;
                }
            }

            if (newHeaderClass !== this.headerClass) {
                // grab height of header so that we can pass it as an offset to other
                // editor components
                Ember.run.scheduleOnce('afterRender', this, this._setHeaderHeight);
            }

            this.set('headerClass', newHeaderClass);
        },

        _setHeaderHeight() {
            if (this.headerClass && this._editorTitleElement) {
                let height = this._editorTitleElement.offsetHeight;
                return this.set('headerHeight', height);
            }

            this.set('headerHeight', 0);
        },

        // dragOver is needed so that drop works
        dragOver(event) {
            if (!event.dataTransfer) {
                return;
            }

            // this is needed to work around inconsistencies with dropping files
            // from Chrome's downloads bar
            if (navigator.userAgent.indexOf('Chrome') > -1) {
                let eA = event.dataTransfer.effectAllowed;
                event.dataTransfer.dropEffect = eA === 'move' || eA === 'linkMove' ? 'move' : 'copy';
            }

            event.preventDefault();
            event.stopPropagation();
        },

        // dragEnter is needed so that the drag class is correctly removed
        dragEnter(event) {
            if (!event.dataTransfer) {
                return;
            }

            event.preventDefault();
            event.stopPropagation();

            // the counter technique prevents flickering of the drag class when
            // dragging across child elements
            this._dragCounter += 1;

            this.set('isDraggedOver', true);
        },

        dragLeave(event) {
            event.preventDefault();
            event.stopPropagation();

            this._dragCounter -= 1;
            if (this._dragCounter === 0) {
                this.set('isDraggedOver', false);
            }
        },

        drop(event) {
            event.preventDefault();
            event.stopPropagation();

            this._dragCounter = 0;
            this.set('isDraggedOver', false);

            if (event.dataTransfer.files) {
                this.set('droppedFiles', event.dataTransfer.files);
            }
        }
    });
});
define('ghost-admin/components/gh-error-message', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        tagName: 'p',
        classNames: ['response'],

        errors: null,
        property: '',

        isVisible: Ember.computed.notEmpty('errors'),

        message: Ember.computed('errors.[]', 'property', function () {
            let property = this.get('property');
            let errors = this.get('errors');
            let messages = [];
            let index;

            if (!Ember.isEmpty(errors) && errors.get(property)) {
                errors.get(property).forEach(error => {
                    messages.push(error);
                });
                index = Math.floor(Math.random() * messages.length);
                return messages[index].message;
            }
        })
    });
});
define('ghost-admin/components/gh-feature-flag', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    const FeatureFlagComponent = Ember.Component.extend({
        feature: Ember.inject.service(),

        tagName: 'label',
        classNames: 'checkbox',
        attributeBindings: ['for'],
        _flagValue: null,

        value: Ember.computed('_flagValue', {
            get() {
                return this.get('_flagValue');
            },
            set(key, value) {
                return this.set(`feature.${this.get('flag')}`, value);
            }
        }),

        for: Ember.computed('flag', function () {
            return `labs-${this.get('flag')}`;
        }),

        name: Ember.computed('flag', function () {
            return `labs[${this.get('flag')}]`;
        }),

        init() {
            this._super(...arguments);

            this.set('_flagValue', this.get(`feature.${this.get('flag')}`));
        }
    });

    FeatureFlagComponent.reopenClass({
        positionalParams: ['flag']
    });

    exports.default = FeatureFlagComponent;
});
define('ghost-admin/components/gh-file-input', ['exports', 'emberx-file-input/components/x-file-input'], function (exports, _xFileInput) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _xFileInput.default.extend({
        change(e) {
            let action = this.get('action');
            let files = this.files(e);

            if (files.length && action) {
                action(files, this.resetInput.bind(this));
            }
        },

        /**
        * Gets files from event object.
        *
        * @method
        * @private
        * @param {$.Event || Event}
        */
        files(e) {
            return (e.originalEvent || e).testingFiles || e.target.files;
        }
    });
});
define('ghost-admin/components/gh-file-upload', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        _file: null,

        acceptEncoding: null,
        uploadButtonText: 'Text',
        uploadButtonDisabled: true,

        shouldResetForm: true,

        // closure actions
        onUpload() {},
        onAdd() {},

        actions: {
            upload() {
                if (!this.get('uploadButtonDisabled') && this._file) {
                    this.onUpload(this._file);
                }

                // Prevent double post by disabling the button.
                this.set('uploadButtonDisabled', true);

                // Reset form
                if (this.get('shouldResetForm')) {
                    this.$().closest('form')[0].reset();
                }
            }
        },

        change(event) {
            this.set('uploadButtonDisabled', false);
            this.onAdd();
            this._file = event.target.files[0];
        }
    });
});
define('ghost-admin/components/gh-file-uploader', ['exports', 'ghost-admin/services/ajax'], function (exports, _ajax) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    const DEFAULTS = {
        accept: ['text/csv'],
        extensions: ['csv']
    };

    exports.default = Ember.Component.extend({
        ajax: Ember.inject.service(),
        eventBus: Ember.inject.service(),
        notifications: Ember.inject.service(),

        tagName: 'section',
        classNames: ['gh-image-uploader'],
        classNameBindings: ['dragClass'],

        labelText: 'Select or drag-and-drop a file',
        url: null,
        paramName: 'file',
        accept: null,
        extensions: null,
        validate: null,

        file: null,
        response: null,

        dragClass: null,
        failureMessage: null,
        uploadPercentage: 0,

        // Allowed actions
        fileSelected: () => {},
        uploadStarted: () => {},
        uploadFinished: () => {},
        uploadSuccess: () => {},
        uploadFailed: () => {},

        formData: Ember.computed('file', function () {
            let paramName = this.get('paramName');
            let file = this.get('file');
            let formData = new FormData();

            formData.append(paramName, file);

            return formData;
        }),

        progressStyle: Ember.computed('uploadPercentage', function () {
            let percentage = this.get('uploadPercentage');
            let width = '';

            if (percentage > 0) {
                width = `${percentage}%`;
            } else {
                width = '0';
            }

            return Ember.String.htmlSafe(`width: ${width}`);
        }),

        // we can optionally listen to a named event bus channel so that the upload
        // process can be triggered externally
        init() {
            this._super(...arguments);
            let listenTo = this.get('listenTo');

            this.accept = this.accept || DEFAULTS.accept;
            this.extensions = this.extensions || DEFAULTS.extensions;

            if (listenTo) {
                this.get('eventBus').subscribe(`${listenTo}:upload`, this, function (file) {
                    if (file) {
                        this.set('file', file);
                    }
                    this.send('upload');
                });
            }
        },

        didReceiveAttrs() {
            this._super(...arguments);
            let accept = this.get('accept');
            let extensions = this.get('extensions');

            this._accept = !Ember.isBlank(accept) && !Ember.isArray(accept) ? accept.split(',') : accept;
            this._extensions = !Ember.isBlank(extensions) && !Ember.isArray(extensions) ? extensions.split(',') : extensions;
        },

        willDestroyElement() {
            let listenTo = this.get('listenTo');

            this._super(...arguments);

            if (listenTo) {
                this.get('eventBus').unsubscribe(`${listenTo}:upload`);
            }
        },

        actions: {
            fileSelected(fileList, resetInput) {
                var _Array$from = Array.from(fileList),
                    _Array$from2 = _slicedToArray(_Array$from, 1);

                let file = _Array$from2[0];

                let validationResult = this._validate(file);

                this.set('file', file);
                this.fileSelected(file);

                if (validationResult === true) {
                    Ember.run.schedule('actions', this, function () {
                        this.generateRequest();

                        if (resetInput) {
                            resetInput();
                        }
                    });
                } else {
                    this._uploadFailed(validationResult);

                    if (resetInput) {
                        resetInput();
                    }
                }
            },

            upload() {
                if (this.get('file')) {
                    this.generateRequest();
                }
            },

            reset() {
                this.set('file', null);
                this.set('uploadPercentage', 0);
                this.set('failureMessage', null);
            }
        },

        dragOver(event) {
            if (!event.dataTransfer) {
                return;
            }

            // this is needed to work around inconsistencies with dropping files
            // from Chrome's downloads bar
            if (navigator.userAgent.indexOf('Chrome') > -1) {
                let eA = event.dataTransfer.effectAllowed;
                event.dataTransfer.dropEffect = eA === 'move' || eA === 'linkMove' ? 'move' : 'copy';
            }

            event.stopPropagation();
            event.preventDefault();

            this.set('dragClass', '-drag-over');
        },

        dragLeave(event) {
            event.preventDefault();
            this.set('dragClass', null);
        },

        drop(event) {
            event.preventDefault();
            this.set('dragClass', null);
            if (event.dataTransfer.files) {
                this.send('fileSelected', event.dataTransfer.files);
            }
        },

        generateRequest() {
            let ajax = this.get('ajax');
            let formData = this.get('formData');
            let url = this.get('url');

            this.uploadStarted();

            ajax.post(url, {
                data: formData,
                processData: false,
                contentType: false,
                dataType: 'text',
                xhr: () => {
                    let xhr = new window.XMLHttpRequest();

                    xhr.upload.addEventListener('progress', event => {
                        this._uploadProgress(event);
                    }, false);

                    return xhr;
                }
            }).then(response => {
                this._uploadSuccess(JSON.parse(response));
            }).catch(error => {
                this._uploadFailed(error);
            }).finally(() => {
                this.uploadFinished();
            });
        },

        _uploadProgress(event) {
            if (event.lengthComputable) {
                Ember.run(() => {
                    let percentage = Math.round(event.loaded / event.total * 100);
                    this.set('uploadPercentage', percentage);
                });
            }
        },

        _uploadSuccess(response) {
            this.uploadSuccess(response);
            this.send('reset');
        },

        _uploadFailed(error) {
            let message;

            if ((0, _ajax.isVersionMismatchError)(error)) {
                this.get('notifications').showAPIError(error);
            }

            if ((0, _ajax.isUnsupportedMediaTypeError)(error)) {
                message = 'The file type you uploaded is not supported.';
            } else if ((0, _ajax.isRequestEntityTooLargeError)(error)) {
                message = 'The file you uploaded was larger than the maximum file size your server allows.';
            } else if (error.payload && error.payload.errors && !Ember.isBlank(error.payload.errors[0].message)) {
                message = Ember.String.htmlSafe(error.payload.errors[0].message);
            } else {
                message = 'Something went wrong :(';
            }

            this.set('failureMessage', message);
            this.uploadFailed(error);
        },

        _validate(file) {
            if (this.validate) {
                return this.validate(file);
            } else {
                return this._defaultValidator(file);
            }
        },

        _defaultValidator(file) {
            var _$exec = /(?:\.([^.]+))?$/.exec(file.name),
                _$exec2 = _slicedToArray(_$exec, 2);

            let extension = _$exec2[1];

            let extensions = this._extensions;

            if (!extension || extensions.indexOf(extension.toLowerCase()) === -1) {
                return new _ajax.UnsupportedMediaTypeError();
            }

            return true;
        }
    });
});
define('ghost-admin/components/gh-form-group', ['exports', 'ghost-admin/components/gh-validation-status-container'], function (exports, _ghValidationStatusContainer) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _ghValidationStatusContainer.default.extend({
        classNames: 'form-group'
    });
});
define('ghost-admin/components/gh-fullscreen-modal', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    const FullScreenModalComponent = Ember.Component.extend({
        dropdown: Ember.inject.service(),

        model: null,
        modifier: null,

        modalPath: Ember.computed('modal', function () {
            return `modal-${this.get('modal') || 'unknown'}`;
        }),

        modalClasses: Ember.computed('modifiers', function () {
            let modalClass = 'fullscreen-modal';
            let modifiers = (this.get('modifier') || '').split(' ');
            let modalClasses = Ember.A([modalClass]);

            modifiers.forEach(modifier => {
                if (!Ember.isBlank(modifier)) {
                    let className = `${modalClass}-${modifier}`;
                    modalClasses.push(className);
                }
            });

            return modalClasses.join(' ');
        }),

        didInsertElement() {
            Ember.run.schedule('afterRender', this, function () {
                this.get('dropdown').closeDropdowns();
            });
        },

        actions: {
            close() {
                return this.close();
            },

            confirm() {
                return this.confirm();
            },

            clickOverlay() {
                this.send('close');
            }
        },

        // Allowed actions
        close: () => Ember.RSVP.resolve(),
        confirm: () => Ember.RSVP.resolve()
    });

    FullScreenModalComponent.reopenClass({
        positionalParams: ['modal']
    });

    exports.default = FullScreenModalComponent;
});
define('ghost-admin/components/gh-image-uploader-with-preview', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({

        allowUnsplash: false,

        actions: {
            update() {
                let action = this.get('update');
                if (action) {
                    action(...arguments);
                }
            },

            uploadStarted() {
                let action = this.get('uploadStarted');
                if (action) {
                    action(...arguments);
                }
            },

            uploadFinished() {
                let action = this.get('uploadFinished');
                if (action) {
                    action(...arguments);
                }
            },

            remove() {
                let action = this.get('remove');
                if (action) {
                    action();
                }
            }
        }
    });
});
define('ghost-admin/components/gh-image-uploader', ['exports', 'ghost-admin/utils/ghost-paths', 'ghost-admin/services/ajax'], function (exports, _ghostPaths, _ajax) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.IMAGE_EXTENSIONS = exports.IMAGE_MIME_TYPES = undefined;

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    const IMAGE_MIME_TYPES = exports.IMAGE_MIME_TYPES = 'image/gif,image/jpg,image/jpeg,image/png,image/svg+xml';
    const IMAGE_EXTENSIONS = exports.IMAGE_EXTENSIONS = ['gif', 'jpg', 'jpeg', 'png', 'svg'];

    exports.default = Ember.Component.extend({
        ajax: Ember.inject.service(),
        config: Ember.inject.service(),
        notifications: Ember.inject.service(),
        settings: Ember.inject.service(),

        tagName: 'section',
        classNames: ['gh-image-uploader'],
        classNameBindings: ['dragClass'],

        image: null,
        text: '',
        altText: '',
        saveButton: true,
        accept: null,
        extensions: null,
        uploadUrl: null,
        validate: null,
        allowUnsplash: false,

        dragClass: null,
        failureMessage: null,
        file: null,
        url: null,
        uploadPercentage: 0,

        _defaultAccept: IMAGE_MIME_TYPES,
        _defaultExtensions: IMAGE_EXTENSIONS,
        _defaultUploadUrl: '/uploads/',
        _showUnsplash: false,

        // Allowed actions
        fileSelected: () => {},
        update: () => {},
        uploadStarted: () => {},
        uploadFinished: () => {},
        uploadSuccess: () => {},
        uploadFailed: () => {},

        // TODO: this wouldn't be necessary if the server could accept direct
        // file uploads
        formData: Ember.computed('file', function () {
            let file = this.get('file');
            let formData = new FormData();

            formData.append('uploadimage', file);

            return formData;
        }),

        description: Ember.computed('text', 'altText', function () {
            let altText = this.get('altText');

            return this.get('text') || (altText ? `Upload image of "${altText}"` : 'Upload an image');
        }),

        progressStyle: Ember.computed('uploadPercentage', function () {
            let percentage = this.get('uploadPercentage');
            let width = '';

            if (percentage > 0) {
                width = `${percentage}%`;
            } else {
                width = '0';
            }

            return Ember.String.htmlSafe(`width: ${width}`);
        }),

        didReceiveAttrs() {
            let image = this.get('image');
            this.set('url', image);

            if (!this.get('accept')) {
                this.set('accept', this.get('_defaultAccept'));
            }
            if (!this.get('extensions')) {
                this.set('extensions', this.get('_defaultExtensions'));
            }
            if (!this.get('uploadUrl')) {
                this.set('uploadUrl', this.get('_defaultUploadUrl'));
            }
        },

        actions: {
            fileSelected(fileList, resetInput) {
                // can't use array destructuring here as FileList is not a strict
                // array and fails in Safari
                // eslint-disable-next-line ember-suave/prefer-destructuring
                let file = fileList[0];
                let validationResult = this._validate(file);

                this.set('file', file);
                this.fileSelected(file);

                if (validationResult === true) {
                    Ember.run.schedule('actions', this, function () {
                        this.generateRequest();

                        if (resetInput) {
                            resetInput();
                        }
                    });
                } else {
                    this._uploadFailed(validationResult);

                    if (resetInput) {
                        resetInput();
                    }
                }
            },

            addUnsplashPhoto({ src }) {
                this.set('url', src);
                this.send('saveUrl');
            },

            reset() {
                this.set('file', null);
                this.set('uploadPercentage', 0);
            },

            saveUrl() {
                let url = this.get('url');
                this.update(url);
            }
        },

        dragOver(event) {
            if (!event.dataTransfer) {
                return;
            }

            // this is needed to work around inconsistencies with dropping files
            // from Chrome's downloads bar
            if (navigator.userAgent.indexOf('Chrome') > -1) {
                let eA = event.dataTransfer.effectAllowed;
                event.dataTransfer.dropEffect = eA === 'move' || eA === 'linkMove' ? 'move' : 'copy';
            }

            event.stopPropagation();
            event.preventDefault();

            this.set('dragClass', '-drag-over');
        },

        dragLeave(event) {
            event.preventDefault();
            this.set('dragClass', null);
        },

        drop(event) {
            event.preventDefault();

            this.set('dragClass', null);

            if (event.dataTransfer.files) {
                this.send('fileSelected', event.dataTransfer.files);
            }
        },

        _uploadProgress(event) {
            if (event.lengthComputable) {
                Ember.run(() => {
                    let percentage = Math.round(event.loaded / event.total * 100);
                    this.set('uploadPercentage', percentage);
                });
            }
        },

        _uploadSuccess(response) {
            this.set('url', response);
            this.send('saveUrl');
            this.send('reset');
            this.uploadSuccess(response);
        },

        _uploadFailed(error) {
            let message;

            if ((0, _ajax.isVersionMismatchError)(error)) {
                this.get('notifications').showAPIError(error);
            }

            if ((0, _ajax.isUnsupportedMediaTypeError)(error)) {
                let validExtensions = this.get('extensions').join(', .').toUpperCase();
                validExtensions = `.${validExtensions}`;

                message = `The image type you uploaded is not supported. Please use ${validExtensions}`;
            } else if ((0, _ajax.isRequestEntityTooLargeError)(error)) {
                message = 'The image you uploaded was larger than the maximum file size your server allows.';
            } else if (error.payload.errors && !Ember.isBlank(error.payload.errors[0].message)) {
                message = error.payload.errors[0].message;
            } else {
                message = 'Something went wrong :(';
            }

            this.set('failureMessage', message);
            this.uploadFailed(error);
        },

        generateRequest() {
            let ajax = this.get('ajax');
            let formData = this.get('formData');
            let uploadUrl = this.get('uploadUrl');
            // CASE: we want to upload an icon and we have to POST it to a different endpoint, expecially for icons
            let url = `${(0, _ghostPaths.default)().apiRoot}${uploadUrl}`;

            this.uploadStarted();

            ajax.post(url, {
                data: formData,
                processData: false,
                contentType: false,
                dataType: 'text',
                xhr: () => {
                    let xhr = new window.XMLHttpRequest();

                    xhr.upload.addEventListener('progress', event => {
                        this._uploadProgress(event);
                    }, false);

                    return xhr;
                }
            }).then(response => {
                let url = JSON.parse(response);
                this._uploadSuccess(url);
            }).catch(error => {
                this._uploadFailed(error);
            }).finally(() => {
                this.uploadFinished();
            });
        },

        _validate(file) {
            if (this.validate) {
                return this.validate(file);
            } else {
                return this._defaultValidator(file);
            }
        },

        _defaultValidator(file) {
            let extensions = this.get('extensions');

            var _$exec = /(?:\.([^.]+))?$/.exec(file.name),
                _$exec2 = _slicedToArray(_$exec, 2);

            let extension = _$exec2[1];


            if (!Ember.isArray(extensions)) {
                extensions = extensions.split(',');
            }

            if (!extension || extensions.indexOf(extension.toLowerCase()) === -1) {
                return new _ajax.UnsupportedMediaTypeError();
            }

            return true;
        }
    });
});
define('ghost-admin/components/gh-koenig-editor', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({

        // public attrs
        classNames: ['gh-koenig-editor', 'relative', 'w-100', 'vh-100', 'overflow-x-hidden', 'overflow-y-auto', 'z-0'],
        title: '',
        titlePlaceholder: '',
        body: null,
        bodyPlaceholder: '',
        bodyAutofocus: false,

        // internal properties
        _title: null,
        _editor: null,
        _mousedownY: 0,

        // closure actions
        onTitleChange() {},
        onTitleBlur() {},
        onBodyChange() {},
        onEditorCreated() {},
        onWordCountChange() {},

        actions: {
            focusTitle() {
                this._title.focus();
            },

            // triggered when a mousedown is registered on .gh-koenig-editor-pane
            trackMousedown(event) {
                this._mousedownY = event.clientY;
            },

            // triggered when a mouseup is registered on .gh-koenig-editor-pane
            focusEditor(event) {
                if (event.target.classList.contains('gh-koenig-editor-pane')) {
                    let editorCanvas = this._editor.element;

                    var _editorCanvas$getBoun = editorCanvas.getBoundingClientRect();

                    let bottom = _editorCanvas$getBoun.bottom;

                    // if a mousedown and subsequent mouseup occurs below the editor
                    // canvas, focus the editor and put the cursor at the end of the
                    // document

                    if (this._mousedownY > bottom && event.clientY > bottom) {
                        let post = this._editor.post;

                        let range = post.toRange();
                        let tailSection = range.tailSection;


                        event.preventDefault();
                        this._editor.focus();

                        // we should always have a visible cursor when focusing
                        // at the bottom so create an empty paragraph if last
                        // section is a card
                        if (tailSection.isCardSection) {
                            this._editor.run(postEditor => {
                                let newSection = postEditor.builder.createMarkupSection('p');
                                postEditor.insertSectionAtEnd(newSection);
                                tailSection = newSection;
                            });
                        }

                        this._editor.selectRange(tailSection.tailPosition());

                        // ensure we're scrolled to the bottom
                        this.element.scrollTop = this.element.scrollHeight;
                    }
                }
            },

            /* title related actions -------------------------------------------- */

            onTitleCreated(titleElement) {
                this._title = titleElement;
            },

            onTitleChange(newTitle) {
                this.onTitleChange(newTitle);
            },

            onTitleFocusOut() {
                this.onTitleBlur();
            },

            onTitleKeydown(event) {
                let value = event.target.value;
                let selectionStart = event.target.selectionStart;

                // enter will always focus the editor
                // down arrow will only focus the editor when the cursor is at the
                // end of the input to preserve the default OS behaviour
                if (event.key === 'Enter' || event.key === 'Tab' || (event.key === 'ArrowDown' || event.key === 'ArrowRight') && (!value || selectionStart === value.length)) {
                    event.preventDefault();

                    // on Enter we also want to create a blank para if necessary
                    if (event.key === 'Enter') {
                        this._addParaAtTop();
                    }

                    this._editor.focus();
                }
            },

            /* body related actions --------------------------------------------- */

            onEditorCreated(koenig) {
                this._setupEditor(koenig);
                this.onEditorCreated(koenig);
            },

            onBodyChange(newMobiledoc) {
                this.onBodyChange(newMobiledoc);
            }
        },

        /* public methods ------------------------------------------------------- */

        /* internal methods ----------------------------------------------------- */

        _setupEditor(koenig) {
            let component = this;

            this._koenig = koenig;
            this._editor = koenig.editor;

            // focus the title when pressing SHIFT+TAB
            this._editor.registerKeyCommand({
                str: 'SHIFT+TAB',
                run() {
                    component.send('focusTitle');
                    return true;
                }
            });
        },

        _addParaAtTop() {
            if (!this._editor) {
                return;
            }

            let editor = this._editor;
            let section = editor.post.toRange().head.section;

            // create a blank paragraph at the top of the editor unless it's already
            // a blank paragraph
            if (section.isListItem || !section.isBlank || section.text !== '') {
                editor.run(postEditor => {
                    let builder = postEditor.builder;

                    let newPara = builder.createMarkupSection('p');
                    let sections = section.isListItem ? section.parent.parent.sections : section.parent.sections;

                    postEditor.insertSectionBefore(sections, newPara, section);
                });
            }
        }
    });
});
define('ghost-admin/components/gh-loading-spinner', ['exports', 'ember-concurrency'], function (exports, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        tagName: '',

        showSpinner: false,
        // ms until the loader is displayed,
        // prevents unnecessary flash of spinner
        slowLoadTimeout: 200,

        didInsertElement() {
            this.get('startSpinnerTimeout').perform();
        },

        startSpinnerTimeout: (0, _emberConcurrency.task)(function* () {
            yield (0, _emberConcurrency.timeout)(this.get('slowLoadTimeout'));
            this.set('showSpinner', true);
        })
    });
});
define('ghost-admin/components/gh-main', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        tagName: 'main',
        classNames: ['gh-main'],
        ariaRole: 'main',

        mouseEnter() {
            let action = this.get('onMouseEnter');
            if (action) {
                action();
            }
        }
    });
});
define('ghost-admin/components/gh-markdown-editor', ['exports', 'ghost-admin/mixins/shortcuts', 'ghost-admin/utils/ctrl-or-cmd', 'ghost-admin/utils/format-markdown'], function (exports, _shortcuts, _ctrlOrCmd, _formatMarkdown) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend(_shortcuts.default, {

        config: Ember.inject.service(),
        notifications: Ember.inject.service(),
        settings: Ember.inject.service(),

        classNames: ['gh-markdown-editor'],
        classNameBindings: ['_isFullScreen:gh-markdown-editor-full-screen', '_isSplitScreen:gh-markdown-editor-side-by-side'],

        // Public attributes
        autofocus: false,
        imageMimeTypes: null,
        isFullScreen: false,
        markdown: null,
        options: null,
        placeholder: '',
        showMarkdownHelp: false,
        uploadedImageUrls: null,

        enableSideBySide: true,
        enablePreview: true,
        enableHemingway: true,

        shortcuts: null,

        // Private
        _editor: null,
        _editorFocused: false,
        _isFullScreen: false,
        _isSplitScreen: false,
        _isHemingwayMode: false,
        _isUploading: false,
        _showUnsplash: false,
        _statusbar: null,
        _toolbar: null,
        _uploadedImageUrls: null,

        // Closure actions
        onChange() {},
        onFullScreenToggle() {},
        onImageFilesSelected() {},
        onPreviewToggle() {},
        onSplitScreenToggle() {},

        simpleMDEOptions: Ember.computed('options', function () {
            let options = this.get('options') || {};
            let defaultOptions = {
                // use our Showdown config with sanitization for previews
                previewRender(markdown) {
                    return (0, _formatMarkdown.default)(markdown);
                },

                // Ghost-specific SimpleMDE toolbar config - allows us to create a
                // bridge between SimpleMDE buttons and Ember actions
                toolbar: ['bold', 'italic', 'heading', '|', 'quote', 'unordered-list', 'ordered-list', '|', 'link', {
                    name: 'image',
                    action: () => {
                        this._openImageFileDialog();
                    },
                    className: 'fa fa-picture-o',
                    title: 'Upload Image(s)'
                }, '|', {
                    name: 'preview',
                    action: () => {
                        this._togglePreview();
                    },
                    className: 'fa fa-eye no-disable',
                    title: 'Render Preview (Ctrl-Alt-R)',
                    useCtrlOnMac: true
                }, {
                    name: 'side-by-side',
                    action: () => {
                        this.send('toggleSplitScreen');
                    },
                    className: 'fa fa-columns no-disable no-mobile',
                    title: 'Side-by-side Preview (Ctrl-Alt-P)',
                    useCtrlOnMac: true
                }, '|', {
                    name: 'spellcheck',
                    action: () => {
                        this._toggleSpellcheck();
                    },
                    className: 'fa fa-check',
                    title: 'Spellcheck (Ctrl-Alt-S)',
                    useCtrlOnMac: true
                }, {
                    name: 'hemingway',
                    action: () => {
                        this._toggleHemingway();
                    },
                    className: 'fa fa-h-square',
                    title: 'Hemingway Mode (Ctrl-Alt-H)',
                    useCtrlOnMac: true
                }, {
                    name: 'guide',
                    action: () => {
                        this.send('toggleMarkdownHelp');
                    },
                    className: 'fa fa-question-circle',
                    title: 'Markdown Guide'
                }],

                // disable shortcuts for side-by-side and fullscreen because they
                // trigger interal SimpleMDE methods that will result in broken
                // layouts
                shortcuts: {
                    toggleFullScreen: null,
                    togglePreview: null,
                    toggleSideBySide: null,
                    drawImage: null
                },

                // only include the number of words in the status bar
                status: ['words']
            };

            let toolbar = defaultOptions.toolbar;

            if (!this.get('enableSideBySide')) {
                let sideBySide = toolbar.findBy('name', 'side-by-side');
                let index = toolbar.indexOf(sideBySide);
                toolbar.splice(index, 1);
            }

            if (!this.get('enablePreview')) {
                let preview = toolbar.findBy('name', 'preview');
                let index = toolbar.indexOf(preview);
                toolbar.splice(index, 1);
            }

            if (!this.get('enableHemingway')) {
                let hemingway = toolbar.findBy('name', 'hemingway');
                let index = toolbar.indexOf(hemingway);
                toolbar.splice(index, 1);
            }

            if (this.get('settings.unsplash.isActive')) {
                let image = toolbar.findBy('name', 'image');
                let index = toolbar.indexOf(image) + 1;

                toolbar.splice(index, 0, {
                    name: 'unsplash',
                    action: () => {
                        this.send('toggleUnsplash');
                    },
                    className: 'fa fa-camera',
                    title: 'Add Image from Unsplash'
                });
            }

            let lastItem = null;
            toolbar.forEach((item, index) => {
                if (item === '|' && item === lastItem) {
                    toolbar[index] = null;
                }
                lastItem = item;
            });
            defaultOptions.toolbar = toolbar.filter(Boolean);

            return Ember.assign(defaultOptions, options);
        }),

        init() {
            this._super(...arguments);

            let shortcuts = {};
            shortcuts[`${_ctrlOrCmd.default}+shift+i`] = { action: 'openImageFileDialog' };
            shortcuts['ctrl+alt+s'] = { action: 'toggleSpellcheck' };

            if (this.get('enablePreview')) {
                shortcuts['ctrl+alt+r'] = { action: 'togglePreview' };
            }
            if (this.get('enableSideBySide')) {
                shortcuts['ctrl+alt+p'] = { action: 'toggleSplitScreen' };
            }
            if (this.get('enableHemingway')) {
                shortcuts['ctrl+alt+h'] = { action: 'toggleHemingway' };
            }

            this.shortcuts = shortcuts;
        },

        // extract markdown content from single markdown card
        didReceiveAttrs() {
            this._super(...arguments);

            let uploadedImageUrls = this.get('uploadedImageUrls');
            if (!Ember.isEmpty(uploadedImageUrls) && uploadedImageUrls !== this._uploadedImageUrls) {
                this._uploadedImageUrls = uploadedImageUrls;

                // must be done afterRender to avoid double modify of mobiledoc in
                // a single render
                Ember.run.scheduleOnce('afterRender', this, () => {
                    this._insertImages(uploadedImageUrls);
                });
            }

            // focus the editor when the markdown value changes, this is necessary
            // because both the autofocus and markdown values can change without a
            // re-render, eg. navigating from edit->new
            if (this.get('autofocus') && this._editor && this.get('markdown') !== this._editor.value()) {
                this.send('focusEditor');
            }

            // use internal values to avoid updating bound values
            if (!Ember.isEmpty(this.get('isFullScreen'))) {
                this.set('_isFullScreen', this.get('isFullScreen'));
            }
            if (!Ember.isEmpty(this.get('isSplitScreen'))) {
                this.set('_isSplitScreen', this.get('isSplitScreen'));
            }

            this._updateButtonState();
        },

        didInsertElement() {
            this._super(...arguments);
            this.registerShortcuts();

            // HACK: iOS will scroll the body up when activating the keyboard, this
            // causes problems in the CodeMirror based editor because iOS doesn't
            // scroll the cursor and other measurement elements which results in
            // rather unfriendly behaviour with text appearing in seemingly random
            // places and an inability to select things properly
            //
            // To get around this we use a raf loop that constantly makes sure the
            // body scrollTop is 0 when the editor is on screen
            let iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
            if (iOS) {
                this._preventBodyScroll();
            }
        },

        willDestroyElement() {
            if (this.get('_isSplitScreen')) {
                this._disconnectSplitPreview();
            }

            this.removeShortcuts();

            this._super(...arguments);

            if (this._preventBodyScrollId) {
                window.cancelAnimationFrame(this._preventBodyScrollId);
            }
        },

        actions: {
            // trigger external update, any mobiledoc updates are handled there
            updateMarkdown(markdown) {
                this.onChange(markdown);
            },

            // store a reference to the simplemde editor so that we can handle
            // focusing and image uploads
            setEditor(editor) {
                this._editor = editor;

                // disable CodeMirror's drag/drop handling as we want to handle that
                // in the parent gh-editor component
                this._editor.codemirror.setOption('dragDrop', false);

                // default to spellchecker being off
                this._editor.codemirror.setOption('mode', 'gfm');

                // add non-breaking space as a special char
                // eslint-disable-next-line no-control-regex
                this._editor.codemirror.setOption('specialChars', /[\u0000-\u001f\u007f-\u009f\u00ad\u061c\u200b-\u200f\u2028\u2029\ufeff\xa0]/g);

                // HACK: move the toolbar & status bar elements outside of the
                // editor container so that they can be aligned in fixed positions
                let container = this.element.closest('.gh-editor');
                let footer = container && container.querySelector('.gh-editor-footer');
                if (footer) {
                    this._toolbar = this.element.querySelector('.editor-toolbar');
                    this._statusbar = this.element.querySelector('.editor-statusbar');
                    footer.appendChild(this._toolbar);
                    footer.appendChild(this._statusbar);
                }

                this._updateButtonState();
            },

            // used by the title input when the TAB or ENTER keys are pressed
            focusEditor(position = 'bottom') {
                this._editor.codemirror.focus();

                if (position === 'bottom') {
                    this._editor.codemirror.execCommand('goDocEnd');
                } else if (position === 'top') {
                    this._editor.codemirror.execCommand('goDocStart');
                }

                return false;
            },

            // HACK FIXME (PLEASE):
            // - clicking toolbar buttons will cause the editor to lose focus
            // - this is painful because we often want to know if the editor has focus
            //   so that we can insert images and so on in the correct place
            // - the blur event will always fire before the button action is triggered 😞
            // - to work around this we track focus state manually and set it to false
            //   after an arbitrary period that's long enough to allow the button action
            //   to trigger first
            // - this _may_ well have unknown issues due to browser differences,
            //   variations in performance, moon cycles, sun spots, or cosmic rays
            // - here be 🐲
            // - (please let it work 🙏)
            updateFocusState(focused) {
                if (focused) {
                    this._editorFocused = true;
                } else {
                    Ember.run.later(this, function () {
                        this._editorFocused = false;
                    }, 100);
                }
            },

            openImageFileDialog() {
                let captureSelection = this._editor.codemirror.hasFocus();
                this._openImageFileDialog({ captureSelection });
            },

            toggleUnsplash() {
                if (this.get('_showUnsplash')) {
                    return this.toggleProperty('_showUnsplash');
                }

                // capture current selection before it's lost by clicking toolbar btn
                if (this._editorFocused) {
                    this._imageInsertSelection = {
                        anchor: this._editor.codemirror.getCursor('anchor'),
                        head: this._editor.codemirror.getCursor('head')
                    };
                }

                this.toggleProperty('_showUnsplash');
            },

            insertUnsplashPhoto({ src, alt, caption }) {
                let image = {
                    alt,
                    url: src,
                    credit: `<small>${caption}</small>`
                };

                this._insertImages([image]);
            },

            togglePreview() {
                this._togglePreview();
            },

            toggleFullScreen() {
                let isFullScreen = !this.get('_isFullScreen');

                this.set('_isFullScreen', isFullScreen);
                this._updateButtonState();
                this.onFullScreenToggle(isFullScreen);

                // leave split screen when exiting full screen mode
                if (!isFullScreen && this.get('_isSplitScreen')) {
                    this.send('toggleSplitScreen');
                }
            },

            toggleSplitScreen() {
                let isSplitScreen = !this.get('_isSplitScreen');
                let previewButton = this._editor.toolbarElements.preview;

                this.set('_isSplitScreen', isSplitScreen);
                this._updateButtonState();

                // set up the preview rendering and scroll sync
                // afterRender is needed so that necessary components have been
                // added/removed and editor pane length has settled
                if (isSplitScreen) {
                    // disable the normal SimpleMDE preview if it's active
                    if (this._editor.isPreviewActive()) {
                        let preview = this._editor.toolbar.find(button => button.name === 'preview');

                        preview.action(this._editor);
                    }

                    if (previewButton) {
                        previewButton.classList.add('disabled');
                    }

                    Ember.run.scheduleOnce('afterRender', this, this._connectSplitPreview);
                } else {
                    if (previewButton) {
                        previewButton.classList.remove('disabled');
                    }

                    Ember.run.scheduleOnce('afterRender', this, this._disconnectSplitPreview);
                }

                this.onSplitScreenToggle(isSplitScreen);

                // go fullscreen when entering split screen mode
                this.send('toggleFullScreen');
            },

            toggleSpellcheck() {
                this._toggleSpellcheck();
            },

            toggleHemingway() {
                this._toggleHemingway();
            },

            toggleMarkdownHelp() {
                this.toggleProperty('showMarkdownHelp');
            },

            // put the toolbar/statusbar elements back so that SimpleMDE doesn't throw
            // errors when it tries to remove them
            destroyEditor() {
                let container = this.element.querySelector('.gh-markdown-editor-pane');
                if (container) {
                    container.appendChild(this._toolbar);
                    container.appendChild(this._statusbar);
                }
                this._editor = null;
            }
        },

        _preventBodyScroll() {
            this._preventBodyScrollId = window.requestAnimationFrame(() => {
                let body = document.querySelector('body');

                // only scroll the editor if the editor is active so that we don't
                // clobber scroll-to-input behaviour in the PSM
                if (document.activeElement.closest('.CodeMirror')) {
                    if (body.scrollTop !== 0) {
                        let editor = document.querySelector('.gh-markdown-editor');

                        // scroll the editor by the same amount the body has been scrolled,
                        // this should keep the cursor on screen when opening the keyboard
                        editor.scrollTop += body.scrollTop;
                        body.scrollTop = 0;
                    }
                }

                this._preventBodyScroll();
            });
        },

        _insertImages(urls) {
            let cm = this._editor.codemirror;

            // loop through urls and generate image markdown
            let images = urls.map(url => {
                // plain url string, so extract filename from path
                if (Ember.typeOf(url) === 'string') {
                    let filename = url.split('/').pop();
                    let alt = filename;

                    // if we have a normal filename.ext, set alt to filename -ext
                    if (filename.lastIndexOf('.') > 0) {
                        alt = filename.slice(0, filename.lastIndexOf('.'));
                    }

                    return `![${alt}](${url})`;

                    // full url object, use attrs we're given
                } else {
                    let image = `![${url.alt}](${url.url})`;

                    if (url.credit) {
                        image += `\n${url.credit}`;
                    }

                    return image;
                }
            });
            let text = images.join('\n\n');

            // clicking the image toolbar button will lose the selection so we use
            // the captured selection to re-select here
            if (this._imageInsertSelection) {
                // we want to focus but not re-position
                this.send('focusEditor', null);

                // re-select and clear the captured selection so drag/drop still
                // inserts at the correct place
                cm.setSelection(this._imageInsertSelection.anchor, this._imageInsertSelection.head);
                this._imageInsertSelection = null;
            }

            // focus editor and place cursor at end if not already focused
            if (!cm.hasFocus()) {
                this.send('focusEditor');
                text = `\n\n${text}\n\n`;
            }

            // insert at cursor or replace selection then position cursor at end
            // of inserted text
            cm.replaceSelection(text, 'end');
        },

        // mark the split-pane/full-screen/spellcheck buttons active when they're active
        _updateButtonState() {
            if (this._editor) {
                let sideBySideButton = this._editor.toolbarElements['side-by-side'];
                let spellcheckButton = this._editor.toolbarElements.spellcheck;
                let hemingwayButton = this._editor.toolbarElements.hemingway;

                if (sideBySideButton) {
                    if (this.get('_isSplitScreen')) {
                        sideBySideButton.classList.add('active');
                    } else {
                        sideBySideButton.classList.remove('active');
                    }
                }

                if (spellcheckButton) {
                    if (this._editor.codemirror.getOption('mode') === 'spell-checker') {
                        spellcheckButton.classList.add('active');
                    } else {
                        spellcheckButton.classList.remove('active');
                    }
                }

                if (hemingwayButton) {
                    if (this._isHemingwayMode) {
                        hemingwayButton.classList.add('active');
                    } else {
                        hemingwayButton.classList.remove('active');
                    }
                }
            }
        },

        // set up the preview auto-update and scroll sync
        _connectSplitPreview() {
            let cm = this._editor.codemirror;
            let editor = this._editor;
            let editorPane = this.element.querySelector('.gh-markdown-editor-pane');
            let previewPane = this.element.querySelector('.gh-markdown-editor-preview');
            let previewContent = this.element.querySelector('.gh-markdown-editor-preview-content');

            this._editorPane = editorPane;
            this._previewPane = previewPane;
            this._previewContent = previewContent;

            // from SimpleMDE -------
            let sideBySideRenderingFunction = function sideBySideRenderingFunction() {
                previewContent.innerHTML = editor.options.previewRender(editor.value(), previewContent);
            };

            cm.sideBySideRenderingFunction = sideBySideRenderingFunction;

            sideBySideRenderingFunction();
            cm.on('update', cm.sideBySideRenderingFunction);

            // Refresh to fix selection being off (#309)
            cm.refresh();
            // ----------------------

            this._onEditorPaneScroll = this._scrollHandler.bind(this);
            editorPane.addEventListener('scroll', this._onEditorPaneScroll, false);
            this._scrollSync();
        },

        _scrollHandler() {
            if (!this._scrollSyncTicking) {
                requestAnimationFrame(this._scrollSync.bind(this));
            }
            this._scrollSyncTicking = true;
        },

        _scrollSync() {
            let editorPane = this._editorPane;
            let previewPane = this._previewPane;
            let height = editorPane.scrollHeight - editorPane.clientHeight;
            let ratio = parseFloat(editorPane.scrollTop) / height;
            let move = (previewPane.scrollHeight - previewPane.clientHeight) * ratio;

            previewPane.scrollTop = move;
            this._scrollSyncTicking = false;
        },

        _disconnectSplitPreview() {
            let cm = this._editor.codemirror;

            cm.off('update', cm.sideBySideRenderingFunction);
            cm.refresh();

            this._editorPane.removeEventListener('scroll', this._onEditorPaneScroll, false);
            delete this._previewPane;
            delete this._previewPaneContent;
            delete this._onEditorPaneScroll;
        },

        _openImageFileDialog({ captureSelection = true } = {}) {
            if (captureSelection) {
                // capture the current selection before it's lost by clicking the
                // file input button
                this._imageInsertSelection = {
                    anchor: this._editor.codemirror.getCursor('anchor'),
                    head: this._editor.codemirror.getCursor('head')
                };
            }

            // trigger the dialog via gh-file-input, when a file is selected it will
            // trigger the onImageFilesSelected closure action
            this.$('input[type="file"]').click();
        },

        // wrap SimpleMDE's built-in preview toggle so that we can trigger a closure
        // action that can apply our own classes higher up in the DOM
        _togglePreview() {
            this.onPreviewToggle(!this._editor.isPreviewActive());
            this._editor.togglePreview();
        },

        _toggleSpellcheck() {
            let cm = this._editor.codemirror;

            if (cm.getOption('mode') === 'spell-checker') {
                cm.setOption('mode', 'gfm');
            } else {
                cm.setOption('mode', 'spell-checker');
            }

            this._updateButtonState();
        },

        _toggleHemingway() {
            let cm = this._editor.codemirror;
            let extraKeys = cm.getOption('extraKeys');
            let notificationText = '';

            this._isHemingwayMode = !this._isHemingwayMode;

            if (this._isHemingwayMode) {
                notificationText = '<span class="gh-notification-title">Hemingway Mode On:</span> Write now; edit later. Backspace disabled.';
                extraKeys.Backspace = function () {};
            } else {
                notificationText = '<span class="gh-notification-title">Hemingway Mode Off:</span> Normal editing restored.';
                delete extraKeys.Backspace;
            }

            cm.setOption('extraKeys', extraKeys);
            this._updateButtonState();

            cm.focus();

            this.get('notifications').showNotification(Ember.String.htmlSafe(notificationText), { key: 'editor.hemingwaymode' });
        }
    });
});
define('ghost-admin/components/gh-menu-toggle', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        mediaQueries: Ember.inject.service(),

        classNames: ['gh-menu-toggle'],
        maximise: false,

        // closure actions
        desktopAction() {},
        mobileAction() {},

        isMobile: Ember.computed.reads('mediaQueries.isMobile'),

        iconClass: Ember.computed('maximise', 'isMobile', function () {
            if (this.get('maximise') && !this.get('isMobile')) {
                return 'icon-maximise';
            } else {
                return 'icon-minimise';
            }
        }),

        click() {
            if (this.get('isMobile')) {
                this.mobileAction();
            } else {
                this.toggleProperty('maximise');
                this.desktopAction();
            }
        }
    });
});
define('ghost-admin/components/gh-mobile-nav-bar', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        ui: Ember.inject.service(),

        tagName: 'nav',
        classNames: ['gh-mobile-nav-bar']
    });
});
define('ghost-admin/components/gh-nav-menu', ['exports', 'ember-basic-dropdown/utils/calculate-position'], function (exports, _calculatePosition2) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        config: Ember.inject.service(),
        feature: Ember.inject.service(),
        ghostPaths: Ember.inject.service(),
        router: Ember.inject.service('router'),
        session: Ember.inject.service(),
        ui: Ember.inject.service(),

        tagName: 'nav',
        classNames: ['gh-nav'],
        classNameBindings: ['open'],

        open: false,
        iconStyle: '',

        showMenuExtension: Ember.computed('config.clientExtensions.menu', 'session.user.isOwner', function () {
            return this.get('config.clientExtensions.menu') && this.get('session.user.isOwner');
        }),

        showDropdownExtension: Ember.computed('config.clientExtensions.dropdown', 'session.user.isOwner', function () {
            return this.get('config.clientExtensions.dropdown') && this.get('session.user.isOwner');
        }),

        showScriptExtension: Ember.computed('config.clientExtensions.script', 'session.user.isOwner', function () {
            return this.get('config.clientExtensions.script') && this.get('session.user.isOwner');
        }),

        // the menu has a rendering issue (#8307) when the the world is reloaded
        // during an import which we have worked around by not binding the icon
        // style directly. However we still need to keep track of changing icons
        // so that we can refresh when a new icon is uploaded
        didReceiveAttrs() {
            this._setIconStyle();
        },

        // equivalent to "left: auto; right: -20px"
        userDropdownPosition(trigger, dropdown) {
            var _calculatePosition = (0, _calculatePosition2.default)(...arguments);

            let horizontalPosition = _calculatePosition.horizontalPosition,
                verticalPosition = _calculatePosition.verticalPosition,
                style = _calculatePosition.style;

            var _dropdown$firstElemen = dropdown.firstElementChild.getBoundingClientRect();

            let dropdownWidth = _dropdown$firstElemen.width;


            style.right += dropdownWidth - 20;
            style['z-index'] = 1100;

            return { horizontalPosition, verticalPosition, style };
        },

        _setIconStyle() {
            let icon = this.get('icon');

            if (icon === this._icon) {
                return;
            }

            this._icon = icon;

            if (icon && icon.match(/^https?:\/\//i)) {
                this.set('iconStyle', Ember.String.htmlSafe(`background-image: url(${icon})`));
                return;
            }

            let subdirRegExp = new RegExp(`^${this.get('ghostPaths.subdir')}`);
            let blogIcon = icon ? icon : 'favicon.ico';
            let iconUrl;

            blogIcon = blogIcon.replace(subdirRegExp, '');

            iconUrl = this.get('ghostPaths.url').join(this.get('config.blogUrl'), blogIcon).replace(/\/$/, '');
            iconUrl += `?t=${new Date().valueOf()}`;

            this.set('iconStyle', Ember.String.htmlSafe(`background-image: url(${iconUrl})`));
        }
    });
});
define('ghost-admin/components/gh-navitem-url-input', ['exports', 'npm:validator'], function (exports, _npmValidator) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _window = window;
    const URI = _window.URI;


    let joinUrlParts = function joinUrlParts(url, path) {
        if (path[0] !== '/' && url.slice(-1) !== '/') {
            path = `/${path}`;
        } else if (path[0] === '/' && url.slice(-1) === '/') {
            path = path.slice(1);
        }

        return url + path;
    };

    let isRelative = function isRelative(url) {
        // "protocol://", "//example.com", "scheme:", "#anchor", & invalid paths
        // should all be treated as absolute
        return !url.match(/\s/) && !_npmValidator.default.isURL(url) && !url.match(/^(\/\/|#|[a-zA-Z0-9-]+:)/);
    };

    exports.default = Ember.TextField.extend({
        classNames: 'gh-input',

        // Allowed actions
        clearErrors: () => {},

        isBaseUrl: Ember.computed('baseUrl', 'value', function () {
            return this.get('baseUrl') === this.get('value');
        }),

        didReceiveAttrs() {
            this._super(...arguments);

            let baseUrl = this.get('baseUrl');
            let url = this.get('url');

            // if we have a relative url, create the absolute url to be displayed in the input
            if (isRelative(url)) {
                url = joinUrlParts(baseUrl, url);
            }

            this.set('value', url);
        },

        focusIn(event) {
            this.set('hasFocus', true);

            if (this.get('isBaseUrl')) {
                // position the cursor at the end of the input
                Ember.run.next(function (el) {
                    let length = el.value.length;


                    el.setSelectionRange(length, length);
                }, event.target);
            }
        },

        keyDown(event) {
            // delete the "placeholder" value all at once
            if (this.get('isBaseUrl') && (event.keyCode === 8 || event.keyCode === 46)) {
                this.set('value', '');

                event.preventDefault();
            }

            // CMD-S
            if (event.keyCode === 83 && event.metaKey) {
                this.notifyUrlChanged();
            }
        },

        keyPress(event) {
            this.clearErrors();

            // enter key
            if (event.keyCode === 13) {
                this.notifyUrlChanged();
            }

            return true;
        },

        focusOut() {
            this.set('hasFocus', false);

            this.notifyUrlChanged();
        },

        notifyUrlChanged() {
            let url = this.get('value').trim();
            let urlURI = URI.parse(url);
            let baseUrl = this.get('baseUrl');
            let baseURI = URI.parse(baseUrl);

            function getHost(uri) {
                let host = uri.getDomain();

                if (uri.getPort()) {
                    host = `${host}:${uri.getPort()}`;
                }

                return host;
            }

            let urlHost = getHost(urlURI);
            let baseHost = getHost(baseURI);

            // ensure value property is trimmed
            this.set('value', url);

            // if we have an email address, add the mailto:
            if (_npmValidator.default.isEmail(url)) {
                url = `mailto:${url}`;
                this.set('value', url);
            }

            // if we have a relative url, create the absolute url to be displayed in the input
            if (isRelative(url)) {
                url = joinUrlParts(baseUrl, url);
                this.set('value', url);
            }

            // get our baseUrl relativity checks in order
            let isOnSameHost = urlHost === baseHost;
            let isAnchorLink = url.match(/^#/);
            let isRelativeToBasePath = urlURI.getPath() && urlURI.getPath().indexOf(baseURI.getPath()) === 0;

            // if our path is only missing a trailing / mark it as relative
            if (`${urlURI.getPath()}/` === baseURI.getPath()) {
                isRelativeToBasePath = true;
            }

            // if relative to baseUrl, remove the base url before sending to action
            if (!isAnchorLink && isOnSameHost && isRelativeToBasePath) {
                url = url.replace(/^[a-zA-Z0-9-]+:/, '');
                url = url.replace(/^\/\//, '');
                url = url.replace(baseHost, '');
                url = url.replace(baseURI.getPath(), '');

                // handle case where url path is same as baseUrl path but missing trailing slash
                if (urlURI.getPath().slice(-1) !== '/') {
                    url = url.replace(baseURI.getPath().slice(0, -1), '');
                }

                if (url !== '' || !this.get('isNew')) {
                    if (!url.match(/^\//)) {
                        url = `/${url}`;
                    }

                    if (!url.match(/\/$/) && !url.match(/[.#?]/)) {
                        url = `${url}/`;
                    }
                }
            }

            let action = this.get('update');
            if (action) {
                action(url);
            }
        }
    });
});
define('ghost-admin/components/gh-navitem', ['exports', 'ghost-admin/mixins/validation-state'], function (exports, _validationState) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend(_validationState.default, {
        classNames: 'gh-blognav-item',
        classNameBindings: ['errorClass', 'navItem.isNew::gh-blognav-item--sortable'],

        new: false,

        errors: Ember.computed.readOnly('navItem.errors'),

        errorClass: Ember.computed('hasError', function () {
            if (this.get('hasError')) {
                return 'gh-blognav-item--error';
            }
        }),

        actions: {
            addItem() {
                let action = this.get('addItem');
                if (action) {
                    action();
                }
            },

            deleteItem(item) {
                let action = this.get('deleteItem');
                if (action) {
                    action(item);
                }
            },

            updateUrl(value) {
                let action = this.get('updateUrl');
                if (action) {
                    action(value, this.get('navItem'));
                }
            },

            updateLabel(value) {
                let action = this.get('updateLabel');
                if (action) {
                    action(value, this.get('navItem'));
                }
            },

            clearLabelErrors() {
                this.get('navItem.errors').remove('label');
            },

            clearUrlErrors() {
                this.get('navItem.errors').remove('url');
            }
        },

        keyPress(event) {
            // enter key
            if (event.keyCode === 13 && this.get('navItem.isNew')) {
                event.preventDefault();
                Ember.run.scheduleOnce('actions', this, function () {
                    this.send('addItem');
                });
            }
        }
    });
});
define('ghost-admin/components/gh-notification', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        notifications: Ember.inject.service(),

        tagName: 'article',
        classNames: ['gh-notification', 'gh-notification-passive'],
        classNameBindings: ['typeClass'],

        message: null,

        typeClass: Ember.computed('message.type', function () {
            let type = this.get('message.type');
            let classes = '';
            let typeMapping;

            typeMapping = {
                success: 'green',
                error: 'red',
                warn: 'yellow'
            };

            if (typeMapping[type] !== undefined) {
                classes += `gh-notification-${typeMapping[type]}`;
            }

            return classes;
        }),

        didInsertElement() {
            this._super(...arguments);

            this.$().on('animationend webkitAnimationEnd oanimationend MSAnimationEnd', event => {
                if (event.originalEvent.animationName === 'fade-out') {
                    this.get('notifications').closeNotification(this.get('message'));
                }
            });
        },

        willDestroyElement() {
            this._super(...arguments);
            this.$().off('animationend webkitAnimationEnd oanimationend MSAnimationEnd');
        },

        actions: {
            closeNotification() {
                this.get('notifications').closeNotification(this.get('message'));
            }
        }
    });
});
define('ghost-admin/components/gh-notifications', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        notifications: Ember.inject.service(),

        tagName: 'aside',
        classNames: 'gh-notifications',

        messages: Ember.computed.alias('notifications.notifications')
    });
});
define('ghost-admin/components/gh-post-settings-menu', ['exports', 'ghost-admin/mixins/settings-menu-component', 'ghost-admin/utils/bound-one-way', 'ghost-admin/utils/format-markdown', 'moment', 'ember-concurrency'], function (exports, _settingsMenuComponent, _boundOneWay, _formatMarkdown, _moment, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    const PSM_ANIMATION_LENGTH = 400;

    exports.default = Ember.Component.extend(_settingsMenuComponent.default, {
        store: Ember.inject.service(),
        config: Ember.inject.service(),
        ghostPaths: Ember.inject.service(),
        notifications: Ember.inject.service(),
        slugGenerator: Ember.inject.service(),
        session: Ember.inject.service(),
        settings: Ember.inject.service(),
        ui: Ember.inject.service(),

        post: null,

        _showSettingsMenu: false,
        _showThrobbers: false,

        customExcerptScratch: Ember.computed.alias('post.customExcerptScratch'),
        codeinjectionFootScratch: Ember.computed.alias('post.codeinjectionFootScratch'),
        codeinjectionHeadScratch: Ember.computed.alias('post.codeinjectionHeadScratch'),
        metaDescriptionScratch: Ember.computed.alias('post.metaDescriptionScratch'),
        metaTitleScratch: Ember.computed.alias('post.metaTitleScratch'),
        ogDescriptionScratch: Ember.computed.alias('post.ogDescriptionScratch'),
        ogTitleScratch: Ember.computed.alias('post.ogTitleScratch'),
        twitterDescriptionScratch: Ember.computed.alias('post.twitterDescriptionScratch'),
        twitterTitleScratch: Ember.computed.alias('post.twitterTitleScratch'),
        slugValue: (0, _boundOneWay.default)('post.slug'),

        facebookDescription: Ember.computed.or('ogDescriptionScratch', 'customExcerptScratch', 'seoDescription'),
        facebookImage: Ember.computed.or('post.ogImage', 'post.featureImage'),
        facebookTitle: Ember.computed.or('ogTitleScratch', 'seoTitle'),
        twitterDescription: Ember.computed.or('twitterDescriptionScratch', 'customExcerptScratch', 'seoDescription'),
        twitterImage: Ember.computed.or('post.twitterImage', 'post.featureImage'),
        twitterTitle: Ember.computed.or('twitterTitleScratch', 'seoTitle'),

        seoTitle: Ember.computed('metaTitleScratch', 'post.titleScratch', function () {
            return this.metaTitleScratch || this.post.titleScratch || '(Untitled)';
        }),

        seoDescription: Ember.computed('post.scratch', 'metaDescriptionScratch', function () {
            let metaDescription = this.get('metaDescriptionScratch') || '';
            let mobiledoc = this.get('post.scratch');

            var _mobiledoc$cards = _slicedToArray(mobiledoc.cards, 1);

            let markdownCard = _mobiledoc$cards[0];

            let markdown = markdownCard && markdownCard[1] && markdownCard[1].markdown;
            let placeholder;

            if (metaDescription) {
                placeholder = metaDescription;
            } else {
                let div = document.createElement('div');
                div.innerHTML = (0, _formatMarkdown.default)(markdown, false);

                // Strip HTML
                placeholder = div.textContent;
                // Replace new lines and trim
                placeholder = placeholder.replace(/\n+/g, ' ').trim();
            }

            return placeholder;
        }),

        seoURL: Ember.computed('post.slug', 'config.blogUrl', function () {
            let blogUrl = this.get('config.blogUrl');
            let seoSlug = this.get('post.slug') ? this.get('post.slug') : '';
            let seoURL = `${blogUrl}/${seoSlug}`;

            // only append a slash to the URL if the slug exists
            if (seoSlug) {
                seoURL += '/';
            }

            return seoURL;
        }),

        didReceiveAttrs() {
            this._super(...arguments);

            // HACK: ugly method of working around the CSS animations so that we
            // can add throbbers only when the animation has finished
            // TODO: use liquid-fire to handle PSM slide-in and replace tabs manager
            // with something more ember-like
            if (this.get('showSettingsMenu') && !this._showSettingsMenu) {
                this.get('showThrobbers').perform();
            }

            // fired when menu is closed
            if (!this.get('showSettingsMenu') && this._showSettingsMenu) {
                let post = this.get('post');
                let errors = post.get('errors');

                // reset the publish date if it has an error
                if (errors.has('publishedAtBlogDate') || errors.has('publishedAtBlogTime')) {
                    post.set('publishedAtBlogTZ', post.get('publishedAtUTC'));
                    post.validate({ attribute: 'publishedAtBlog' });
                }

                // remove throbbers
                this.set('_showThrobbers', false);
            }

            this._showSettingsMenu = this.get('showSettingsMenu');
        },

        actions: {
            showSubview(subview) {
                this._super(...arguments);

                this.set('subview', subview);

                // Chrome appears to have an animation bug that cancels the slide
                // transition unless there's a delay between the animation starting
                // and the throbbers being removed
                Ember.run.later(this, function () {
                    this.set('_showThrobbers', false);
                }, 50);
            },

            closeSubview() {
                this._super(...arguments);

                this.set('subview', null);
                this.get('showThrobbers').perform();
            },

            discardEnter() {
                return false;
            },

            togglePage() {
                this.toggleProperty('post.page');

                // If this is a new post.  Don't save the post.  Defer the save
                // to the user pressing the save button
                if (this.get('post.isNew')) {
                    return;
                }

                this.get('savePost').perform().catch(error => {
                    this.showError(error);
                    this.get('post').rollbackAttributes();
                });
            },

            toggleFeatured() {
                this.toggleProperty('post.featured');

                // If this is a new post.  Don't save the post.  Defer the save
                // to the user pressing the save button
                if (this.get('post.isNew')) {
                    return;
                }

                this.get('savePost').perform().catch(error => {
                    this.showError(error);
                    this.get('post').rollbackAttributes();
                });
            },

            /**
             * triggered by user manually changing slug
             */
            updateSlug(newSlug) {
                return this.get('updateSlug').perform(newSlug).catch(error => {
                    this.showError(error);
                    this.get('post').rollbackAttributes();
                });
            },

            setPublishedAtBlogDate(date) {
                let post = this.get('post');
                let dateString = (0, _moment.default)(date).format('YYYY-MM-DD');

                post.get('errors').remove('publishedAtBlogDate');

                if (post.get('isNew') || date === post.get('publishedAtBlogDate')) {
                    post.validate({ property: 'publishedAtBlog' });
                } else {
                    post.set('publishedAtBlogDate', dateString);
                    return this.get('savePost').perform();
                }
            },

            setPublishedAtBlogTime(time) {
                let post = this.get('post');

                post.get('errors').remove('publishedAtBlogDate');

                if (post.get('isNew') || time === post.get('publishedAtBlogTime')) {
                    post.validate({ property: 'publishedAtBlog' });
                } else {
                    post.set('publishedAtBlogTime', time);
                    return this.get('savePost').perform();
                }
            },

            setCustomExcerpt(excerpt) {
                let post = this.get('post');
                let currentExcerpt = post.get('customExcerpt');

                if (excerpt === currentExcerpt) {
                    return;
                }

                post.set('customExcerpt', excerpt);

                return post.validate({ property: 'customExcerpt' }).then(() => this.get('savePost').perform());
            },

            setHeaderInjection(code) {
                let post = this.get('post');
                let currentCode = post.get('codeinjectionHead');

                if (code === currentCode) {
                    return;
                }

                post.set('codeinjectionHead', code);

                return post.validate({ property: 'codeinjectionHead' }).then(() => this.get('savePost').perform());
            },

            setFooterInjection(code) {
                let post = this.get('post');
                let currentCode = post.get('codeinjectionFoot');

                if (code === currentCode) {
                    return;
                }

                post.set('codeinjectionFoot', code);

                return post.validate({ property: 'codeinjectionFoot' }).then(() => this.get('savePost').perform());
            },

            setMetaTitle(metaTitle) {
                // Grab the post and current stored meta title
                let post = this.get('post');
                let currentTitle = post.get('metaTitle');

                // If the title entered matches the stored meta title, do nothing
                if (currentTitle === metaTitle) {
                    return;
                }

                // If the title entered is different, set it as the new meta title
                post.set('metaTitle', metaTitle);

                // Make sure the meta title is valid and if so, save it into the post
                return post.validate({ property: 'metaTitle' }).then(() => {
                    if (post.get('isNew')) {
                        return;
                    }

                    return this.get('savePost').perform();
                });
            },

            setMetaDescription(metaDescription) {
                // Grab the post and current stored meta description
                let post = this.get('post');
                let currentDescription = post.get('metaDescription');

                // If the title entered matches the stored meta title, do nothing
                if (currentDescription === metaDescription) {
                    return;
                }

                // If the title entered is different, set it as the new meta title
                post.set('metaDescription', metaDescription);

                // Make sure the meta title is valid and if so, save it into the post
                return post.validate({ property: 'metaDescription' }).then(() => {
                    if (post.get('isNew')) {
                        return;
                    }

                    return this.get('savePost').perform();
                });
            },

            setOgTitle(ogTitle) {
                // Grab the post and current stored facebook title
                let post = this.get('post');
                let currentTitle = post.get('ogTitle');

                // If the title entered matches the stored facebook title, do nothing
                if (currentTitle === ogTitle) {
                    return;
                }

                // If the title entered is different, set it as the new facebook title
                post.set('ogTitle', ogTitle);

                // Make sure the facebook title is valid and if so, save it into the post
                return post.validate({ property: 'ogTitle' }).then(() => {
                    if (post.get('isNew')) {
                        return;
                    }

                    return this.get('savePost').perform();
                });
            },

            setOgDescription(ogDescription) {
                // Grab the post and current stored facebook description
                let post = this.get('post');
                let currentDescription = post.get('ogDescription');

                // If the title entered matches the stored facebook description, do nothing
                if (currentDescription === ogDescription) {
                    return;
                }

                // If the description entered is different, set it as the new facebook description
                post.set('ogDescription', ogDescription);

                // Make sure the facebook description is valid and if so, save it into the post
                return post.validate({ property: 'ogDescription' }).then(() => {
                    if (post.get('isNew')) {
                        return;
                    }

                    return this.get('savePost').perform();
                });
            },

            setTwitterTitle(twitterTitle) {
                // Grab the post and current stored twitter title
                let post = this.get('post');
                let currentTitle = post.get('twitterTitle');

                // If the title entered matches the stored twitter title, do nothing
                if (currentTitle === twitterTitle) {
                    return;
                }

                // If the title entered is different, set it as the new twitter title
                post.set('twitterTitle', twitterTitle);

                // Make sure the twitter title is valid and if so, save it into the post
                return post.validate({ property: 'twitterTitle' }).then(() => {
                    if (post.get('isNew')) {
                        return;
                    }

                    return this.get('savePost').perform();
                });
            },

            setTwitterDescription(twitterDescription) {
                // Grab the post and current stored twitter description
                let post = this.get('post');
                let currentDescription = post.get('twitterDescription');

                // If the description entered matches the stored twitter description, do nothing
                if (currentDescription === twitterDescription) {
                    return;
                }

                // If the description entered is different, set it as the new twitter description
                post.set('twitterDescription', twitterDescription);

                // Make sure the twitter description is valid and if so, save it into the post
                return post.validate({ property: 'twitterDescription' }).then(() => {
                    if (post.get('isNew')) {
                        return;
                    }

                    return this.get('savePost').perform();
                });
            },

            setCoverImage(image) {
                this.set('post.featureImage', image);

                if (this.get('post.isNew')) {
                    return;
                }

                this.get('savePost').perform().catch(error => {
                    this.showError(error);
                    this.get('post').rollbackAttributes();
                });
            },

            clearCoverImage() {
                this.set('post.featureImage', '');

                if (this.get('post.isNew')) {
                    return;
                }

                this.get('savePost').perform().catch(error => {
                    this.showError(error);
                    this.get('post').rollbackAttributes();
                });
            },

            setOgImage(image) {
                this.set('post.ogImage', image);

                if (this.get('post.isNew')) {
                    return;
                }

                this.get('savePost').perform().catch(error => {
                    this.showError(error);
                    this.get('post').rollbackAttributes();
                });
            },

            clearOgImage() {
                this.set('post.ogImage', '');

                if (this.get('post.isNew')) {
                    return;
                }

                this.get('savePost').perform().catch(error => {
                    this.showError(error);
                    this.get('post').rollbackAttributes();
                });
            },

            setTwitterImage(image) {
                this.set('post.twitterImage', image);

                if (this.get('post.isNew')) {
                    return;
                }

                this.get('savePost').perform().catch(error => {
                    this.showError(error);
                    this.get('post').rollbackAttributes();
                });
            },

            clearTwitterImage() {
                this.set('post.twitterImage', '');

                if (this.get('post.isNew')) {
                    return;
                }

                this.get('savePost').perform().catch(error => {
                    this.showError(error);
                    this.get('post').rollbackAttributes();
                });
            },

            changeAuthors(newAuthors) {
                let post = this.get('post');

                // return if nothing changed
                if (newAuthors.mapBy('id').join() === post.get('authors').mapBy('id').join()) {
                    return;
                }

                post.set('authors', newAuthors);
                post.validate({ property: 'authors' });

                // if this is a new post (never been saved before), don't try to save it
                if (post.get('isNew')) {
                    return;
                }

                this.get('savePost').perform().catch(error => {
                    this.showError(error);
                    post.rollbackAttributes();
                });
            },

            deletePost() {
                if (this.get('deletePost')) {
                    this.get('deletePost')();
                }
            }
        },

        showThrobbers: (0, _emberConcurrency.task)(function* () {
            yield (0, _emberConcurrency.timeout)(PSM_ANIMATION_LENGTH);
            this.set('_showThrobbers', true);
        }).restartable(),

        showError(error) {
            // TODO: remove null check once ValidationEngine has been removed
            if (error) {
                this.get('notifications').showAPIError(error);
            }
        }
    });
});
define('ghost-admin/components/gh-posts-list-item', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        ghostPaths: Ember.inject.service(),

        tagName: 'li',
        classNames: ['gh-posts-list-item'],
        classNameBindings: ['active'],

        post: null,
        active: false,

        // closure actions
        onClick() {},
        onDoubleClick() {},

        isFeatured: Ember.computed.alias('post.featured'),
        isPage: Ember.computed.alias('post.page'),
        isDraft: Ember.computed.equal('post.status', 'draft'),
        isPublished: Ember.computed.equal('post.status', 'published'),
        isScheduled: Ember.computed.equal('post.status', 'scheduled'),

        authorNames: Ember.computed('post.authors.[]', function () {
            let authors = this.get('post.authors');

            return authors.map(author => author.get('name') || author.get('email')).join(', ');
        }),

        // HACK: this is intentionally awful due to time constraints
        // TODO: find a better way to get an excerpt! :)
        subText: Ember.computed('post.{plaintext,metaDescription}', function () {
            let text = this.get('post.plaintext');
            let metaDescription = this.get('post.metaDescription');

            if (!Ember.isBlank(metaDescription)) {
                text = metaDescription;
            }
            return `${text.slice(0, 80)}...`;
        }),

        didReceiveAttrs() {
            if (this.get('active')) {
                this.scrollIntoView();
            }
        },

        click() {
            this.onClick(this.get('post'));
        },

        doubleClick() {
            this.onDoubleClick(this.get('post'));
        },

        scrollIntoView() {
            let element = this.$();
            let offset = element.offset().top;
            let elementHeight = element.height();
            let container = Ember.$('.content-list');
            let containerHeight = container.height();
            let currentScroll = container.scrollTop();
            let isBelowTop, isAboveBottom, isOnScreen;

            isAboveBottom = offset < containerHeight;
            isBelowTop = offset > elementHeight;

            isOnScreen = isBelowTop && isAboveBottom;

            if (!isOnScreen) {
                // Scroll so that element is centered in container
                // 40 is the amount of padding on the container
                container.clearQueue().animate({
                    scrollTop: currentScroll + offset - 40 - containerHeight / 2
                });
            }
        }
    });
});
define('ghost-admin/components/gh-profile-image', ['exports', 'npm:blueimp-md5', 'ember-ajax/request', 'npm:validator', 'ember-concurrency'], function (exports, _npmBlueimpMd, _request, _npmValidator, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    const ANIMATION_TIMEOUT = 1000;

    /**
     * A component to manage a user profile image. By default it just handles picture uploads,
     * but if passed a bound 'email' property it will render the user's gravatar image
     *
     * Example: {{gh-profile-image email=controllerEmailProperty setImage="controllerActionName" debounce=500}}
     *
     * @param  {int}            size              The size of the image to render
     * @param  {String}         email             Reference to a bound email object if gravatar image behavior is desired.
     * @param  {String|action}  setImage          The string name of the action on the controller to be called when an image is added.
     * @param  {int}            debounce          Period to wait after changes to email before attempting to load gravatar
     * @property  {Boolean}     hasUploadedImage  Whether or not the user has uploaded an image (whether or not to show the default image/gravatar image)
     * @property  {String}      defaultImage      String containing the background-image css property of the default user profile image
     * @property  {String}      imageBackground   String containing the background-image css property with the gravatar url
     */
    exports.default = Ember.Component.extend({
        config: Ember.inject.service(),
        ghostPaths: Ember.inject.service(),

        email: '',
        size: 180,
        debounce: 300,

        imageFile: null,
        hasUploadedImage: false,

        _defaultImageUrl: '',

        // closure actions
        setImage() {},

        placeholderStyle: Ember.String.htmlSafe('background-image: url()'),
        avatarStyle: Ember.String.htmlSafe('display: none'),

        init() {
            this._super(...arguments);

            let defaultImage = '/img/user-image.png';
            this._defaultImageUrl = this.get('ghostPaths.assetRoot').replace(/\/$/, '') + defaultImage;
            this._setPlaceholderImage(this._defaultImageUrl);
        },

        didReceiveAttrs() {
            this._super(...arguments);

            if (this.get('config.useGravatar')) {
                this.get('setGravatar').perform();
            }
        },

        actions: {
            imageSelected(fileList, resetInput) {
                // eslint-disable-next-line
                let imageFile = fileList[0];

                if (imageFile) {
                    let reader = new FileReader();

                    this.set('imageFile', imageFile);
                    this.setImage(imageFile);

                    reader.addEventListener('load', () => {
                        let dataURL = reader.result;
                        this.set('previewDataURL', dataURL);
                    }, false);

                    reader.readAsDataURL(imageFile);
                }

                resetInput();
            },

            openFileDialog(event) {
                // simulate click to open file dialog
                // using jQuery because IE11 doesn't support MouseEvent
                Ember.$(event.target).closest('figure').find('input[type="file"]').click();
            }
        },

        dragOver(event) {
            if (!event.dataTransfer) {
                return;
            }

            // this is needed to work around inconsistencies with dropping files
            // from Chrome's downloads bar
            if (navigator.userAgent.indexOf('Chrome') > -1) {
                let eA = event.dataTransfer.effectAllowed;
                event.dataTransfer.dropEffect = eA === 'move' || eA === 'linkMove' ? 'move' : 'copy';
            }

            event.stopPropagation();
            event.preventDefault();
        },

        dragLeave(event) {
            event.preventDefault();
        },

        drop(event) {
            event.preventDefault();

            if (event.dataTransfer.files) {
                this.send('imageSelected', event.dataTransfer.files);
            }
        },

        setGravatar: (0, _emberConcurrency.task)(function* () {
            yield (0, _emberConcurrency.timeout)(this.get('debounce'));

            let email = this.get('email');

            if (_npmValidator.default.isEmail(email || '')) {
                let size = this.get('size');
                let gravatarUrl = `//www.gravatar.com/avatar/${(0, _npmBlueimpMd.default)(email)}?s=${size}&d=404`;

                try {
                    // HEAD request is needed otherwise jquery attempts to process
                    // binary data as JSON and throws an error
                    yield (0, _request.default)(gravatarUrl, { type: 'HEAD' });
                    // gravatar exists so switch style and let browser load it
                    this._setAvatarImage(gravatarUrl);
                    // wait for fade-in animation to finish before removing placeholder
                    yield (0, _emberConcurrency.timeout)(ANIMATION_TIMEOUT);
                    this._setPlaceholderImage('');
                } catch (e) {
                    // gravatar doesn't exist so make sure we're still showing the placeholder
                    this._setPlaceholderImage(this._defaultImageUrl);
                    // then make sure the avatar isn't visible
                    this._setAvatarImage('');
                }
            }
        }).restartable(),

        _setPlaceholderImage(url) {
            this.set('placeholderStyle', Ember.String.htmlSafe(`background-image: url(${url});`));
        },

        _setAvatarImage(url) {
            let display = url ? 'block' : 'none';
            this.set('avatarStyle', Ember.String.htmlSafe(`background-image: url(${url}); display: ${display}`));
        },

        queueFile(e, data) {
            let fileName = data.files[0].name;

            if (/\.(gif|jpe?g|png|svg?z)$/i.test(fileName)) {
                let action = this.get('setImage');
                if (action) {
                    action(data);
                }
            }
        }
    });
});
define('ghost-admin/components/gh-progress-bar', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        tagName: '',

        // Public attributes
        percentage: 0,
        isError: false,

        // Internal attributes
        progressStyle: '',

        didReceiveAttrs() {
            this._super(...arguments);

            let percentage = this.get('percentage');
            let width = percentage > 0 ? `${percentage}%` : '0';

            this.set('progressStyle', Ember.String.htmlSafe(`width: ${width}`));
        }

    });
});
define('ghost-admin/components/gh-psm-authors-input', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({

        store: Ember.inject.service(),

        // public attrs
        selectedAuthors: null,
        tagName: '',
        triggerId: '',

        // internal attrs
        availableAuthors: null,

        // closure actions
        updateAuthors() {},

        availableAuthorNames: Ember.computed('availableAuthors.@each.name', function () {
            return this.get('availableAuthors').map(author => author.get('name').toLowerCase());
        }),

        init() {
            this._super(...arguments);
            // perform a background query to fetch all users and set `availableAuthors`
            // to a live-query that will be immediately populated with what's in the
            // store and be updated when the above query returns
            this.store.query('user', { limit: 'all' });
            this.set('availableAuthors', this.store.peekAll('user'));
        },

        actions: {
            updateAuthors(newAuthors) {
                this.updateAuthors(newAuthors);
            }
        }

    });
});
define('ghost-admin/components/gh-psm-tags-input', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({

        store: Ember.inject.service(),

        // public attrs
        post: null,
        tagName: '',

        // internal attrs
        availableTags: null,

        availableTagNames: Ember.computed('availableTags.@each.name', function () {
            return this.get('availableTags').map(tag => tag.get('name').toLowerCase());
        }),

        init() {
            this._super(...arguments);
            // perform a background query to fetch all users and set `availableTags`
            // to a live-query that will be immediately populated with what's in the
            // store and be updated when the above query returns
            this.store.query('tag', { limit: 'all' });
            this.set('availableTags', this.store.peekAll('tag'));
        },

        actions: {
            matchTags(tagName, term) {
                return tagName.toLowerCase() === term.trim().toLowerCase();
            },

            hideCreateOptionOnMatchingTag(term) {
                return !this.get('availableTagNames').includes(term.toLowerCase());
            },

            updateTags(newTags) {
                let currentTags = this.get('post.tags');

                // destroy new+unsaved tags that are no longer selected
                currentTags.forEach(function (tag) {
                    if (!newTags.includes(tag) && tag.get('isNew')) {
                        tag.destroyRecord();
                    }
                });

                // update tags
                return this.set('post.tags', newTags);
            },

            createTag(tagName) {
                let currentTags = this.get('post.tags');
                let currentTagNames = currentTags.map(tag => tag.get('name').toLowerCase());
                let tagToAdd;

                tagName = tagName.trim();

                // abort if tag is already selected
                if (currentTagNames.includes(tagName.toLowerCase())) {
                    return;
                }

                // find existing tag if there is one
                tagToAdd = this._findTagByName(tagName);

                // create new tag if no match
                if (!tagToAdd) {
                    tagToAdd = this.store.createRecord('tag', {
                        name: tagName
                    });

                    // set to public/internal based on the tag name
                    tagToAdd.updateVisibility();
                }

                // push tag onto post relationship
                return currentTags.pushObject(tagToAdd);
            }
        },

        // methods

        _findTagByName(name) {
            let withMatchingName = function withMatchingName(tag) {
                return tag.name.toLowerCase() === name.toLowerCase();
            };
            return this.availableTags.find(withMatchingName);
        }
    });
});
define('ghost-admin/components/gh-psm-template-select', ['exports', 'ember-concurrency'], function (exports, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    exports.default = Ember.Component.extend({

        store: Ember.inject.service(),

        // public attributes
        tagName: '',
        post: null,

        // internal properties
        activeTheme: null,

        // closure actions
        onTemplateSelect() {},

        // computed properties
        customTemplates: Ember.computed('activeTheme.customTemplates.[]', function () {
            let templates = this.get('activeTheme.customTemplates') || [];
            let defaultTemplate = {
                filename: '',
                name: 'Default'
            };

            return Ember.isEmpty(templates) ? templates : [defaultTemplate, ...templates.sortBy('name')];
        }),

        matchedSlugTemplate: Ember.computed('post.{page,slug}', 'activeTheme.slugTemplates.[]', function () {
            let slug = this.get('post.slug');
            let type = this.get('post.page') ? 'page' : 'post';

            var _get$filter = this.get('activeTheme.slugTemplates').filter(function (template) {
                return template.for.includes(type) && template.slug === slug;
            }),
                _get$filter2 = _slicedToArray(_get$filter, 1);

            let matchedTemplate = _get$filter2[0];


            return matchedTemplate;
        }),

        selectedTemplate: Ember.computed('post.customTemplate', 'customTemplates.[]', function () {
            let templates = this.get('customTemplates');
            let filename = this.get('post.customTemplate');

            return templates.findBy('filename', filename);
        }),

        // hooks
        didInsertElement() {
            this._super(...arguments);
            this.get('loadActiveTheme').perform();
        },

        actions: {
            selectTemplate(template) {
                this.onTemplateSelect(template.filename);
            }
        },

        // tasks
        loadActiveTheme: (0, _emberConcurrency.task)(function* () {
            let store = this.get('store');
            let themes = yield store.peekAll('theme');

            if (Ember.isEmpty(themes)) {
                themes = yield store.findAll('theme');
            }

            let activeTheme = themes.filterBy('active', true).get('firstObject');

            this.set('activeTheme', activeTheme);
        })
    });
});
define('ghost-admin/components/gh-publishmenu-draft', ['exports', 'moment'], function (exports, _moment) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({

        post: null,
        saveType: null,

        // used to set minDate in datepicker
        _minDate: null,
        _publishedAtBlogTZ: null,

        'data-test-publishmenu-draft': true,

        didInsertElement() {
            this.get('post').set('publishedAtBlogTZ', this.get('post.publishedAtUTC'));
            this.send('setSaveType', 'publish');
        },

        actions: {
            setSaveType(type) {
                if (this.get('saveType') !== type) {
                    let hasDateError = !Ember.isEmpty(this.get('post.errors').errorsFor('publishedAtBlogDate'));
                    let hasTimeError = !Ember.isEmpty(this.get('post.errors').errorsFor('publishedAtBlogTime'));
                    let minDate = this._getMinDate();

                    this.set('_minDate', minDate);
                    this.get('setSaveType')(type);

                    // when publish: switch to now to avoid validation errors
                    // when schedule: switch to last valid or new minimum scheduled date
                    if (type === 'publish') {
                        if (!hasDateError && !hasTimeError) {
                            this._publishedAtBlogTZ = this.get('post.publishedAtBlogTZ');
                        } else {
                            this._publishedAtBlogTZ = this.get('post.publishedAtUTC');
                        }

                        this.get('post').set('publishedAtBlogTZ', this.get('post.publishedAtUTC'));
                    } else {
                        if (!this._publishedAtBlogTZ || (0, _moment.default)(this._publishedAtBlogTZ).isBefore(minDate)) {
                            this.get('post').set('publishedAtBlogTZ', minDate);
                        } else {
                            this.get('post').set('publishedAtBlogTZ', this._publishedAtBlogTZ);
                        }
                    }

                    this.get('post').validate();
                }
            },

            setDate(date) {
                let post = this.get('post');
                let dateString = (0, _moment.default)(date).format('YYYY-MM-DD');

                post.set('publishedAtBlogDate', dateString);
                return post.validate();
            },

            setTime(time) {
                let post = this.get('post');

                post.set('publishedAtBlogTime', time);
                return post.validate();
            }
        },

        // API only accepts dates at least 2 mins in the future, default the
        // scheduled date 5 mins in the future to avoid immediate validation errors
        _getMinDate() {
            return _moment.default.utc().add(5, 'minutes');
        }
    });
});
define('ghost-admin/components/gh-publishmenu-published', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({

        'data-test-publishmenu-published': true,

        didInsertElement() {
            this.get('setSaveType')('publish');
        }
    });
});
define('ghost-admin/components/gh-publishmenu-scheduled', ['exports', 'moment'], function (exports, _moment) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        clock: Ember.inject.service(),

        post: null,
        saveType: null,
        isClosing: null,

        // used to set minDate in datepicker
        _minDate: null,

        'data-test-publishmenu-scheduled': true,

        timeToPublished: Ember.computed('post.publishedAtUTC', 'clock.second', function () {
            let publishedAtUTC = this.get('post.publishedAtUTC');

            if (!publishedAtUTC) {
                return null;
            }

            this.get('clock.second');

            return publishedAtUTC.toNow(true);
        }),

        didInsertElement() {
            this.set('_minDate', new Date());
            this.get('setSaveType')('schedule');
        },

        actions: {
            setSaveType(type) {
                if (this.get('saveType') !== type) {
                    this.set('_minDate', new Date());
                    this.get('setSaveType')(type);

                    // when draft switch to now to avoid validation errors
                    // when schedule switch back to saved date to avoid unnecessary re-scheduling
                    if (type === 'draft') {
                        this.get('post').set('publishedAtBlogTZ', new Date());
                    } else {
                        this.get('post').set('publishedAtBlogTZ', this.get('post.publishedAtUTC'));
                    }

                    this.get('post').validate();
                }
            },

            setDate(date) {
                let post = this.get('post');
                let dateString = (0, _moment.default)(date).format('YYYY-MM-DD');

                post.set('publishedAtBlogDate', dateString);
                return post.validate();
            },

            setTime(time) {
                let post = this.get('post');

                if (!this.get('isClosing')) {
                    post.set('publishedAtBlogTime', time);
                    return post.validate();
                }
            }
        }
    });
});
define('ghost-admin/components/gh-publishmenu', ['exports', 'ember-concurrency'], function (exports, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        clock: Ember.inject.service(),

        classNames: 'gh-publishmenu',
        displayState: 'draft',
        post: null,
        postStatus: 'draft',
        saveTask: null,
        runningText: null,

        _publishedAtBlogTZ: null,
        _previousStatus: null,

        isClosing: null,

        forcePublishedMenu: Ember.computed.reads('post.pastScheduledTime'),

        postState: Ember.computed('post.{isPublished,isScheduled}', 'forcePublishedMenu', function () {
            if (this.get('forcePublishedMenu') || this.get('post.isPublished')) {
                return 'published';
            } else if (this.get('post.isScheduled')) {
                return 'scheduled';
            } else {
                return 'draft';
            }
        }),

        triggerText: Ember.computed('postState', function () {
            let state = this.get('postState');

            if (state === 'published') {
                return 'Update';
            } else if (state === 'scheduled') {
                return 'Scheduled';
            } else {
                return 'Publish';
            }
        }),

        _runningText: Ember.computed('postState', 'saveType', function () {
            let saveType = this.get('saveType');
            let postState = this.get('postState');
            let runningText;

            if (postState === 'draft') {
                runningText = saveType === 'publish' ? 'Publishing' : 'Scheduling';
            }

            if (postState === 'published') {
                runningText = saveType === 'publish' ? 'Updating' : 'Unpublishing';
            }

            if (postState === 'scheduled') {
                runningText = saveType === 'schedule' ? 'Rescheduling' : 'Unscheduling';
            }

            return runningText || 'Publishing';
        }),

        buttonText: Ember.computed('postState', 'saveType', function () {
            let saveType = this.get('saveType');
            let postState = this.get('postState');
            let buttonText;

            if (postState === 'draft') {
                buttonText = saveType === 'publish' ? 'Publish' : 'Schedule';
            }

            if (postState === 'published') {
                buttonText = saveType === 'publish' ? 'Update' : 'Unpublish';
            }

            if (postState === 'scheduled') {
                buttonText = saveType === 'schedule' ? 'Reschedule' : 'Unschedule';
            }

            return buttonText || 'Publish';
        }),

        successText: Ember.computed('_previousStatus', 'postState', function () {
            let postState = this.get('postState');
            let previousStatus = this.get('_previousStatus');
            let buttonText;

            if (previousStatus === 'draft') {
                buttonText = postState === 'published' ? 'Published' : 'Scheduled';
            }

            if (previousStatus === 'published') {
                buttonText = postState === 'draft' ? 'Unpublished' : 'Updated';
            }

            if (previousStatus === 'scheduled') {
                buttonText = postState === 'draft' ? 'Unscheduled' : 'Rescheduled';
            }

            return buttonText;
        }),

        didReceiveAttrs() {
            this._super(...arguments);

            // update the displayState based on the post status but only after a
            // save has finished to avoid swapping the menu prematurely and triggering
            // calls to `setSaveType` due to the component re-rendering
            // TODO: we should have a better way of dealing with this where we don't
            // rely on the side-effect of component rendering calling setSaveType
            let postStatus = this.get('postStatus');
            if (postStatus !== this._postStatus) {
                if (this.get('saveTask.isRunning')) {
                    this.get('saveTask.last').then(() => {
                        this.set('displayState', postStatus);
                    });
                } else {
                    this.set('displayState', postStatus);
                }
            }

            this._postStatus = this.get('postStatus');
        },

        actions: {
            setSaveType(saveType) {
                let post = this.get('post');

                this.set('saveType', saveType);

                if (saveType === 'draft') {
                    post.set('statusScratch', 'draft');
                } else if (saveType === 'schedule') {
                    post.set('statusScratch', 'scheduled');
                } else if (saveType === 'publish') {
                    post.set('statusScratch', 'published');
                }
            },

            open() {
                this._cachePublishedAtBlogTZ();
                this.set('isClosing', false);
                this.get('post.errors').clear();
                if (this.get('onOpen')) {
                    this.get('onOpen')();
                }
            },

            close(dropdown, e) {
                let post = this.get('post');

                // don't close the menu if the datepicker popup is clicked
                if (e && Ember.$(e.target).closest('.ember-power-datepicker-content').length) {
                    return false;
                }

                // cleanup
                this._resetPublishedAtBlogTZ();
                post.set('statusScratch', null);
                post.validate();

                if (this.get('onClose')) {
                    this.get('onClose')();
                }

                this.set('isClosing', true);

                return true;
            }
        },

        save: (0, _emberConcurrency.task)(function* () {
            // runningText needs to be declared before the other states change during the
            // save action.
            this.set('runningText', this.get('_runningText'));
            this.set('_previousStatus', this.get('post.status'));
            this.get('setSaveType')(this.get('saveType'));

            try {
                // validate publishedAtBlog first to avoid an alert for displayed errors
                yield this.get('post').validate({ property: 'publishedAtBlog' });

                // actual save will show alert for other failed validations
                let post = yield this.get('saveTask').perform();

                this._cachePublishedAtBlogTZ();
                return post;
            } catch (error) {
                // re-throw if we don't have a validation error
                if (error) {
                    throw error;
                }
            }
        }),

        _cachePublishedAtBlogTZ() {
            this._publishedAtBlogTZ = this.get('post.publishedAtBlogTZ');
        },

        // when closing the menu we reset the publishedAtBlogTZ date so that the
        // unsaved changes made to the scheduled date aren't reflected in the PSM
        _resetPublishedAtBlogTZ() {
            this.get('post').set('publishedAtBlogTZ', this._publishedAtBlogTZ);
        }
    });
});
define('ghost-admin/components/gh-scheduled-post-countdown', ['exports', 'moment'], function (exports, _moment) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        clock: Ember.inject.service(),

        post: null,

        // countdown timer to show the time left until publish time for a scheduled post
        // starts 15 minutes before scheduled time
        countdown: Ember.computed('post.{publishedAtUTC,isScheduled}', 'clock.second', function () {
            let isScheduled = this.get('post.isScheduled');
            let publishTime = this.get('post.publishedAtUTC') || _moment.default.utc();
            let timeUntilPublished = publishTime.diff(_moment.default.utc(), 'minutes', true);
            let isPublishedSoon = timeUntilPublished > 0 && timeUntilPublished < 15;

            // force a recompute
            this.get('clock.second');

            if (isScheduled && isPublishedSoon) {
                return (0, _moment.default)(publishTime).fromNow();
            } else {
                return false;
            }
        })
    });
});
define('ghost-admin/components/gh-scroll-trigger', ['exports', 'ember-in-viewport'], function (exports, _emberInViewport) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend(_emberInViewport.default, {

        enter() {},
        exit() {},
        registerElement() {},

        didInsertElement() {
            let offset = this.get('triggerOffset') || {};

            // if triggerOffset is a number we use it for all dimensions
            if (typeof offset === 'number') {
                offset = {
                    top: offset,
                    bottom: offset,
                    left: offset,
                    right: offset
                };
            }

            this.set('viewportSpy', true);
            this.set('viewportTolerance', {
                top: offset.top,
                bottom: offset.bottom,
                left: offset.left,
                right: offset.right
            });

            this._super(...arguments);

            this.registerElement(this.element);
        },

        didEnterViewport() {
            return this.enter();
        },

        didExitViewport() {
            return this.exit();
        }

    });
});
define('ghost-admin/components/gh-search-input-trigger', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        actions: {
            captureMouseDown(e) {
                e.stopPropagation();
            },

            search(term) {
                // open dropdown if not open and term is present
                // close dropdown if open and term is blank
                if (Ember.isBlank(term) === this.get('select.isOpen')) {
                    Ember.isBlank(term) ? this.close() : this.open();

                    // ensure focus isn't lost when dropdown is closed
                    if (Ember.isBlank(term)) {
                        this._focusInput();
                    }
                }

                this.get('select').actions.search(term);
            },

            focusInput() {
                this._focusInput();
            },

            resetInput() {
                this.$('input').val('');
            },

            handleKeydown(e) {
                let select = this.get('select');

                // TODO: remove keycode check once EPS is updated to 1.0
                if (!select.isOpen || e.keyCode === 32) {
                    e.stopPropagation();
                }
            }
        },

        open() {
            this.get('select.actions').open();
        },

        close() {
            this.get('select.actions').close();
        },

        _focusInput() {
            this.$('input')[0].focus();
        }
    });
});
define('ghost-admin/components/gh-search-input', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.computedGroup = computedGroup;
    /* global key */
    /* eslint-disable camelcase */
    function computedGroup(category) {
        return Ember.computed('content', 'currentSearch', function () {
            if (!this.get('currentSearch') || !this.get('content')) {
                return [];
            }

            return this.get('content').filter(item => {
                let search = this.get('currentSearch').toString().toLowerCase();

                return item.category === category && item.title.toString().toLowerCase().indexOf(search) >= 0;
            });
        });
    }

    exports.default = Ember.Component.extend({
        store: Ember.inject.service('store'),
        router: Ember.inject.service('router'),
        ajax: Ember.inject.service(),
        notifications: Ember.inject.service(),

        content: null,
        contentExpiresAt: false,
        contentExpiry: 10000,
        currentSearch: '',
        isLoading: false,
        selection: null,

        posts: computedGroup('Stories'),
        pages: computedGroup('Pages'),
        users: computedGroup('Users'),
        tags: computedGroup('Tags'),

        groupedContent: Ember.computed('posts', 'pages', 'users', 'tags', function () {
            let groups = [];

            if (!Ember.isEmpty(this.get('posts'))) {
                groups.pushObject({ groupName: 'Stories', options: this.get('posts') });
            }

            if (!Ember.isEmpty(this.get('pages'))) {
                groups.pushObject({ groupName: 'Pages', options: this.get('pages') });
            }

            if (!Ember.isEmpty(this.get('users'))) {
                groups.pushObject({ groupName: 'Users', options: this.get('users') });
            }

            if (!Ember.isEmpty(this.get('tags'))) {
                groups.pushObject({ groupName: 'Tags', options: this.get('tags') });
            }

            return groups;
        }),

        init() {
            this._super(...arguments);
            this.content = [];
        },

        actions: {
            openSelected(selected) {
                if (!selected) {
                    return;
                }

                if (selected.category === 'Stories' || selected.category === 'Pages') {
                    let id = selected.id.replace('post.', '');
                    this.get('router').transitionTo('editor.edit', id);
                }

                if (selected.category === 'Users') {
                    let id = selected.id.replace('user.', '');
                    this.get('router').transitionTo('team.user', id);
                }

                if (selected.category === 'Tags') {
                    let id = selected.id.replace('tag.', '');
                    this.get('router').transitionTo('settings.tags.tag', id);
                }
            },

            onFocus() {
                this._setKeymasterScope();
            },

            onBlur() {
                this._resetKeymasterScope();
            },

            search(term) {
                return new Ember.RSVP.Promise((resolve, reject) => {
                    Ember.run.debounce(this, this._performSearch, term, resolve, reject, 200);
                });
            }
        },

        refreshContent() {
            let promises = [];
            let now = new Date();
            let contentExpiry = this.get('contentExpiry');
            let contentExpiresAt = this.get('contentExpiresAt');

            if (this.get('isLoading') || contentExpiresAt > now) {
                return Ember.RSVP.resolve();
            }

            this.set('isLoading', true);
            this.set('content', []);
            promises.pushObject(this._loadPosts());
            promises.pushObject(this._loadUsers());
            promises.pushObject(this._loadTags());

            return Ember.RSVP.all(promises).then(() => {}).finally(() => {
                this.set('isLoading', false);
                this.set('contentExpiresAt', new Date(now.getTime() + contentExpiry));
            });
        },

        _loadPosts() {
            let store = this.get('store');
            let postsUrl = `${store.adapterFor('post').urlForQuery({}, 'post')}/`;
            let postsQuery = { fields: 'id,title,page', limit: 'all', status: 'all', filter: 'page:[true,false]' };
            let content = this.get('content');

            return this.get('ajax').request(postsUrl, { data: postsQuery }).then(posts => {
                content.pushObjects(posts.posts.map(post => ({
                    id: `post.${post.id}`,
                    title: post.title,
                    category: post.page ? 'Pages' : 'Stories'
                })));
            }).catch(error => {
                this.get('notifications').showAPIError(error, { key: 'search.loadPosts.error' });
            });
        },

        _loadUsers() {
            let store = this.get('store');
            let usersUrl = `${store.adapterFor('user').urlForQuery({}, 'user')}/`;
            let usersQuery = { fields: 'name,slug', limit: 'all' };
            let content = this.get('content');

            return this.get('ajax').request(usersUrl, { data: usersQuery }).then(users => {
                content.pushObjects(users.users.map(user => ({
                    id: `user.${user.slug}`,
                    title: user.name,
                    category: 'Users'
                })));
            }).catch(error => {
                this.get('notifications').showAPIError(error, { key: 'search.loadUsers.error' });
            });
        },

        _loadTags() {
            let store = this.get('store');
            let tagsUrl = `${store.adapterFor('tag').urlForQuery({}, 'tag')}/`;
            let tagsQuery = { fields: 'name,slug', limit: 'all' };
            let content = this.get('content');

            return this.get('ajax').request(tagsUrl, { data: tagsQuery }).then(tags => {
                content.pushObjects(tags.tags.map(tag => ({
                    id: `tag.${tag.slug}`,
                    title: tag.name,
                    category: 'Tags'
                })));
            }).catch(error => {
                this.get('notifications').showAPIError(error, { key: 'search.loadTags.error' });
            });
        },

        _performSearch(term, resolve, reject) {
            if (Ember.isBlank(term)) {
                return resolve([]);
            }

            this.refreshContent().then(() => {
                this.set('currentSearch', term);

                return resolve(this.get('groupedContent'));
            }).catch(reject);
        },

        _setKeymasterScope() {
            key.setScope('search-input');
        },

        _resetKeymasterScope() {
            key.setScope('default');
        },

        willDestroy() {
            this._super(...arguments);
            this._resetKeymasterScope();
        }
    });
});
define('ghost-admin/components/gh-simplemde', ['exports', 'ghost-admin/config/environment'], function (exports, _environment) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.TextArea.extend({

        // Public attributes
        autofocus: false,
        options: null,
        value: null,
        placeholder: '',

        // Private
        _editor: null,

        // Closure actions
        onChange() {},
        onEditorInit() {},
        onEditorDestroy() {},

        // default SimpleMDE options, see docs for available config:
        // https://github.com/sparksuite/simplemde-markdown-editor#configuration
        defaultOptions: Ember.computed(function () {
            return {
                autofocus: this.get('autofocus'),
                indentWithTabs: false,
                placeholder: this.get('placeholder'),
                tabSize: 4
            };
        }),

        init() {
            this._super(...arguments);

            if (Ember.isEmpty(this.get('options'))) {
                this.set('options', {});
            }
        },

        // update the editor when the value property changes from the outside
        didReceiveAttrs() {
            this._super(...arguments);

            if (Ember.isEmpty(this._editor)) {
                return;
            }

            // compare values before forcing a content reset to avoid clobbering
            // the undo behaviour
            if (this.get('value') !== this._editor.value()) {
                let cursor = this._editor.codemirror.getDoc().getCursor();
                this._editor.value(this.get('value'));
                this._editor.codemirror.getDoc().setCursor(cursor);
            }
        },

        // instantiate the editor with the contents of value
        didInsertElement() {
            this._super(...arguments);

            let editorOptions = Ember.assign({ element: document.getElementById(this.elementId) }, this.get('defaultOptions'), this.get('options'));

            // disable spellchecker when testing so that the exterally loaded plugin
            // doesn't fail
            if (_environment.default.environment === 'test') {
                editorOptions.spellChecker = false;
            }

            this._editor = new SimpleMDE(editorOptions);
            this._editor.value(this.get('value') || '');

            this._editor.codemirror.on('change', (instance, changeObj) => {
                // avoid a "modified x twice in a single render" error that occurs
                // when the underlying value is completely swapped out
                if (changeObj.origin !== 'setValue') {
                    this.onChange(this._editor.value());
                }
            });

            this._editor.codemirror.on('focus', () => {
                this.onFocus();
            });

            this._editor.codemirror.on('blur', () => {
                this.onBlur();
            });

            if (this.get('autofocus')) {
                this._editor.codemirror.execCommand('goDocEnd');
            }

            this.onEditorInit(this._editor);
        },

        willDestroyElement() {
            this.onEditorDestroy();
            this._editor.toTextArea();
            delete this._editor;
            this._super(...arguments);
        }
    });
});
define('ghost-admin/components/gh-skip-link', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        tagName: 'a',
        anchor: '',
        classNames: ['sr-only', 'sr-only-focusable'],
        // Add attributes to component for href
        // href should be set to retain anchor properties
        // such as pointer cursor and text underline
        attributeBindings: ['href'],
        // Used so that upon clicking on the link
        // anchor behaviors or ignored
        href: Ember.String.htmlSafe('javascript:;'),

        click() {
            let anchor = this.get('anchor');
            let $el = Ember.$(anchor);

            if ($el) {
                // Scrolls to the top of main content or whatever
                // is passed to the anchor attribute
                Ember.$('body').scrollTop($el.offset().top);

                // This sets focus on the content which was skipped to
                // upon losing focus, the tabindex should be removed
                // so that normal keyboard navigation picks up from focused
                // element
                Ember.$($el).attr('tabindex', -1).on('blur focusout', function () {
                    Ember.$(this).removeAttr('tabindex');
                }).focus();
            }
        }
    });
});
define('ghost-admin/components/gh-subscribers-table', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        classNames: ['subscribers-table'],

        table: null,

        actions: {
            onScrolledToBottom() {
                let loadNextPage = this.get('loadNextPage');

                if (!this.get('isLoading')) {
                    loadNextPage();
                }
            }
        }
    });
});
define('ghost-admin/components/gh-tag-settings-form', ['exports', 'ghost-admin/utils/bound-one-way'], function (exports, _boundOneWay) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    const Handlebars = Ember.Handlebars;
    exports.default = Ember.Component.extend({
        feature: Ember.inject.service(),
        config: Ember.inject.service(),
        mediaQueries: Ember.inject.service(),

        tag: null,

        isViewingSubview: false,

        // Allowed actions
        setProperty: () => {},
        showDeleteTagModal: () => {},

        scratchName: (0, _boundOneWay.default)('tag.name'),
        scratchSlug: (0, _boundOneWay.default)('tag.slug'),
        scratchDescription: (0, _boundOneWay.default)('tag.description'),
        scratchMetaTitle: (0, _boundOneWay.default)('tag.metaTitle'),
        scratchMetaDescription: (0, _boundOneWay.default)('tag.metaDescription'),

        isMobile: Ember.computed.reads('mediaQueries.maxWidth600'),

        title: Ember.computed('tag.isNew', function () {
            if (this.get('tag.isNew')) {
                return 'New Tag';
            } else {
                return 'Tag Settings';
            }
        }),

        seoTitle: Ember.computed('scratchName', 'scratchMetaTitle', function () {
            let metaTitle = this.get('scratchMetaTitle') || '';

            metaTitle = metaTitle.length > 0 ? metaTitle : this.get('scratchName');

            if (metaTitle && metaTitle.length > 70) {
                metaTitle = metaTitle.substring(0, 70).trim();
                metaTitle = Handlebars.Utils.escapeExpression(metaTitle);
                metaTitle = Ember.String.htmlSafe(`${metaTitle}&hellip;`);
            }

            return metaTitle;
        }),

        seoURL: Ember.computed('scratchSlug', function () {
            let blogUrl = this.get('config.blogUrl');
            let seoSlug = this.get('scratchSlug') || '';

            let seoURL = `${blogUrl}/tag/${seoSlug}`;

            // only append a slash to the URL if the slug exists
            if (seoSlug) {
                seoURL += '/';
            }

            if (seoURL.length > 70) {
                seoURL = seoURL.substring(0, 70).trim();
                seoURL = Handlebars.Utils.escapeExpression(seoURL);
                seoURL = Ember.String.htmlSafe(`${seoURL}&hellip;`);
            }

            return seoURL;
        }),

        seoDescription: Ember.computed('scratchDescription', 'scratchMetaDescription', function () {
            let metaDescription = this.get('scratchMetaDescription') || '';

            metaDescription = metaDescription.length > 0 ? metaDescription : this.get('scratchDescription');

            if (metaDescription && metaDescription.length > 156) {
                metaDescription = metaDescription.substring(0, 156).trim();
                metaDescription = Handlebars.Utils.escapeExpression(metaDescription);
                metaDescription = Ember.String.htmlSafe(`${metaDescription}&hellip;`);
            }

            return metaDescription;
        }),

        didReceiveAttrs() {
            this._super(...arguments);

            let oldTagId = this._oldTagId;
            let newTagId = this.get('tag.id');

            if (newTagId !== oldTagId) {
                this.reset();
            }

            this._oldTagId = newTagId;
        },

        actions: {
            setProperty(property, value) {
                this.setProperty(property, value);
            },

            setCoverImage(image) {
                this.setProperty('featureImage', image);
            },

            clearCoverImage() {
                this.setProperty('featureImage', '');
            },

            openMeta() {
                this.set('isViewingSubview', true);
            },

            closeMeta() {
                this.set('isViewingSubview', false);
            },

            deleteTag() {
                this.showDeleteTagModal();
            }
        },

        reset() {
            this.set('isViewingSubview', false);
            if (this.$()) {
                this.$('.settings-menu-pane').scrollTop(0);
            }
        },

        focusIn() {
            key.setScope('tag-settings-form');
        },

        focusOut() {
            key.setScope('default');
        }

    });
});
define('ghost-admin/components/gh-tag', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        tagName: ''
    });
});
define('ghost-admin/components/gh-tags-management-container', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        mediaQueries: Ember.inject.service(),

        classNames: ['view-container'],
        classNameBindings: ['isMobile'],

        tags: null,
        selectedTag: null,

        isMobile: Ember.computed.reads('mediaQueries.maxWidth600'),
        isEmpty: Ember.computed.equal('tags.length', 0),

        displaySettingsPane: Ember.computed('isEmpty', 'selectedTag', 'isMobile', function () {
            let isEmpty = this.get('isEmpty');
            let selectedTag = this.get('selectedTag');
            let isMobile = this.get('isMobile');

            // always display settings pane for blank-slate on mobile
            if (isMobile && isEmpty) {
                return true;
            }

            // display list if no tag is selected on mobile
            if (isMobile && Ember.isBlank(selectedTag)) {
                return false;
            }

            // default to displaying settings pane
            return true;
        }),

        init() {
            this._super(...arguments);
            this.get('mediaQueries').on('change', this, this._fireMobileChangeActions);
        },

        willDestroyElement() {
            this._super(...arguments);
            this.get('mediaQueries').off('change', this, this._fireMobileChangeActions);
        },

        _fireMobileChangeActions(key, value) {
            if (key === 'maxWidth600') {
                let leftMobileAction = this.get('leftMobile');

                this.set('isMobile', value);

                if (!value && leftMobileAction) {
                    leftMobileAction();
                }
            }
        }
    });
});
define('ghost-admin/components/gh-task-button', ['exports', 'ember-concurrency'], function (exports, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    /**
     * Task Button works exactly like Spin button, but with one major difference:
     *
     * Instead of passing a "submitting" parameter (which is bound to the parent object),
     * you pass an ember-concurrency task. All of the "submitting" behavior is handled automatically.
     *
     * As another bonus, there's no need to handle canceling the promises when something
     * like a controller changes. Because the only task running is handled through this
     * component, all running promises will automatically be cancelled when this
     * component is removed from the DOM
     */
    const GhTaskButton = Ember.Component.extend({
        tagName: 'button',
        classNameBindings: ['isRunning:appear-disabled', 'isIdleClass', 'isRunningClass', 'isSuccessClass', 'isFailureClass'],
        attributeBindings: ['disabled', 'type', 'tabindex'],

        task: null,
        disabled: false,
        buttonText: 'Save',
        idleClass: '',
        runningClass: '',
        successText: 'Saved',
        successClass: 'gh-btn-green',
        failureText: 'Retry',
        failureClass: 'gh-btn-red',

        // Allowed actions
        action: () => {},

        isRunning: Ember.computed.reads('task.last.isRunning'),
        runningText: Ember.computed.reads('buttonText'),

        // hasRun is needed so that a newly rendered button does not show the last
        // state of the associated task
        hasRun: Ember.computed('task.performCount', function () {
            return this.get('task.performCount') > this._initialPerformCount;
        }),

        isIdleClass: Ember.computed('isIdle', function () {
            if (this.get('isIdle')) {
                return this.get('idleClass');
            }
        }),

        isRunningClass: Ember.computed('isRunning', function () {
            if (this.get('isRunning')) {
                return this.get('runningClass') || this.get('idleClass');
            }
        }),

        isSuccess: Ember.computed('hasRun', 'isRunning', 'task.last.value', function () {
            if (!this.get('hasRun') || this.get('isRunning')) {
                return false;
            }

            let value = this.get('task.last.value');
            return !Ember.isBlank(value) && value !== false;
        }),

        isSuccessClass: Ember.computed('isSuccess', function () {
            if (this.get('isSuccess')) {
                return this.get('successClass');
            }
        }),

        isFailure: Ember.computed('hasRun', 'isRunning', 'isSuccess', 'task.last.error', function () {
            if (!this.get('hasRun') || this.get('isRunning') || this.get('isSuccess')) {
                return false;
            }

            return this.get('task.last.error') !== undefined;
        }),

        isFailureClass: Ember.computed('isFailure', function () {
            if (this.get('isFailure')) {
                return this.get('failureClass');
            }
        }),

        isIdle: Ember.computed('isRunning', 'isSuccess', 'isFailure', function () {
            return !this.get('isRunning') && !this.get('isSuccess') && !this.get('isFailure');
        }),

        init() {
            this._super(...arguments);
            this._initialPerformCount = this.get('task.performCount');
        },

        click() {
            // do nothing if disabled externally
            if (this.get('disabled')) {
                return false;
            }

            let task = this.get('task');
            let taskName = this.get('task.name');
            let lastTaskName = this.get('task.last.task.name');

            // task-buttons are never disabled whilst running so that clicks when a
            // taskGroup is running don't get dropped BUT that means we need to check
            // here to avoid spamming actions from multiple clicks
            if (this.get('isRunning') && taskName === lastTaskName) {
                return;
            }

            this.action();
            task.perform();

            this.get('_restartAnimation').perform();

            // prevent the click from bubbling and triggering form actions
            return false;
        },

        // when local validation fails there's no transition from failed->running
        // so we want to restart the retry spinner animation to show something
        // has happened when the button is clicked
        _restartAnimation: (0, _emberConcurrency.task)(function* () {
            if (this.$('.retry-animated').length) {
                // eslint-disable-next-line
                let elem = this.$('.retry-animated')[0];
                elem.classList.remove('retry-animated');
                yield (0, _emberConcurrency.timeout)(10);
                elem.classList.add('retry-animated');
            }
        })
    });

    GhTaskButton.reopenClass({
        positionalParams: ['buttonText']
    });

    exports.default = GhTaskButton;
});
define('ghost-admin/components/gh-text-input', ['exports', 'ghost-admin/mixins/text-input'], function (exports, _textInput) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.TextField.extend(_textInput.default, {
        classNames: 'gh-input'
    });
});
define('ghost-admin/components/gh-textarea', ['exports', 'ghost-admin/mixins/text-input'], function (exports, _textInput) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.TextArea.extend(_textInput.default, {
        resizeDetector: Ember.inject.service(),

        classNames: 'gh-input',

        autoExpand: false,

        didReceiveAttrs() {
            this._super(...arguments);

            // trigger auto-expand any time the value changes
            if (this.get('autoExpand')) {
                Ember.run.scheduleOnce('afterRender', this, this._autoExpand);
            }
        },

        willInsertElement() {
            this._super(...arguments);

            // disable the draggable resize element that browsers add to textareas
            if (this.get('autoExpand')) {
                this.element.style.resize = 'none';
            }
        },

        didInsertElement() {
            this._super(...arguments);

            // set up resize handler on element insert so that we can autoexpand
            // when the element container changes size
            if (this.get('autoExpand')) {
                Ember.run.scheduleOnce('afterRender', this, this._setupAutoExpand);
            }

            if (this.get('didCreateTextarea')) {
                this.get('didCreateTextarea')(this.element);
            }
        },

        willDestroyElement() {
            this._teardownAutoExpand();
            this._super(...arguments);
        },

        _autoExpand() {
            let el = this.element;

            // collapse the element first so that we can shrink as well as expand
            // then set the height to match the text height
            if (el) {
                el.style.height = 0;
                el.style.height = `${el.scrollHeight}px`;
            }
        },

        _setupAutoExpand() {
            this._resizeCallback = Ember.run.bind(this, this._onResize);
            this.get('resizeDetector').setup(this.get('autoExpand'), this._resizeCallback);
            this._autoExpand();
        },

        _onResize() {
            this._autoExpand();
        },

        _teardownAutoExpand() {
            this.get('resizeDetector').teardown(this.get('autoExpand'), this._resizeCallback);
        }
    });
});
define('ghost-admin/components/gh-theme-error-li', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        tagName: '',
        error: null,
        showDetails: false,

        actions: {
            toggleDetails() {
                this.toggleProperty('showDetails');
            }
        }
    });
});
define('ghost-admin/components/gh-theme-table', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({

        themes: null,

        sortedThemes: Ember.computed('themes.@each.active', function () {
            let themes = Ember.get(this, 'themes').map(t => {
                let theme = {};
                let themePackage = Ember.get(t, 'package');

                theme.model = t;
                theme.name = Ember.get(t, 'name');
                theme.label = themePackage ? `${themePackage.name}` : theme.name;
                theme.version = themePackage ? `${themePackage.version}` : '1.0';
                theme.package = themePackage;
                theme.active = Ember.get(t, 'active');
                theme.isDeletable = !theme.active;

                return theme;
            });
            let duplicateThemes = [];

            themes.forEach(theme => {
                let duplicateLabels = themes.filterBy('label', theme.label);

                if (duplicateLabels.length > 1) {
                    duplicateThemes.pushObject(theme);
                }
            });

            duplicateThemes.forEach(theme => {
                if (theme.name !== 'casper') {
                    theme.label = `${theme.label} (${theme.name})`;
                }
            });

            // "(default)" needs to be added to casper manually as it's always
            // displayed and would mess up the duplicate checking if added earlier
            let casper = themes.findBy('name', 'casper');
            if (casper) {
                casper.label = `${casper.label} (default)`;
                casper.isDefault = true;
                casper.isDeletable = false;
            }

            // sorting manually because .sortBy('label') has a different sorting
            // algorithm to [...strings].sort()
            return themes.sort((themeA, themeB) => {
                let a = themeA.label.toLowerCase();
                let b = themeB.label.toLowerCase();

                if (a < b) {
                    return -1;
                }
                if (a > b) {
                    return 1;
                }
                return 0;
            });
        }).readOnly()

    });
});
define('ghost-admin/components/gh-timezone-select', ['exports', 'moment'], function (exports, _moment) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        clock: Ember.inject.service(),

        classNames: ['form-group', 'for-select'],

        activeTimezone: null,
        availableTimezones: null,

        // Allowed actions
        update: () => {},

        availableTimezoneNames: Ember.computed.mapBy('availableTimezones', 'name'),

        hasTimezoneOverride: Ember.computed('activeTimezone', 'availableTimezoneNames', function () {
            let activeTimezone = this.get('activeTimezone');
            let availableTimezoneNames = this.get('availableTimezoneNames');

            return !availableTimezoneNames.includes(activeTimezone);
        }),

        selectedTimezone: Ember.computed('activeTimezone', 'availableTimezones', 'hasTimezoneOverride', function () {
            let hasTimezoneOverride = this.get('hasTimezoneOverride');
            let activeTimezone = this.get('activeTimezone');
            let availableTimezones = this.get('availableTimezones');

            if (hasTimezoneOverride) {
                return { name: '', label: '' };
            }

            return availableTimezones.filterBy('name', activeTimezone).get('firstObject');
        }),

        selectableTimezones: Ember.computed('availableTimezones', 'hasTimezoneOverride', function () {
            let hasTimezoneOverride = this.get('hasTimezoneOverride');
            let availableTimezones = this.get('availableTimezones');

            if (hasTimezoneOverride) {
                return [{ name: '', label: '' }, ...availableTimezones];
            }

            return availableTimezones;
        }),

        localTime: Ember.computed('hasTimezoneOverride', 'activeTimezone', 'selectedTimezone', 'clock.second', function () {
            let hasTimezoneOverride = this.get('hasTimezoneOverride');
            let timezone = hasTimezoneOverride ? this.get('activeTimezone') : this.get('selectedTimezone.name');

            this.get('clock.second');
            return timezone ? (0, _moment.default)().tz(timezone).format('HH:mm:ss') : (0, _moment.default)().utc().format('HH:mm:ss');
        }),

        actions: {
            setTimezone(timezone) {
                this.update(timezone);
            }
        }
    });
});
define('ghost-admin/components/gh-token-input', ['exports', 'ember-power-select/utils/group-utils', 'ember-concurrency'], function (exports, _groupUtils, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    const Handlebars = Ember.Handlebars;


    const BACKSPACE = 8;
    const TAB = 9;

    exports.default = Ember.Component.extend({

        // public attrs
        allowCreation: true,
        closeOnSelect: false,
        labelField: 'name',
        matcher: _groupUtils.defaultMatcher,
        searchField: 'name',
        tagName: '',
        triggerComponent: 'gh-token-input/trigger',

        optionsWithoutSelected: Ember.computed('options.[]', 'selected.[]', function () {
            return this.get('optionsWithoutSelectedTask').perform();
        }),

        actions: {
            handleKeydown(select, event) {
                // On backspace with empty text, remove the last token but deviate
                // from default behaviour by not updating search to match last token
                if (event.keyCode === BACKSPACE && Ember.isBlank(event.target.value)) {
                    let lastSelection = select.selected[select.selected.length - 1];

                    if (lastSelection) {
                        this.get('onchange')(select.selected.slice(0, -1), select);
                        select.actions.search('');
                        select.actions.open(event);
                    }

                    // prevent default
                    return false;
                }

                // Tab should work the same as Enter if there's a highlighted option
                if (event.keyCode === TAB && !Ember.isBlank(event.target.value) && select.highlighted) {
                    if (!select.selected || select.selected.indexOf(select.highlighted) === -1) {
                        select.actions.choose(select.highlighted, event);
                        return false;
                    }
                }

                // fallback to default
                return true;
            },

            onfocus() {
                key.setScope('gh-token-input');

                if (this.get('onfocus')) {
                    this.get('onfocus')(...arguments);
                }
            },

            onblur() {
                key.setScope('default');

                if (this.get('onblur')) {
                    this.get('onblur')(...arguments);
                }
            }
        },

        optionsWithoutSelectedTask: (0, _emberConcurrency.task)(function* () {
            let options = yield this.get('options');
            let selected = yield this.get('selected');
            return options.filter(o => !selected.includes(o));
        }),

        shouldShowCreateOption(term, options) {
            if (!this.get('allowCreation')) {
                return false;
            }

            if (this.get('showCreateWhen')) {
                return this.get('showCreateWhen')(term, options);
            } else {
                return this.hideCreateOptionOnSameTerm(term, options);
            }
        },

        hideCreateOptionOnSameTerm(term, options) {
            let searchField = this.get('searchField');
            let existingOption = options.findBy(searchField, term);
            return !existingOption;
        },

        addCreateOption(term, options) {
            if (this.shouldShowCreateOption(term, options)) {
                options.unshift(this.buildSuggestionForTerm(term));
            }
        },

        searchAndSuggest(term, select) {
            return this.get('searchAndSuggestTask').perform(term, select);
        },

        searchAndSuggestTask: (0, _emberConcurrency.task)(function* (term, select) {
            let newOptions = (yield this.get('optionsWithoutSelected')).toArray();

            if (term.length === 0) {
                return newOptions;
            }

            let searchAction = this.get('search');
            if (searchAction) {
                let results = yield searchAction(term, select);

                if (results.toArray) {
                    results = results.toArray();
                }

                this.addCreateOption(term, results);
                return results;
            }

            newOptions = this.filter(Ember.A(newOptions), term);
            this.addCreateOption(term, newOptions);

            return newOptions;
        }),

        selectOrCreate(selection, select, keyboardEvent) {
            // allow tokens to be created with spaces
            if (keyboardEvent && keyboardEvent.code === 'Space') {
                select.actions.search(`${select.searchText} `);
                return;
            }

            // guard against return being pressed when nothing is selected
            if (!Ember.isArray(selection)) {
                return;
            }

            let suggestion = selection.find(option => option.__isSuggestion__);

            if (suggestion) {
                this.get('oncreate')(suggestion.__value__, select);
            } else {
                this.get('onchange')(selection, select);
            }

            // clear select search
            select.actions.search('');
        },

        filter(options, searchText) {
            let matcher;
            if (this.get('searchField')) {
                matcher = (option, text) => this.matcher(Ember.get(option, this.get('searchField')), text);
            } else {
                matcher = (option, text) => this.matcher(option, text);
            }
            return (0, _groupUtils.filterOptions)(options || [], searchText, matcher);
        },

        buildSuggestionForTerm(term) {
            return {
                __isSuggestion__: true,
                __value__: term,
                text: this.buildSuggestionLabel(term)
            };
        },

        buildSuggestionLabel(term) {
            let buildSuggestion = this.get('buildSuggestion');
            if (buildSuggestion) {
                return buildSuggestion(term);
            }
            return Ember.String.htmlSafe(`Add <strong>"${Handlebars.Utils.escapeExpression(term)}"...</strong>`);
        },

        // always select the first item in the list that isn't the "Add x" option
        defaultHighlighted(select) {
            let results = select.results;

            let option = (0, _groupUtils.advanceSelectableOption)(results, undefined, 1);

            if (results.length > 1 && option.__isSuggestion__) {
                option = (0, _groupUtils.advanceSelectableOption)(results, option, 1);
            }

            return option;
        }

    });
});
define('ghost-admin/components/gh-token-input/select-multiple', ['exports', 'ember-power-select/components/power-select-multiple'], function (exports, _powerSelectMultiple) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    const endActions = 'click.ghToken mouseup.ghToken touchend.ghToken';

    // triggering focus on the search input within ESA's onfocus event breaks the
    // drag-n-drop functionality in ember-drag-drop so we watch for events that
    // could be the start of a drag and disable the default focus behaviour until
    // we get another event signalling the end of a drag

    exports.default = _powerSelectMultiple.default.extend({

        _canFocus: true,

        willDestroyElement() {
            this._super(...arguments);

            if (this._allowFocusListener) {
                Ember.$(window).off(endActions, this._allowFocusListener);
            }
        },

        actions: {
            optionMouseDown(event) {
                if (event.which === 1 && !event.ctrlKey) {
                    this._denyFocus(event);
                }
            },

            optionTouchStart(event) {
                this._denyFocus(event);
            },

            handleFocus() {
                if (this._canFocus) {
                    this._super(...arguments);
                }
            }
        },

        _denyFocus() {
            if (this._canFocus) {
                this._canFocus = false;

                this._allowFocusListener = Ember.run.bind(this, this._allowFocus);

                Ember.$(window).on(endActions, this._allowFocusListener);
            }
        },

        _allowFocus() {
            this._canFocus = true;

            Ember.$(window).off(endActions, this._allowFocusListener);
            this._allowFocusListener = null;
        }
    });
});
define('ghost-admin/components/gh-token-input/select', ['exports', 'ember-power-select/components/power-select'], function (exports, _powerSelect) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _powerSelect.default.extend({});
});
define('ghost-admin/components/gh-token-input/suggested-option', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        tagName: ''
    });
});
define('ghost-admin/components/gh-token-input/tag-token', ['exports', 'ember-drag-drop/components/draggable-object'], function (exports, _draggableObject) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _draggableObject.default.extend({

        attributeBindings: ['title'],
        classNames: ['tag-token'],
        classNameBindings: ['internal:tag-token--internal'],

        internal: Ember.computed.readOnly('content.isInternal'),

        primary: Ember.computed('idx', 'internal', function () {
            return !this.get('internal') && this.get('idx') === 0;
        }),

        title: Ember.computed('internal', function () {
            if (this.get('internal')) {
                return `Internal tag`;
            }
        })

    });
});
define('ghost-admin/components/gh-token-input/trigger', ['exports', 'ember-power-select/components/power-select-multiple/trigger'], function (exports, _trigger) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _trigger.default.extend({

        actions: {
            chooseOption(option) {
                this.get('select').actions.choose(option);
            },

            handleOptionMouseDown(event) {
                if (!event.target.closest('[data-selected-index]')) {
                    let action = this.get('extra.optionMouseDown');
                    if (action) {
                        return action(event);
                    }
                }
            },

            handleOptionTouchStart(event) {
                let action = this.get('extra.optionTouchStart');
                if (action) {
                    return action(event);
                }
            },

            reorderItems() {
                // ember-drag-drop's sortable-objects has two-way bindings and will
                // update EPS' selected value directly. We have to create a copy
                // after sorting in order to force the onchange action to be triggered
                this.get('select').actions.select(Ember.copy(this.get('select.selected')));
            },

            // copied directly from EPS, the default behaviour of stopping propagation
            // of keydown events prevents our shortcuts from being triggered
            onKeydown(e) {
                var _getProperties = this.getProperties('onKeydown', 'select');

                let onKeydown = _getProperties.onKeydown,
                    select = _getProperties.select;

                if (onKeydown && onKeydown(e) === false) {
                    e.stopPropagation();
                    return false;
                }
                if (e.keyCode === 8) {
                    e.stopPropagation();
                    if (Ember.isBlank(e.target.value)) {
                        let lastSelection = select.selected[select.selected.length - 1];
                        if (lastSelection) {
                            select.actions.select(this.get('buildSelection')(lastSelection, select), e);
                            if (typeof lastSelection === 'string') {
                                select.actions.search(lastSelection);
                            } else {
                                let searchField = this.get('searchField');
                                (true && !(searchField) && Ember.assert('`{{power-select-multiple}}` requires a `searchField` when the options are not strings to remove options using backspace', searchField));

                                select.actions.search(Ember.get(lastSelection, searchField));
                            }
                            select.actions.open(e);
                        }
                    }
                }
                // Disable the propagation cancellation so that our shortcuts still work
                // } else if (e.keyCode >= 48 && e.keyCode <= 90 || e.keyCode === 32) { // Keys 0-9, a-z or SPACE
                //     e.stopPropagation();
                // }
            }
        }
    });
});
define('ghost-admin/components/gh-tour-item', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    let instancesCounter = 0;

    let triangleClassPositions = {
        'top-left': {
            attachment: 'top left',
            targetAttachment: 'bottom center',
            offset: '0 28px'
        },
        top: {
            attachment: 'top center',
            targetAttachment: 'bottom center'
        },
        'top-right': {
            attachment: 'top right',
            targetAttachment: 'bottom center',
            offset: '0 -28px'
        },
        'right-top': {
            attachment: 'top right',
            targetAttachment: 'middle left',
            offset: '28px 0'
        },
        right: {
            attachment: 'middle right',
            targetAttachment: 'middle left'
        },
        'right-bottom': {
            attachment: 'bottom right',
            targetAttachment: 'middle left',
            offset: '-28px 0'
        },
        'bottom-right': {
            attachment: 'bottom right',
            targetAttachment: 'top center',
            offset: '0 -28px'
        },
        bottom: {
            attachment: 'bottom center',
            targetAttachment: 'top center'
        },
        'bottom-left': {
            attachment: 'bottom left',
            targetAttachment: 'top center',
            offset: '0 28px'
        },
        'left-bottom': {
            attachment: 'bottom left',
            targetAttachment: 'middle right',
            offset: '-28px 0'
        },
        left: {
            attachment: 'middle left',
            targetAttachment: 'middle right'
        },
        'left-top': {
            attachment: 'top left',
            targetAttachment: 'middle right',
            offset: '28px 0'
        }
    };

    const GhTourItemComponent = Ember.Component.extend({

        mediaQueries: Ember.inject.service(),
        tour: Ember.inject.service(),

        tagName: '',

        throbberId: null,
        target: null,
        throbberAttachment: 'middle center',
        popoverTriangleClass: 'top',
        isOpen: false,

        _elementId: null,
        _throbber: null,
        _throbberElementId: null,
        _throbberElementSelector: null,
        _popoverAttachment: null,
        _popoverTargetAttachment: null,
        _popoverOffset: null,

        isMobile: Ember.computed.reads('mediaQueries.isMobile'),
        isVisible: Ember.computed('isMobile', '_throbber', function () {
            let isMobile = this.get('isMobile');
            let hasThrobber = !Ember.isBlank(this.get('_throbber'));

            return !isMobile && hasThrobber;
        }),

        init() {
            this._super(...arguments);
            // this is a tagless component so we need to generate our own elementId
            this._elementId = instancesCounter += 1;
            this._throbberElementId = `throbber-${this._elementId}`;
            this._throbberElementSelector = `#throbber-${this._elementId}`;

            this._handleOptOut = Ember.run.bind(this, this._remove);
            this._handleViewed = Ember.run.bind(this, this._removeIfViewed);

            this.get('tour').on('optOut', this._handleOptOut);
            this.get('tour').on('viewed', this._handleViewed);
        },

        didReceiveAttrs() {
            let throbberId = this.get('throbberId');
            let throbber = this.get('tour').activeThrobber(throbberId);
            let triangleClass = this.get('popoverTriangleClass');
            let popoverPositions = triangleClassPositions[triangleClass];

            this._throbber = throbber;
            this._popoverAttachment = popoverPositions.attachment;
            this._popoverTargetAttachment = popoverPositions.targetAttachment;
            this._popoverOffset = popoverPositions.offset;
        },

        willDestroyElement() {
            this.get('tour').off('optOut', this._handleOptOut);
            this.get('tour').off('viewed', this._handleViewed);
            this._super(...arguments);
        },

        actions: {
            open() {
                this.set('isOpen', true);
            },

            close() {
                this._close();
            },

            markAsViewed() {
                let throbberId = this.get('throbberId');
                this.get('tour').markThrobberAsViewed(throbberId);
                this.set('_throbber', null);
                this._close();
            },

            optOut() {
                this.get('tour').optOut();
                this.set('_throbber', null);
                this._close();
            }
        },

        _removeIfViewed(id) {
            if (id === this.get('throbberId')) {
                this._remove();
            }
        },

        _remove() {
            this.set('_throbber', null);
        },

        _close() {
            this.set('isOpen', false);
        }
    });

    GhTourItemComponent.reopenClass({
        positionalParams: ['throbberId']
    });

    exports.default = GhTourItemComponent;
});
define('ghost-admin/components/gh-trim-focus-input', ['exports', 'ghost-admin/components/gh-text-input'], function (exports, _ghTextInput) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    /**
     * This doesn't override the OneWayInput component because
     * we need finer control. It borrows
     * parts from both the OneWayInput component and Ember's default
     * input component
     */
    const TrimFocusInputComponent = _ghTextInput.default.extend({

        shouldFocus: true,

        focusOut(event) {
            this._trimInput(event.target.value, event);
            this._super(...arguments);
        },

        _trimInput(value, event) {
            if (value && typeof value.trim === 'function') {
                value = value.trim();
            }

            this.element.value = value;
            this._elementValueDidChange(event);

            let inputMethod = this.get('input');
            if (inputMethod) {
                inputMethod(event);
            }
        }
    });

    exports.default = TrimFocusInputComponent;
});
define('ghost-admin/components/gh-unsplash-photo', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({

        height: 0,
        photo: null,
        tagName: '',
        width: 1200,
        zoomed: false,

        // closure actions
        select() {},
        zoom() {},

        style: Ember.computed('zoomed', function () {
            if (this.zoomed) {
                return Ember.String.htmlSafe('width: auto; margin: 0;');
            }
        }),

        // avoid "binding style attributes" warnings
        containerStyle: Ember.computed('photo.color', 'zoomed', function () {
            let styles = [];
            let ratio = this.get('photo.ratio');
            let zoomed = this.get('zoomed');

            styles.push(`background-color: ${this.get('photo.color')}`);

            if (zoomed) {
                styles.push(`cursor: zoom-out`);
            } else {
                styles.push(`padding-bottom: ${ratio * 100}%`);
            }

            return Ember.String.htmlSafe(styles.join('; '));
        }),

        imageUrl: Ember.computed('photo.urls.regular', function () {
            let url = this.get('photo.urls.regular');

            url = url.replace(/&w=1080/, '&w=1200');

            return url;
        }),

        didReceiveAttrs() {
            this._super(...arguments);

            this.set('height', this.width * this.photo.ratio);

            if (this.zoomed && !this._zoomed) {
                this._setZoomedSize();
            }
            this._zoomed = this.zoomed;

            if (this.zoomed && !this._resizeHandler) {
                this._setupResizeHandler();
            } else if (!this.zoomed && this._resizeHandler) {
                this._teardownResizeHandler();
            }
        },

        didInsertElement() {
            this._super(...arguments);
            this._hasRendered = true;
            if (this.zoomed) {
                this._setZoomedSize();
            }
        },

        willDestroyElement() {
            this._super(...arguments);
            this._teardownResizeHandler();
        },

        actions: {
            select(event) {
                event.preventDefault();
                event.stopPropagation();
                this.select(this.get('photo'));
            },

            zoom(event) {
                let $target = Ember.$(event.target);

                // only zoom when it wasn't one of the child links clicked
                if (!$target.is('a') && $target.closest('a').hasClass('gh-unsplash-photo')) {
                    event.preventDefault();
                    this.zoom(this.get('photo'));
                }

                // don't propagate otherwise we can trigger the closeZoom action on the overlay
                event.stopPropagation();
            }
        },

        _setZoomedSize() {
            if (!this._hasRendered) {
                return false;
            }

            let a = document.querySelector(`[data-unsplash-zoomed-photo="${this.photo.id}"]`);

            a.style.width = '100%';
            a.style.height = '100%';

            let offsets = a.getBoundingClientRect();
            let ratio = this.photo.ratio;

            let maxHeight = {
                width: offsets.height / ratio,
                height: offsets.height
            };

            let maxWidth = {
                width: offsets.width,
                height: offsets.width * ratio
            };

            let usableSize = null;

            if (ratio <= 1) {
                usableSize = maxWidth.height > offsets.height ? maxHeight : maxWidth;
            } else {
                usableSize = maxHeight.width > offsets.width ? maxWidth : maxHeight;
            }

            a.style.width = `${usableSize.width}px`;
            a.style.height = `${usableSize.height}px`;
        },

        _setupResizeHandler() {
            if (this._resizeHandler) {
                return;
            }

            this._resizeHandler = Ember.run.bind(this, this._handleResize);
            window.addEventListener('resize', this._resizeHandler);
        },

        _teardownResizeHandler() {
            window.removeEventListener('resize', this._resizeHandler);
            this._resizeHandler = null;
        },

        _handleResize() {
            this._throttleResize = Ember.run.throttle(this, this._setZoomedSize, 100);
        }

    });
});
define('ghost-admin/components/gh-unsplash', ['exports', 'ghost-admin/mixins/shortcuts'], function (exports, _shortcuts) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    /* global key */
    const ONE_COLUMN_WIDTH = 540;
    const TWO_COLUMN_WIDTH = 940;

    exports.default = Ember.Component.extend(_shortcuts.default, {
        resizeDetector: Ember.inject.service(),
        unsplash: Ember.inject.service(),
        ui: Ember.inject.service(),

        shortcuts: null,
        tagName: '',
        zoomedPhoto: null,
        searchTerm: null,

        // closure actions
        close() {},
        select() {},

        sideNavHidden: Ember.computed.or('ui.{autoNav,isFullScreen,showMobileMenu}'),

        init() {
            this._super(...arguments);

            this.shortcuts = {
                escape: { action: 'handleEscape', scope: 'all' }
            };
        },

        didReceiveAttrs() {
            this._super(...arguments);

            if (this.searchTerm !== this._searchTerm) {
                this.unsplash.updateSearch(this.searchTerm);
            }

            this._searchTerm = this.searchTerm;
        },

        didInsertElement() {
            this._super(...arguments);
            this._resizeCallback = Ember.run.bind(this, this._handleResize);
            this.get('resizeDetector').setup('[data-unsplash]', this._resizeCallback);
            this.registerShortcuts();
        },

        willDestroyElement() {
            this.get('resizeDetector').teardown('[data-unsplash]', this._resizeCallback);
            this.removeShortcuts();
            this.send('resetKeyScope');
            this._super(...arguments);
        },

        actions: {
            loadNextPage() {
                this.get('unsplash').loadNextPage();
            },

            search(term) {
                this.unsplash.updateSearch(term);
                this.send('closeZoom');
            },

            zoomPhoto(photo) {
                this.set('zoomedPhoto', photo);
            },

            closeZoom() {
                this.set('zoomedPhoto', null);
            },

            select(photo) {
                this.get('unsplash').triggerDownload(photo);

                let selectParams = {
                    src: photo.urls.regular,
                    alt: photo.description || '',
                    caption: `Photo by <a href="${photo.user.links.html}?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit">${photo.user.name}</a> / <a href="https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit">Unsplash</a>`
                };
                this.select(selectParams);

                this.close();
            },

            close() {
                this.close();
            },

            retry() {
                this.get('unsplash').retryLastRequest();
            },

            setKeyScope() {
                key.setScope('unsplash');
            },

            resetKeyScope() {
                key.setScope('default');
            },

            handleEscape() {
                if (this.get('zoomedPhoto')) {
                    return this.send('closeZoom');
                }

                this.close();
            }
        },

        _handleResize(element) {
            let width = element.clientWidth;
            let columns = 3;

            if (width <= ONE_COLUMN_WIDTH) {
                columns = 1;
            } else if (width <= TWO_COLUMN_WIDTH) {
                columns = 2;
            }

            this.get('unsplash').changeColumnCount(columns);
        }
    });
});
define('ghost-admin/components/gh-uploader', ['exports', 'ghost-admin/utils/ghost-paths', 'ember-concurrency'], function (exports, _ghostPaths, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    // TODO: this is designed to be a more re-usable/composable upload component, it
    // should be able to replace the duplicated upload logic in:
    // - gh-image-uploader
    // - gh-file-uploader
    //
    // In order to support the above components we'll need to introduce an
    // "allowMultiple" attribute so that single-image uploads don't allow multiple
    // simultaneous uploads

    const MAX_SIMULTANEOUS_UPLOADS = 2;

    /**
     * Result from a file upload
     * @typedef {Object} UploadResult
     * @property {string} fileName - file name, eg "my-image.png"
     * @property {string} url - url relative to Ghost root,eg "/content/images/2017/05/my-image.png"
     */

    const UploadTracker = Ember.Object.extend({
        file: null,
        total: 0,
        loaded: 0,

        init() {
            this._super(...arguments);
            this.total = this.file && this.file.size || 0;
        },

        update({ loaded, total }) {
            this.total = total;
            this.loaded = loaded;
        }
    });

    exports.default = Ember.Component.extend({
        ajax: Ember.inject.service(),

        tagName: '',

        // Public attributes
        accept: '',
        extensions: '',
        files: null,
        paramName: 'uploadimage', // TODO: is this the best default?
        uploadUrl: null,

        // Interal attributes
        errors: null, // [{fileName: 'x', message: 'y'}, ...]
        totalSize: 0,
        uploadedSize: 0,
        uploadPercentage: 0,
        uploadUrls: null, // [{filename: 'x', url: 'y'}],

        // Private
        _defaultUploadUrl: '/uploads/',
        _files: null,
        _uploadTrackers: null,

        // Closure actions
        onCancel() {},
        onComplete() {},
        onFailed() {},
        onStart() {},
        onUploadStart() {},
        onUploadFailure() {},
        onUploadSuccess() {},

        // Optional closure actions
        // validate(file) {}

        init() {
            this._super(...arguments);
            this.set('errors', []);
            this.set('uploadUrls', []);
            this._uploadTrackers = [];
        },

        didReceiveAttrs() {
            this._super(...arguments);

            // set up any defaults
            if (!this.get('uploadUrl')) {
                this.set('uploadUrl', this._defaultUploadUrl);
            }

            // if we have new files, validate and start an upload
            let files = this.get('files');
            this._setFiles(files);
        },

        actions: {
            setFiles(files, resetInput) {
                this._setFiles(files);

                if (resetInput) {
                    resetInput();
                }
            },

            cancel() {
                this._reset();
                this.onCancel();
            }
        },

        _setFiles(files) {
            this.set('files', files);

            if (files && files !== this._files) {
                if (this.get('_uploadFiles.isRunning')) {
                    // eslint-disable-next-line
                    console.error('Adding new files whilst an upload is in progress is not supported.');
                }

                this._files = files;

                // we cancel early if any file fails client-side validation
                if (this._validate()) {
                    this.get('_uploadFiles').perform(files);
                }
            }
        },

        _validate() {
            let files = this.get('files');
            let validate = this.get('validate') || this._defaultValidator.bind(this);
            let ok = [];
            let errors = [];

            // NOTE: for...of loop results in a transpilation that errors in Edge,
            // once we drop IE11 support we should be able to use native for...of
            for (let i = 0; i < files.length; i += 1) {
                let file = files[i];
                let result = validate(file);
                if (result === true) {
                    ok.push(file);
                } else {
                    errors.push({ fileName: file.name, message: result });
                }
            }

            if (Ember.isEmpty(errors)) {
                return true;
            }

            this.set('errors', errors);
            this.onFailed(errors);
            return false;
        },

        // we only check the file extension by default because IE doesn't always
        // expose the mime-type, we'll rely on the API for final validation
        _defaultValidator(file) {
            let extensions = this.get('extensions');

            var _$exec = /(?:\.([^.]+))?$/.exec(file.name),
                _$exec2 = _slicedToArray(_$exec, 2);

            let extension = _$exec2[1];

            // if extensions is falsy exit early and accept all files

            if (!extensions) {
                return true;
            }

            if (!Ember.isArray(extensions)) {
                extensions = extensions.split(',');
            }

            if (!extension || extensions.indexOf(extension.toLowerCase()) === -1) {
                let validExtensions = `.${extensions.join(', .').toUpperCase()}`;
                return `The image type you uploaded is not supported. Please use ${validExtensions}`;
            }

            return true;
        },

        _uploadFiles: (0, _emberConcurrency.task)(function* (files) {
            let uploads = [];

            this._reset();
            this.onStart(files);

            // NOTE: for...of loop results in a transpilation that errors in Edge,
            // once we drop IE11 support we should be able to use native for...of
            for (let i = 0; i < files.length; i += 1) {
                let file = files[i];
                let tracker = new UploadTracker({ file });

                this.get('_uploadTrackers').pushObject(tracker);
                uploads.push(this.get('_uploadFile').perform(tracker, file, i));
            }

            // populates this.errors and this.uploadUrls
            yield (0, _emberConcurrency.all)(uploads);

            if (!Ember.isEmpty(this.get('errors'))) {
                this.onFailed(this.get('errors'));
            }

            this.onComplete(this.get('uploadUrls'));
        }).drop(),

        // eslint-disable-next-line ghost/ember/order-in-components
        _uploadFile: (0, _emberConcurrency.task)(function* (tracker, file, index) {
            let ajax = this.get('ajax');
            let formData = this._getFormData(file);
            let url = `${(0, _ghostPaths.default)().apiRoot}${this.get('uploadUrl')}`;

            try {
                this.onUploadStart(file);

                let response = yield ajax.post(url, {
                    data: formData,
                    processData: false,
                    contentType: false,
                    dataType: 'text',
                    xhr: () => {
                        let xhr = new window.XMLHttpRequest();

                        xhr.upload.addEventListener('progress', event => {
                            Ember.run(() => {
                                tracker.update(event);
                                this._updateProgress();
                            });
                        }, false);

                        return xhr;
                    }
                });

                // force tracker progress to 100% in case we didn't get a final event,
                // eg. when using mirage
                tracker.update({ loaded: file.size, total: file.size });
                this._updateProgress();

                // TODO: is it safe to assume we'll only get a url back?
                let uploadUrl = JSON.parse(response);
                let result = {
                    fileName: file.name,
                    url: uploadUrl
                };

                this.get('uploadUrls')[index] = result;
                this.onUploadSuccess(result);

                return true;
            } catch (error) {
                // grab custom error message if present
                let message = error.payload.errors && error.payload.errors[0].message;

                // fall back to EmberData/ember-ajax default message for error type
                if (!message) {
                    message = error.message;
                }

                let result = {
                    message,
                    fileName: file.name
                };

                // TODO: check for or expose known error types?
                this.get('errors').pushObject(result);
                this.onUploadFailure(result);
            }
        }).maxConcurrency(MAX_SIMULTANEOUS_UPLOADS).enqueue(),

        // NOTE: this is necessary because the API doesn't accept direct file uploads
        _getFormData(file) {
            let formData = new FormData();
            formData.append(this.get('paramName'), file, file.name);
            return formData;
        },

        // TODO: this was needed because using CPs directly resulted in infrequent updates
        // - I think this was because updates were being wrapped up to save
        // computation but that hypothesis needs testing
        _updateProgress() {
            let trackers = this._uploadTrackers;
            let totalSize = trackers.reduce((total, tracker) => total + tracker.get('total'), 0);
            let uploadedSize = trackers.reduce((total, tracker) => total + tracker.get('loaded'), 0);

            this.set('totalSize', totalSize);
            this.set('uploadedSize', uploadedSize);

            if (totalSize === 0 || uploadedSize === 0) {
                return;
            }

            let uploadPercentage = Math.round(uploadedSize / totalSize * 100);
            this.set('uploadPercentage', uploadPercentage);
        },

        _reset() {
            this.set('errors', []);
            this.set('totalSize', 0);
            this.set('uploadedSize', 0);
            this.set('uploadPercentage', 0);
            this.set('uploadUrls', []);
            this._uploadTrackers = [];
        }
    });
});
define('ghost-admin/components/gh-url-preview', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        config: Ember.inject.service(),

        classNames: 'ghost-url-preview',
        prefix: null,
        slug: null,

        url: Ember.computed('slug', function () {
            // Get the blog URL and strip the scheme
            let blogUrl = this.get('config.blogUrl');
            // Remove `http[s]://`
            let noSchemeBlogUrl = blogUrl.substr(blogUrl.indexOf('://') + 3);

            // Get the prefix and slug values
            let prefix = this.get('prefix') ? `${this.get('prefix')}/` : '';
            let slug = this.get('slug') ? `${this.get('slug')}/` : '';

            // Join parts of the URL together with slashes
            let theUrl = `${noSchemeBlogUrl}/${prefix}${slug}`;

            return theUrl;
        })
    });
});
define('ghost-admin/components/gh-user-active', ['exports', 'moment'], function (exports, _moment) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        tagName: '',

        user: null,

        lastLoginUTC: Ember.computed('user.lastLoginUTC', function () {
            let lastLoginUTC = this.get('user.lastLoginUTC');

            return lastLoginUTC ? (0, _moment.default)(lastLoginUTC).fromNow() : '(Never)';
        })
    });
});
define('ghost-admin/components/gh-user-invited', ['exports', 'moment', 'ember-ajax/errors'], function (exports, _moment, _errors) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        notifications: Ember.inject.service(),
        store: Ember.inject.service(),

        tagName: '',

        invite: null,
        isSending: false,

        createdAt: Ember.computed('invite.createdAtUTC', function () {
            let createdAtUTC = this.get('invite.createdAtUTC');

            return createdAtUTC ? (0, _moment.default)(createdAtUTC).fromNow() : '';
        }),

        expiresAt: Ember.computed('invite.expires', function () {
            let expires = this.get('invite.expires');

            return expires ? (0, _moment.default)(expires).fromNow() : '';
        }),

        isExpired: Ember.computed('invite.expires', function () {
            let expires = this.get('invite.expires');
            let now = new Date().valueOf();

            return expires < now;
        }),

        actions: {
            resend() {
                let invite = this.get('invite');
                let notifications = this.get('notifications');

                this.set('isSending', true);
                invite.resend().then(result => {
                    let notificationText = `Invitation resent! (${invite.get('email')})`;

                    // the server deletes the old record and creates a new one when
                    // resending so we need to update the store accordingly
                    invite.unloadRecord();
                    this.get('store').pushPayload('invite', result);

                    // If sending the invitation email fails, the API will still return a status of 201
                    // but the invite's status in the response object will be 'invited-pending'.
                    if (result.invites[0].status === 'invited-pending') {
                        notifications.showAlert('Invitation email was not sent.  Please try resending.', { type: 'error', key: 'invite.resend.not-sent' });
                    } else {
                        notifications.showNotification(notificationText, { key: 'invite.resend.success' });
                    }
                }).catch(error => {
                    notifications.showAPIError(error, { key: 'invite.resend' });
                }).finally(() => {
                    this.set('isSending', false);
                });
            },

            revoke() {
                let invite = this.get('invite');
                let email = invite.get('email');
                let notifications = this.get('notifications');

                // reload the invite to get the most up-to-date information
                invite.reload().then(() => {
                    invite.destroyRecord().then(() => {
                        let notificationText = `Invitation revoked. (${email})`;
                        notifications.showNotification(notificationText, { key: 'invite.revoke.success' });
                    }).catch(error => {
                        notifications.showAPIError(error, { key: 'invite.revoke' });
                    });
                }).catch(error => {
                    if ((0, _errors.isNotFoundError)(error)) {
                        // if the invite no longer exists, then show a warning and reload the route
                        let action = this.get('reload');
                        if (action) {
                            action();
                        }

                        notifications.showAlert('This invite has been revoked or a user has already accepted the invitation.', { type: 'error', delayed: true, key: 'invite.revoke.already-accepted' });
                    } else {
                        throw error;
                    }
                });
            }
        }
    });
});
define('ghost-admin/components/gh-user-list-item', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        tagName: ''
    });
});
define('ghost-admin/components/gh-validation-status-container', ['exports', 'ghost-admin/mixins/validation-state'], function (exports, _validationState) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend(_validationState.default, {
        classNameBindings: ['errorClass'],

        errorClass: Ember.computed('property', 'hasError', 'hasValidated.[]', function () {
            let hasValidated = this.get('hasValidated');
            let property = this.get('property');

            if (hasValidated && hasValidated.includes(property)) {
                return this.get('hasError') ? 'error' : 'success';
            } else {
                return '';
            }
        })
    });
});
define('ghost-admin/components/gh-view-title', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        ui: Ember.inject.service(),

        tagName: 'h2',
        classNames: ['view-title']
    });
});
define("ghost-admin/components/illiquid-model", ["exports", "liquid-fire/components/illiquid-model"], function (exports, _illiquidModel) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _illiquidModel.default;
    }
  });
});
define('ghost-admin/components/infinity-loader', ['exports', 'ember-infinity/components/infinity-loader'], function (exports, _infinityLoader) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _infinityLoader.default;
});
define('ghost-admin/components/koenig-basic-html-input', ['exports', 'koenig-editor/components/koenig-basic-html-input'], function (exports, _koenigBasicHtmlInput) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _koenigBasicHtmlInput.default;
    }
  });
});
define('ghost-admin/components/koenig-caption-input', ['exports', 'koenig-editor/components/koenig-caption-input'], function (exports, _koenigCaptionInput) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _koenigCaptionInput.default;
    }
  });
});
define('ghost-admin/components/koenig-card-code', ['exports', 'koenig-editor/components/koenig-card-code'], function (exports, _koenigCardCode) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _koenigCardCode.default;
    }
  });
});
define('ghost-admin/components/koenig-card-embed', ['exports', 'koenig-editor/components/koenig-card-embed'], function (exports, _koenigCardEmbed) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _koenigCardEmbed.default;
    }
  });
});
define('ghost-admin/components/koenig-card-gallery', ['exports', 'koenig-editor/components/koenig-card-gallery'], function (exports, _koenigCardGallery) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _koenigCardGallery.default;
    }
  });
});
define('ghost-admin/components/koenig-card-hr', ['exports', 'koenig-editor/components/koenig-card-hr'], function (exports, _koenigCardHr) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _koenigCardHr.default;
    }
  });
});
define('ghost-admin/components/koenig-card-html', ['exports', 'koenig-editor/components/koenig-card-html'], function (exports, _koenigCardHtml) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _koenigCardHtml.default;
    }
  });
});
define('ghost-admin/components/koenig-card-image', ['exports', 'koenig-editor/components/koenig-card-image'], function (exports, _koenigCardImage) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _koenigCardImage.default;
    }
  });
});
define('ghost-admin/components/koenig-card-markdown', ['exports', 'koenig-editor/components/koenig-card-markdown'], function (exports, _koenigCardMarkdown) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _koenigCardMarkdown.default;
    }
  });
});
define('ghost-admin/components/koenig-card', ['exports', 'koenig-editor/components/koenig-card'], function (exports, _koenigCard) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _koenigCard.default;
    }
  });
});
define('ghost-admin/components/koenig-editor', ['exports', 'koenig-editor/components/koenig-editor'], function (exports, _koenigEditor) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _koenigEditor.default;
    }
  });
});
define('ghost-admin/components/koenig-link-input', ['exports', 'koenig-editor/components/koenig-link-input'], function (exports, _koenigLinkInput) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _koenigLinkInput.default;
    }
  });
});
define('ghost-admin/components/koenig-link-toolbar', ['exports', 'koenig-editor/components/koenig-link-toolbar'], function (exports, _koenigLinkToolbar) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _koenigLinkToolbar.default;
    }
  });
});
define('ghost-admin/components/koenig-menu-content', ['exports', 'koenig-editor/components/koenig-menu-content'], function (exports, _koenigMenuContent) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _koenigMenuContent.default;
    }
  });
});
define('ghost-admin/components/koenig-plus-menu', ['exports', 'koenig-editor/components/koenig-plus-menu'], function (exports, _koenigPlusMenu) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _koenigPlusMenu.default;
    }
  });
});
define('ghost-admin/components/koenig-slash-menu', ['exports', 'koenig-editor/components/koenig-slash-menu'], function (exports, _koenigSlashMenu) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _koenigSlashMenu.default;
    }
  });
});
define('ghost-admin/components/koenig-toolbar', ['exports', 'koenig-editor/components/koenig-toolbar'], function (exports, _koenigToolbar) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _koenigToolbar.default;
    }
  });
});
define('ghost-admin/components/light-table', ['exports', 'ember-light-table/components/light-table'], function (exports, _lightTable) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _lightTable.default;
    }
  });
});
define('ghost-admin/components/light-table/cells/base', ['exports', 'ember-light-table/components/cells/base'], function (exports, _base) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _base.default;
    }
  });
});
define('ghost-admin/components/light-table/columns/base', ['exports', 'ember-light-table/components/columns/base'], function (exports, _base) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _base.default;
    }
  });
});
define('ghost-admin/components/liquid-append', ['exports', 'liquid-wormhole/components/liquid-append'], function (exports, _liquidAppend) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _liquidAppend.default;
    }
  });
});
define("ghost-admin/components/liquid-bind", ["exports", "liquid-fire/components/liquid-bind"], function (exports, _liquidBind) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidBind.default;
    }
  });
});
define("ghost-admin/components/liquid-child", ["exports", "liquid-fire/components/liquid-child"], function (exports, _liquidChild) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidChild.default;
    }
  });
});
define("ghost-admin/components/liquid-container", ["exports", "liquid-fire/components/liquid-container"], function (exports, _liquidContainer) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidContainer.default;
    }
  });
});
define('ghost-admin/components/liquid-destination', ['exports', 'liquid-wormhole/components/liquid-destination'], function (exports, _liquidDestination) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _liquidDestination.default;
    }
  });
});
define("ghost-admin/components/liquid-if", ["exports", "liquid-fire/components/liquid-if"], function (exports, _liquidIf) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidIf.default;
    }
  });
});
define("ghost-admin/components/liquid-measured", ["exports", "liquid-fire/components/liquid-measured"], function (exports, _liquidMeasured) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidMeasured.default;
    }
  });
  Object.defineProperty(exports, "measure", {
    enumerable: true,
    get: function () {
      return _liquidMeasured.measure;
    }
  });
});
define("ghost-admin/components/liquid-outlet", ["exports", "liquid-fire/components/liquid-outlet"], function (exports, _liquidOutlet) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidOutlet.default;
    }
  });
});
define("ghost-admin/components/liquid-spacer", ["exports", "liquid-fire/components/liquid-spacer"], function (exports, _liquidSpacer) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidSpacer.default;
    }
  });
});
define('ghost-admin/components/liquid-sync', ['exports', 'liquid-fire/components/liquid-sync'], function (exports, _liquidSync) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _liquidSync.default;
    }
  });
});
define('ghost-admin/components/liquid-tether', ['exports', 'liquid-tether/components/liquid-tether'], function (exports, _liquidTether) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _liquidTether.default;
    }
  });
});
define("ghost-admin/components/liquid-unless", ["exports", "liquid-fire/components/liquid-unless"], function (exports, _liquidUnless) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidUnless.default;
    }
  });
});
define("ghost-admin/components/liquid-versions", ["exports", "liquid-fire/components/liquid-versions"], function (exports, _liquidVersions) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidVersions.default;
    }
  });
});
define('ghost-admin/components/liquid-wormhole', ['exports', 'liquid-wormhole/components/liquid-wormhole'], function (exports, _liquidWormhole) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _liquidWormhole.default;
    }
  });
});
define('ghost-admin/components/lt-body', ['exports', 'ember-light-table/components/lt-body'], function (exports, _ltBody) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _ltBody.default;
    }
  });
});
define('ghost-admin/components/lt-column-resizer', ['exports', 'ember-light-table/components/lt-column-resizer'], function (exports, _ltColumnResizer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _ltColumnResizer.default;
    }
  });
});
define('ghost-admin/components/lt-foot', ['exports', 'ember-light-table/components/lt-foot'], function (exports, _ltFoot) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _ltFoot.default;
    }
  });
});
define('ghost-admin/components/lt-head', ['exports', 'ember-light-table/components/lt-head'], function (exports, _ltHead) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _ltHead.default;
    }
  });
});
define('ghost-admin/components/lt-infinity', ['exports', 'ember-light-table/components/lt-infinity'], function (exports, _ltInfinity) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _ltInfinity.default;
    }
  });
});
define('ghost-admin/components/lt-row', ['exports', 'ember-light-table/components/lt-row'], function (exports, _ltRow) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _ltRow.default;
    }
  });
});
define('ghost-admin/components/lt-scrollable', ['exports', 'ember-light-table/components/lt-scrollable'], function (exports, _ltScrollable) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _ltScrollable.default;
    }
  });
});
define('ghost-admin/components/lt-spanned-row', ['exports', 'ember-light-table/components/lt-spanned-row'], function (exports, _ltSpannedRow) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _ltSpannedRow.default;
    }
  });
});
define('ghost-admin/components/modal-base', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Component.extend({
        tagName: 'section',
        classNames: 'modal-content',

        _previousKeymasterScope: null,

        // Allowed Actions
        closeModal: () => {},

        didInsertElement() {
            this._super(...arguments);
            this._setupShortcuts();
        },

        willDestroyElement() {
            this._super(...arguments);
            this._removeShortcuts();
        },

        actions: {
            confirm() {
                throw new Error('You must override the "confirm" action in your modal component');
            },

            closeModal() {
                this.closeModal();
            }
        },

        _setupShortcuts() {
            Ember.run(function () {
                document.activeElement.blur();
            });
            this._previousKeymasterScope = key.getScope();

            key('enter', 'modal', () => {
                this.send('confirm');
            });

            key('escape', 'modal', () => {
                this.send('closeModal');
            });

            key.setScope('modal');
        },

        _removeShortcuts() {
            key.unbind('enter', 'modal');
            key.unbind('escape', 'modal');

            key.setScope(this._previousKeymasterScope);
        }
    });
});
define('ghost-admin/components/modal-delete-all', ['exports', 'ghost-admin/components/modal-base', 'ember-concurrency'], function (exports, _modalBase, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _modalBase.default.extend({

        ghostPaths: Ember.inject.service(),
        notifications: Ember.inject.service(),
        store: Ember.inject.service(),
        ajax: Ember.inject.service(),

        actions: {
            confirm() {
                this.get('deleteAll').perform();
            }
        },

        _deleteAll() {
            let deleteUrl = this.get('ghostPaths.url').api('db');
            return this.get('ajax').del(deleteUrl);
        },

        _unloadData() {
            this.get('store').unloadAll('post');
            this.get('store').unloadAll('tag');
        },

        _showSuccess() {
            this.get('notifications').showAlert('All content deleted from database.', { type: 'success', key: 'all-content.delete.success' });
        },

        _showFailure(error) {
            this.get('notifications').showAPIError(error, { key: 'all-content.delete' });
        },

        deleteAll: (0, _emberConcurrency.task)(function* () {
            try {
                yield this._deleteAll();
                this._unloadData();
                this._showSuccess();
            } catch (error) {
                this._showFailure(error);
            } finally {
                this.send('closeModal');
            }
        }).drop()
    });
});
define('ghost-admin/components/modal-delete-post', ['exports', 'ghost-admin/components/modal-base', 'ember-concurrency'], function (exports, _modalBase, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _modalBase.default.extend({
        notifications: Ember.inject.service(),

        post: Ember.computed.alias('model.post'),
        onSuccess: Ember.computed.alias('model.onSuccess'),

        actions: {
            confirm() {
                this.get('deletePost').perform();
            }
        },

        _deletePost() {
            let post = this.get('post');

            // definitely want to clear the data store and post of any unsaved,
            // client-generated tags
            post.updateTags();

            return post.destroyRecord();
        },

        _success() {
            // clear any previous error messages
            this.get('notifications').closeAlerts('post.delete');

            // trigger the success action
            if (this.get('onSuccess')) {
                this.get('onSuccess')();
            }
        },

        _failure(error) {
            this.get('notifications').showAPIError(error, { key: 'post.delete.failed' });
        },

        deletePost: (0, _emberConcurrency.task)(function* () {
            try {
                yield this._deletePost();
                this._success();
            } catch (e) {
                this._failure(e);
            } finally {
                this.send('closeModal');
            }
        }).drop()
    });
});
define('ghost-admin/components/modal-delete-subscriber', ['exports', 'ghost-admin/components/modal-base', 'ember-concurrency'], function (exports, _modalBase, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _modalBase.default.extend({
        // Allowed actions
        confirm: () => {},

        subscriber: Ember.computed.alias('model'),

        actions: {
            confirm() {
                this.get('deleteSubscriber').perform();
            }
        },

        deleteSubscriber: (0, _emberConcurrency.task)(function* () {
            yield this.confirm();
        }).drop()
    });
});
define('ghost-admin/components/modal-delete-tag', ['exports', 'ghost-admin/components/modal-base', 'ember-concurrency'], function (exports, _modalBase, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _modalBase.default.extend({
        // Allowed actions
        confirm: () => {},

        tag: Ember.computed.alias('model'),

        postInflection: Ember.computed('tag.count.posts', function () {
            return this.get('tag.count.posts') > 1 ? 'posts' : 'post';
        }),

        actions: {
            confirm() {
                this.get('deleteTag').perform();
            }
        },

        deleteTag: (0, _emberConcurrency.task)(function* () {
            try {
                yield this.confirm();
            } finally {
                this.send('closeModal');
            }
        }).drop()
    });
});
define('ghost-admin/components/modal-delete-theme', ['exports', 'ghost-admin/components/modal-base', 'ember-concurrency'], function (exports, _modalBase, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _modalBase.default.extend({
        // Allowed actions
        confirm: () => {},

        theme: Ember.computed.alias('model.theme'),
        download: Ember.computed.alias('model.download'),

        actions: {
            confirm() {
                this.get('deleteTheme').perform();
            }
        },

        deleteTheme: (0, _emberConcurrency.task)(function* () {
            try {
                yield this.confirm();
            } finally {
                this.send('closeModal');
            }
        }).drop()
    });
});
define('ghost-admin/components/modal-delete-user', ['exports', 'ghost-admin/components/modal-base', 'ember-concurrency'], function (exports, _modalBase, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _modalBase.default.extend({
        // Allowed actions
        confirm: () => {},

        user: Ember.computed.alias('model'),

        actions: {
            confirm() {
                this.get('deleteUser').perform();
            }
        },

        deleteUser: (0, _emberConcurrency.task)(function* () {
            try {
                yield this.confirm();
            } finally {
                this.send('closeModal');
            }
        }).drop()
    });
});
define('ghost-admin/components/modal-import-subscribers', ['exports', 'ghost-admin/components/modal-base', 'ghost-admin/utils/ghost-paths'], function (exports, _modalBase, _ghostPaths) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _modalBase.default.extend({
        labelText: 'Select or drag-and-drop a CSV File',

        response: null,
        closeDisabled: false,

        // Allowed actions
        confirm: () => {},

        uploadUrl: Ember.computed(function () {
            return `${(0, _ghostPaths.default)().apiRoot}/subscribers/csv/`;
        }),

        actions: {
            uploadStarted() {
                this.set('closeDisabled', true);
            },

            uploadFinished() {
                this.set('closeDisabled', false);
            },

            uploadSuccess(response) {
                this.set('response', response.meta.stats);
                // invoke the passed in confirm action
                this.confirm();
            },

            confirm() {
                // noop - we don't want the enter key doing anything
            },

            closeModal() {
                if (!this.get('closeDisabled')) {
                    this._super(...arguments);
                }
            }
        }
    });
});
define('ghost-admin/components/modal-invite-new-user', ['exports', 'ghost-admin/components/modal-base', 'ghost-admin/mixins/validation-engine', 'ember-concurrency'], function (exports, _modalBase, _validationEngine, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    const Promise = Ember.RSVP.Promise;
    exports.default = _modalBase.default.extend(_validationEngine.default, {
        notifications: Ember.inject.service(),
        store: Ember.inject.service(),

        classNames: 'modal-content invite-new-user',

        role: null,
        roles: null,
        authorRole: null,

        validationType: 'inviteUser',

        init() {
            this._super(...arguments);

            // populate roles and set initial value for the dropdown
            Ember.run.schedule('afterRender', this, function () {
                this.get('store').query('role', { permissions: 'assign' }).then(roles => {
                    let authorRole = roles.findBy('name', 'Author');

                    this.set('roles', roles);
                    this.set('authorRole', authorRole);

                    if (!this.get('role')) {
                        this.set('role', authorRole);
                    }
                });
            });
        },

        willDestroyElement() {
            this._super(...arguments);
            // TODO: this should not be needed, ValidationEngine acts as a
            // singleton and so it's errors and hasValidated state stick around
            this.get('errors').clear();
            this.set('hasValidated', Ember.A());
        },

        actions: {
            setRole(role) {
                this.set('role', role);
            },

            confirm() {
                this.get('sendInvitation').perform();
            }
        },

        validate() {
            let email = this.get('email');

            // TODO: either the validator should check the email's existence or
            // the API should return an appropriate error when attempting to save
            return new Promise((resolve, reject) => this._super().then(() => Ember.RSVP.hash({
                users: this.get('store').findAll('user', { reload: true }),
                invites: this.get('store').findAll('invite', { reload: true })
            }).then(data => {
                let existingUser = data.users.findBy('email', email);
                let existingInvite = data.invites.findBy('email', email);

                if (existingUser || existingInvite) {
                    this.get('errors').clear('email');
                    if (existingUser) {
                        this.get('errors').add('email', 'A user with that email address already exists.');
                    } else {
                        this.get('errors').add('email', 'A user with that email address was already invited.');
                    }

                    // TODO: this shouldn't be needed, ValidationEngine doesn't mark
                    // properties as validated when validating an entire object
                    this.get('hasValidated').addObject('email');
                    reject();
                } else {
                    resolve();
                }
            }), () => {
                // TODO: this shouldn't be needed, ValidationEngine doesn't mark
                // properties as validated when validating an entire object
                this.get('hasValidated').addObject('email');
                reject();
            }));
        },

        sendInvitation: (0, _emberConcurrency.task)(function* () {
            let email = this.get('email');
            let role = this.get('role');
            let notifications = this.get('notifications');
            let notificationText = `Invitation sent! (${email})`;
            let invite;

            try {
                yield this.validate();

                invite = this.get('store').createRecord('invite', {
                    email,
                    role
                });

                yield invite.save();

                // If sending the invitation email fails, the API will still return a status of 201
                // but the invite's status in the response object will be 'invited-pending'.
                if (invite.get('status') === 'pending') {
                    notifications.showAlert('Invitation email was not sent.  Please try resending.', { type: 'error', key: 'invite.send.failed' });
                } else {
                    notifications.showNotification(notificationText, { key: 'invite.send.success' });
                }

                this.send('closeModal');
            } catch (error) {
                // validation will reject and cause this to be called with no error
                if (error) {
                    invite.deleteRecord();
                    notifications.showAPIError(error, { key: 'invite.send' });
                    this.send('closeModal');
                }
            }
        }).drop()
    });
});
define('ghost-admin/components/modal-leave-editor', ['exports', 'ghost-admin/components/modal-base'], function (exports, _modalBase) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _modalBase.default.extend({
        actions: {
            confirm() {
                this.confirm().finally(() => {
                    this.send('closeModal');
                });
            }
        },

        // Allowed actions
        confirm: () => Ember.RSVP.resolve()
    });
});
define('ghost-admin/components/modal-leave-settings', ['exports', 'ghost-admin/components/modal-base'], function (exports, _modalBase) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _modalBase.default.extend({
        actions: {
            confirm() {
                this.confirm().finally(() => {
                    this.send('closeModal');
                });
            }
        },

        // Allowed actions
        confirm: () => Ember.RSVP.resolve()
    });
});
define('ghost-admin/components/modal-markdown-help', ['exports', 'ghost-admin/components/modal-base'], function (exports, _modalBase) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _modalBase.default.extend({});
});
define('ghost-admin/components/modal-new-subscriber', ['exports', 'ghost-admin/components/modal-base', 'ember-ajax/errors', 'ember-concurrency'], function (exports, _modalBase, _errors, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    exports.default = _modalBase.default.extend({

        subscriber: Ember.computed.alias('model'),

        actions: {
            updateEmail(newEmail) {
                this.set('subscriber.email', newEmail);
                this.set('subscriber.hasValidated', Ember.A());
                this.get('subscriber.errors').clear();
            },

            confirm() {
                this.get('addSubscriber').perform();
            }
        },

        addSubscriber: (0, _emberConcurrency.task)(function* () {
            try {
                yield this.get('confirm')();
                this.send('closeModal');
            } catch (error) {
                // TODO: server-side validation errors should be serialized
                // properly so that errors are added to model.errors automatically
                if (error && (0, _errors.isInvalidError)(error)) {
                    var _error$payload$errors = _slicedToArray(error.payload.errors, 1);

                    let firstError = _error$payload$errors[0];
                    let message = firstError.message;


                    if (message && message.match(/email/i)) {
                        this.get('subscriber.errors').add('email', message);
                        this.get('subscriber.hasValidated').pushObject('email');
                        return;
                    }
                }

                // route action so it should bubble up to the global error handler
                if (error) {
                    throw error;
                }
            }
        }).drop()
    });
});
define('ghost-admin/components/modal-re-authenticate', ['exports', 'ghost-admin/components/modal-base', 'ghost-admin/mixins/validation-engine', 'ghost-admin/services/ajax', 'ember-concurrency'], function (exports, _modalBase, _validationEngine, _ajax, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _modalBase.default.extend(_validationEngine.default, {
        config: Ember.inject.service(),
        notifications: Ember.inject.service(),
        session: Ember.inject.service(),

        validationType: 'signin',

        authenticationError: null,

        identification: Ember.computed('session.user.email', function () {
            return this.get('session.user.email');
        }),

        actions: {
            confirm() {
                this.get('reauthenticate').perform();
            }
        },

        _authenticate() {
            let session = this.get('session');
            let authStrategy = 'authenticator:oauth2';
            let identification = this.get('identification');
            let password = this.get('password');

            session.set('skipAuthSuccessHandler', true);

            this.toggleProperty('submitting');

            return session.authenticate(authStrategy, identification, password).finally(() => {
                this.toggleProperty('submitting');
                session.set('skipAuthSuccessHandler', undefined);
            });
        },

        _passwordConfirm() {
            // Manually trigger events for input fields, ensuring legacy compatibility with
            // browsers and password managers that don't send proper events on autofill
            Ember.$('#login').find('input').trigger('change');

            this.set('authenticationError', null);

            return this.validate({ property: 'signin' }).then(() => this._authenticate().then(() => {
                this.get('notifications').closeAlerts();
                this.send('closeModal');
                return true;
            }).catch(error => {
                if (error && error.payload && error.payload.errors) {
                    error.payload.errors.forEach(err => {
                        if ((0, _ajax.isVersionMismatchError)(err)) {
                            return this.get('notifications').showAPIError(error);
                        }
                        err.message = Ember.String.htmlSafe(err.context || err.message);
                    });

                    this.get('errors').add('password', 'Incorrect password');
                    this.get('hasValidated').pushObject('password');
                    this.set('authenticationError', error.payload.errors[0].message);
                }
            }), () => {
                this.get('hasValidated').pushObject('password');
                return false;
            });
        },

        reauthenticate: (0, _emberConcurrency.task)(function* () {
            return yield this._passwordConfirm();
        }).drop()
    });
});
define('ghost-admin/components/modal-suspend-user', ['exports', 'ghost-admin/components/modal-base', 'ember-concurrency'], function (exports, _modalBase, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _modalBase.default.extend({
        // Allowed actions
        confirm: () => {},

        user: Ember.computed.alias('model'),

        actions: {
            confirm() {
                return this.get('suspendUser').perform();
            }
        },

        suspendUser: (0, _emberConcurrency.task)(function* () {
            try {
                yield this.confirm();
            } finally {
                this.send('closeModal');
            }
        }).drop()
    });
});
define('ghost-admin/components/modal-theme-warnings', ['exports', 'ghost-admin/components/modal-base'], function (exports, _modalBase) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _modalBase.default.extend({
        'data-test-theme-warnings-modal': true,

        title: Ember.computed.reads('model.title'),
        message: Ember.computed.reads('model.message'),
        warnings: Ember.computed.reads('model.warnings'),
        errors: Ember.computed.reads('model.errors'),
        fatalErrors: Ember.computed.reads('model.fatalErrors'),
        canActivate: Ember.computed.reads('model.canActivate')
    });
});
define('ghost-admin/components/modal-transfer-owner', ['exports', 'ghost-admin/components/modal-base', 'ember-concurrency'], function (exports, _modalBase, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _modalBase.default.extend({
        user: null,

        // Allowed actions
        confirm: () => {},

        actions: {
            confirm() {
                this.get('transferOwnership').perform();
            }
        },

        transferOwnership: (0, _emberConcurrency.task)(function* () {
            try {
                yield this.confirm();
            } finally {
                this.send('closeModal');
            }
        }).drop()
    });
});
define('ghost-admin/components/modal-unsuspend-user', ['exports', 'ghost-admin/components/modal-base', 'ember-concurrency'], function (exports, _modalBase, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _modalBase.default.extend({
        // Allowed actions
        confirm: () => {},

        user: Ember.computed.alias('model'),

        actions: {
            confirm() {
                return this.get('unsuspendUser').perform();
            }
        },

        unsuspendUser: (0, _emberConcurrency.task)(function* () {
            try {
                yield this.confirm();
            } finally {
                this.send('closeModal');
            }
        }).drop()
    });
});
define('ghost-admin/components/modal-upload-image', ['exports', 'ghost-admin/components/modal-base', 'ghost-admin/utils/caja-sanitizers', 'ember-concurrency'], function (exports, _modalBase, _cajaSanitizers, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _modalBase.default.extend({
        config: Ember.inject.service(),
        notifications: Ember.inject.service(),

        model: null,

        url: '',
        newUrl: '',
        _isUploading: false,

        image: Ember.computed('model.{model,imageProperty}', {
            get() {
                let imageProperty = this.get('model.imageProperty');

                return this.get(`model.model.${imageProperty}`);
            },

            set(key, value) {
                let model = this.get('model.model');
                let imageProperty = this.get('model.imageProperty');

                return model.set(imageProperty, value);
            }
        }),

        didReceiveAttrs() {
            let image = this.get('image');
            this.set('url', image);
            this.set('newUrl', image);
        },

        actions: {
            fileUploaded(url) {
                this.set('url', url);
                this.set('newUrl', url);
            },

            removeImage() {
                this.set('url', '');
                this.set('newUrl', '');
            },

            confirm() {
                this.get('uploadImage').perform();
            },

            isUploading() {
                this.toggleProperty('_isUploading');
            }
        },

        // TODO: should validation be handled in the gh-image-uploader component?
        //  pro - consistency everywhere, simplification here
        //  con - difficult if the "save" is happening externally as it does here
        //
        //  maybe it should be handled at the model level?
        //      - automatically present everywhere
        //      - file uploads should always result in valid urls so it should only
        //        affect the url input form
        keyDown() {
            this._setErrorState(false);
        },

        _setErrorState(state) {
            if (state) {
                this.$('.url').addClass('error');
            } else {
                this.$('.url').removeClass('error');
            }
        },

        _validateUrl(url) {
            if (!Ember.isEmpty(url) && !_cajaSanitizers.default.url(url)) {
                this._setErrorState(true);
                return { message: 'Image URI is not valid' };
            }

            return true;
        },
        // end validation

        uploadImage: (0, _emberConcurrency.task)(function* () {
            let model = this.get('model.model');
            let newUrl = this.get('newUrl');
            let result = this._validateUrl(newUrl);
            let notifications = this.get('notifications');

            if (result === true) {
                this.set('image', newUrl);

                try {
                    yield model.save();
                } catch (e) {
                    notifications.showAPIError(e, { key: 'image.upload' });
                } finally {
                    this.send('closeModal');
                }
            }
        }).drop()
    });
});
define('ghost-admin/components/modal-upload-theme', ['exports', 'ghost-admin/components/modal-base', 'ghost-admin/utils/ghost-paths', 'ghost-admin/services/ajax'], function (exports, _modalBase, _ghostPaths, _ajax) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    const DEFAULTS = {
        accept: ['application/zip', 'application/x-zip-compressed'],
        extensions: ['zip']
    };

    exports.default = _modalBase.default.extend({
        eventBus: Ember.inject.service(),
        store: Ember.inject.service(),

        accept: null,
        extensions: null,
        themes: null,
        closeDisabled: false,
        file: null,
        theme: false,
        displayOverwriteWarning: false,

        hideUploader: Ember.computed.or('theme', 'displayOverwriteWarning'),
        currentThemeNames: Ember.computed.mapBy('model.themes', 'name'),

        uploadUrl: Ember.computed(function () {
            return `${(0, _ghostPaths.default)().apiRoot}/themes/upload/`;
        }),

        themeName: Ember.computed('theme.{name,package.name}', function () {
            let themePackage = this.get('theme.package');
            let name = this.get('theme.name');

            return themePackage ? `${themePackage.name} - ${themePackage.version}` : name;
        }),

        fileThemeName: Ember.computed('file', function () {
            let file = this.get('file');
            return file.name.replace(/\.zip$/, '');
        }),

        canActivateTheme: Ember.computed('theme', function () {
            let theme = this.get('theme');
            return theme && !theme.get('active');
        }),

        init() {
            this._super(...arguments);

            this.accept = this.accept || DEFAULTS.accept;
            this.extensions = this.extensions || DEFAULTS.extensions;
        },

        actions: {
            validateTheme(file) {
                let themeName = file.name.replace(/\.zip$/, '').replace(/[^\w@.]/gi, '-').toLowerCase();

                let currentThemeNames = this.get('currentThemeNames');

                this.set('file', file);

                var _$exec = /(?:\.([^.]+))?$/.exec(file.name),
                    _$exec2 = _slicedToArray(_$exec, 2);

                let extension = _$exec2[1];

                let extensions = this.get('extensions');

                if (!extension || extensions.indexOf(extension.toLowerCase()) === -1) {
                    return new _ajax.UnsupportedMediaTypeError();
                }

                if (file.name.match(/^casper\.zip$/i)) {
                    return { payload: { errors: [{ message: 'Sorry, the default Casper theme cannot be overwritten.<br>Please rename your zip file and try again.' }] } };
                }

                if (!this._allowOverwrite && currentThemeNames.includes(themeName)) {
                    this.set('displayOverwriteWarning', true);
                    return false;
                }

                return true;
            },

            confirmOverwrite() {
                this._allowOverwrite = true;
                this.set('displayOverwriteWarning', false);

                // we need to schedule afterRender so that the upload component is
                // displayed again in order to subscribe/respond to the event bus
                Ember.run.schedule('afterRender', this, function () {
                    this.get('eventBus').publish('themeUploader:upload', this.get('file'));
                });
            },

            uploadStarted() {
                this.set('closeDisabled', true);
            },

            uploadFinished() {
                this.set('closeDisabled', false);
            },

            uploadSuccess(response) {
                this.get('store').pushPayload(response);

                let theme = this.get('store').peekRecord('theme', response.themes[0].name);

                this.set('theme', theme);

                if (Ember.get(theme, 'warnings.length') > 0) {
                    this.set('validationWarnings', Ember.get(theme, 'warnings'));
                }

                // Ghost differentiates between errors and fatal errors
                // You can't activate a theme with fatal errors, but with errors.
                if (Ember.get(theme, 'errors.length') > 0) {
                    this.set('validationErrors', Ember.get(theme, 'errors'));
                }

                this.set('hasWarningsOrErrors', this.get('validationErrors.length') || this.get('validationWarnings.length'));

                // invoke the passed in confirm action
                this.get('model.uploadSuccess')(theme);
            },

            uploadFailed(error) {
                if ((0, _ajax.isThemeValidationError)(error)) {
                    let errors = error.payload.errors[0].errorDetails;
                    let fatalErrors = [];
                    let normalErrors = [];

                    // to have a proper grouping of fatal errors and none fatal, we need to check
                    // our errors for the fatal property
                    if (errors && errors.length > 0) {
                        for (let i = 0; i < errors.length; i += 1) {
                            if (errors[i].fatal) {
                                fatalErrors.push(errors[i]);
                            } else {
                                normalErrors.push(errors[i]);
                            }
                        }
                    }

                    this.set('fatalValidationErrors', fatalErrors);
                    this.set('validationErrors', normalErrors);
                }
            },

            confirm() {
                // noop - we don't want the enter key doing anything
            },

            activate() {
                this.get('model.activate')(this.get('theme'));
                this.closeModal();
            },

            closeModal() {
                if (!this.get('closeDisabled')) {
                    this._super(...arguments);
                }
            },

            reset() {
                this.set('validationWarnings', []);
                this.set('validationErrors', []);
                this.set('fatalValidationErrors', []);
                this.set('hasWarningsOrErrors', false);
            }
        }
    });
});
define('ghost-admin/components/object-bin', ['exports', 'ember-drag-drop/components/object-bin'], function (exports, _objectBin) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _objectBin.default;
});
define('ghost-admin/components/one-way-select', ['exports', 'ember-one-way-select/components/one-way-select'], function (exports, _oneWaySelect) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _oneWaySelect.default;
    }
  });
});
define('ghost-admin/components/one-way-select/option', ['exports', 'ember-one-way-select/components/one-way-select/option'], function (exports, _option) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _option.default;
    }
  });
});
define('ghost-admin/components/power-calendar-multiple', ['exports', 'ember-power-calendar/components/power-calendar-multiple'], function (exports, _powerCalendarMultiple) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _powerCalendarMultiple.default;
    }
  });
});
define('ghost-admin/components/power-calendar-multiple/days', ['exports', 'ember-power-calendar/components/power-calendar-multiple/days'], function (exports, _days) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _days.default;
    }
  });
});
define('ghost-admin/components/power-calendar-range', ['exports', 'ember-power-calendar/components/power-calendar-range'], function (exports, _powerCalendarRange) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _powerCalendarRange.default;
    }
  });
});
define('ghost-admin/components/power-calendar-range/days', ['exports', 'ember-power-calendar/components/power-calendar-range/days'], function (exports, _days) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _days.default;
    }
  });
});
define('ghost-admin/components/power-calendar', ['exports', 'ember-power-calendar/components/power-calendar'], function (exports, _powerCalendar) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _powerCalendar.default;
    }
  });
});
define('ghost-admin/components/power-calendar/days', ['exports', 'ember-power-calendar/components/power-calendar/days'], function (exports, _days) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _days.default;
    }
  });
});
define('ghost-admin/components/power-calendar/nav', ['exports', 'ember-power-calendar/components/power-calendar/nav'], function (exports, _nav) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _nav.default;
    }
  });
});
define('ghost-admin/components/power-datepicker', ['exports', 'ember-power-datepicker/components/power-datepicker'], function (exports, _powerDatepicker) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _powerDatepicker.default;
    }
  });
});
define('ghost-admin/components/power-select-multiple', ['exports', 'ember-power-select/components/power-select-multiple'], function (exports, _powerSelectMultiple) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _powerSelectMultiple.default;
    }
  });
});
define('ghost-admin/components/power-select-multiple/trigger', ['exports', 'ember-power-select/components/power-select-multiple/trigger'], function (exports, _trigger) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _trigger.default;
    }
  });
});
define('ghost-admin/components/power-select-vertical-collection-options', ['exports', 'ember-power-select/components/power-select/options', 'ghost-admin/templates/components/power-select-vertical-collection-options'], function (exports, _options, _powerSelectVerticalCollectionOptions) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _options.default.extend({
        layout: _powerSelectVerticalCollectionOptions.default
    });
});
define('ghost-admin/components/power-select', ['exports', 'ember-power-select/components/power-select'], function (exports, _powerSelect) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _powerSelect.default;
    }
  });
});
define('ghost-admin/components/power-select/before-options', ['exports', 'ember-power-select/components/power-select/before-options'], function (exports, _beforeOptions) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _beforeOptions.default;
    }
  });
});
define('ghost-admin/components/power-select/options', ['exports', 'ember-power-select/components/power-select/options'], function (exports, _options) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _options.default;
    }
  });
});
define('ghost-admin/components/power-select/placeholder', ['exports', 'ember-power-select/components/power-select/placeholder'], function (exports, _placeholder) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _placeholder.default;
    }
  });
});
define('ghost-admin/components/power-select/power-select-group', ['exports', 'ember-power-select/components/power-select/power-select-group'], function (exports, _powerSelectGroup) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _powerSelectGroup.default;
    }
  });
});
define('ghost-admin/components/power-select/search-message', ['exports', 'ember-power-select/components/power-select/search-message'], function (exports, _searchMessage) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _searchMessage.default;
    }
  });
});
define('ghost-admin/components/power-select/trigger', ['exports', 'ghost-admin/templates/components/power-select/trigger', 'ember-power-select/components/power-select/trigger'], function (exports, _trigger, _trigger2) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _trigger2.default.extend({
        layout: _trigger.default
    });
});
define('ghost-admin/components/resize-detector', ['exports', 'ember-element-resize-detector/components/resize-detector'], function (exports, _resizeDetector) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _resizeDetector.default;
    }
  });
});
define('ghost-admin/components/scroll-content-element', ['exports', 'ember-scrollable/components/scroll-content-element'], function (exports, _scrollContentElement) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _scrollContentElement.default;
    }
  });
});
define('ghost-admin/components/sortable-objects', ['exports', 'ember-drag-drop/components/sortable-objects'], function (exports, _sortableObjects) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _sortableObjects.default;
});
define('ghost-admin/components/sticky-element', ['exports', 'ember-sticky-element/components/sticky-element'], function (exports, _stickyElement) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _stickyElement.default;
    }
  });
});
define('ghost-admin/components/sticky-element/trigger', ['exports', 'ember-sticky-element/components/sticky-element/trigger'], function (exports, _trigger) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _trigger.default;
    }
  });
});
define('ghost-admin/components/vertical-collection', ['exports', '@html-next/vertical-collection/components/vertical-collection/component'], function (exports, _component) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _component.default;
    }
  });
});
define('ghost-admin/components/x-file-input', ['exports', 'emberx-file-input/components/x-file-input'], function (exports, _xFileInput) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _xFileInput.default;
    }
  });
});
define('ghost-admin/controllers/about', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Controller.extend({
        upgradeStatus: Ember.inject.service(),

        about: Ember.computed.readOnly('model'),

        copyrightYear: Ember.computed(function () {
            let date = new Date();
            return date.getFullYear();
        })
    });
});
define('ghost-admin/controllers/application', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Controller.extend({
        dropdown: Ember.inject.service(),
        session: Ember.inject.service(),
        settings: Ember.inject.service(),
        ui: Ember.inject.service(),

        showNavMenu: Ember.computed('currentPath', 'session.{isAuthenticated,user.isFulfilled}', 'ui.isFullScreen', function () {
            // if we're in fullscreen mode don't show the nav menu
            if (this.ui.isFullScreen) {
                return false;
            }

            // we need to defer showing the navigation menu until the session.user
            // promise has fulfilled so that gh-user-can-admin has the correct data
            if (!this.get('session.isAuthenticated') || !this.get('session.user.isFulfilled')) {
                return false;
            }

            return (this.get('currentPath') !== 'error404' || this.get('session.isAuthenticated')) && !this.get('currentPath').match(/(signin|signup|setup|reset)/);
        })
    });
});
define('ghost-admin/controllers/editor', ['exports', 'ghost-admin/models/post', 'ghost-admin/utils/bound-one-way', 'ghost-admin/config/environment', 'ghost-admin/utils/isNumber', 'ember-ajax/errors', 'ghost-admin/services/ajax', 'ember-concurrency'], function (exports, _post, _boundOneWay, _environment, _isNumber, _errors, _ajax, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    const DEFAULT_TITLE = '(Untitled)';

    // time in ms to save after last content edit
    const AUTOSAVE_TIMEOUT = 3000;
    // time in ms to force a save if the user is continuously typing
    const TIMEDSAVE_TIMEOUT = 60000;

    // this array will hold properties we need to watch for this.hasDirtyAttributes
    let watchedProps = ['post.scratch', 'post.titleScratch', 'post.hasDirtyAttributes', 'post.tags.[]', 'post.isError'];

    // add all post model attrs to the watchedProps array, easier to do it this way
    // than remember to update every time we add a new attr
    _post.default.eachAttribute(function (name) {
        watchedProps.push(`post.${name}`);
    });

    // TODO: This has to be moved to the I18n localization file.
    // This structure is supposed to be close to the i18n-localization which will be used soon.
    const messageMap = {
        errors: {
            post: {
                published: {
                    published: 'Update failed',
                    draft: 'Saving failed',
                    scheduled: 'Scheduling failed'
                },
                draft: {
                    published: 'Publish failed',
                    draft: 'Saving failed',
                    scheduled: 'Scheduling failed'
                },
                scheduled: {
                    scheduled: 'Updated failed',
                    draft: 'Unscheduling failed',
                    published: 'Publish failed'
                }

            }
        },

        success: {
            post: {
                published: {
                    published: 'Updated.',
                    draft: 'Saved.',
                    scheduled: 'Scheduled.'
                },
                draft: {
                    published: 'Published!',
                    draft: 'Saved.',
                    scheduled: 'Scheduled.'
                },
                scheduled: {
                    scheduled: 'Updated.',
                    draft: 'Unscheduled.',
                    published: 'Published!'
                }
            }
        }
    };

    exports.default = Ember.Controller.extend({
        application: Ember.inject.controller(),
        feature: Ember.inject.service(),
        notifications: Ember.inject.service(),
        router: Ember.inject.service(),
        slugGenerator: Ember.inject.service(),
        session: Ember.inject.service(),
        ui: Ember.inject.service(),

        /* public properties -----------------------------------------------------*/

        infoMessage: null,
        leaveEditorTransition: null,
        shouldFocusEditor: false,
        showDeletePostModal: false,
        showLeaveEditorModal: false,
        showReAuthenticateModal: false,

        // koenig related properties
        wordcount: null,

        /* private properties ----------------------------------------------------*/

        // set by setPost and _postSaved, used in hasDirtyAttributes
        _previousTagNames: null,

        /* computed properties ---------------------------------------------------*/

        post: Ember.computed.alias('model'),

        // used within {{gh-editor}} as a trigger for responsive css changes
        navIsClosed: Ember.computed.reads('application.autoNav'),

        // store the desired post status locally without updating the model,
        // the model will only be updated when a save occurs
        willPublish: (0, _boundOneWay.default)('post.isPublished'),
        willSchedule: (0, _boundOneWay.default)('post.isScheduled'),

        // updateSlug and save should always be enqueued so that we don't run into
        // problems with concurrency, for example when Cmd-S is pressed whilst the
        // cursor is in the slug field - that would previously trigger a simultaneous
        // slug update and save resulting in ember data errors and inconsistent save
        // results
        saveTasks: (0, _emberConcurrency.taskGroup)().enqueue(),

        _tagNames: Ember.computed.mapBy('post.tags', 'name'),

        hasDirtyAttributes: Ember.computed(...watchedProps, {
            get() {
                return this._hasDirtyAttributes();
            },
            set(key, value) {
                return value;
            }
        }),

        _autosaveRunning: Ember.computed('_autosave.isRunning', '_timedSave.isRunning', function () {
            let autosave = this.get('_autosave.isRunning');
            let timedsave = this.get('_timedSave.isRunning');

            return autosave || timedsave;
        }),

        _canAutosave: Ember.computed('post.isDraft', function () {
            return _environment.default.environment !== 'test' && this.get('post.isDraft');
        }),

        /* actions ---------------------------------------------------------------*/

        actions: {
            updateScratch(mobiledoc) {
                this.set('post.scratch', mobiledoc);

                // save 3 seconds after last edit
                this.get('_autosave').perform();
                // force save at 60 seconds
                this.get('_timedSave').perform();
            },
            updateTitleScratch(title) {
                this.set('post.titleScratch', title);
            },

            // updates local willPublish/Schedule values, does not get applied to
            // the post's `status` value until a save is triggered
            setSaveType(newType) {
                if (newType === 'publish') {
                    this.set('willPublish', true);
                    this.set('willSchedule', false);
                } else if (newType === 'draft') {
                    this.set('willPublish', false);
                    this.set('willSchedule', false);
                } else if (newType === 'schedule') {
                    this.set('willSchedule', true);
                    this.set('willPublish', false);
                }
            },

            save(options) {
                return this.get('save').perform(options);
            },

            // used to prevent unexpected background saves. Triggered when opening
            // publish menu, starting a manual save, and when leaving the editor
            cancelAutosave() {
                this.get('_autosave').cancelAll();
                this.get('_timedSave').cancelAll();
            },

            toggleLeaveEditorModal(transition) {
                let leaveTransition = this.get('leaveEditorTransition');

                // "cancel" was clicked in the "are you sure?" modal so we just
                // reset the saved transition and remove the modal
                if (!transition && this.get('showLeaveEditorModal')) {
                    this.set('leaveEditorTransition', null);
                    this.set('showLeaveEditorModal', false);
                    return;
                }

                if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
                    this.set('leaveEditorTransition', transition);

                    // if a save is running, wait for it to finish then transition
                    if (this.get('saveTasks.isRunning')) {
                        return this.get('saveTasks.last').then(() => {
                            transition.retry();
                        });
                    }

                    // if an autosave is scheduled, cancel it, save then transition
                    if (this.get('_autosaveRunning')) {
                        this.send('cancelAutosave');
                        this.get('autosave').cancelAll();

                        return this.get('autosave').perform().then(() => {
                            transition.retry();
                        });
                    }

                    // we genuinely have unsaved data, show the modal
                    this.set('showLeaveEditorModal', true);
                }
            },

            // called by the "are you sure?" modal
            leaveEditor() {
                let transition = this.get('leaveEditorTransition');

                if (!transition) {
                    this.get('notifications').showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', { type: 'error' });
                    return;
                }

                // perform cleanup and reset manually, ensures the transition will succeed
                this.reset();

                return transition.retry();
            },

            toggleDeletePostModal() {
                if (!this.get('post.isNew')) {
                    this.toggleProperty('showDeletePostModal');
                }
            },

            toggleReAuthenticateModal() {
                this.toggleProperty('showReAuthenticateModal');
            },

            setKoenigEditor(koenig) {
                this._koenig = koenig;

                // remove any empty cards when displaying a draft post
                // - empty cards may be left in draft posts due to autosave occuring
                //   whilst an empty card is present then the user closing the browser
                //   or refreshing the page
                if (this.post.isDraft) {
                    this._koenig.cleanup();
                }
            },

            updateWordCount(counts) {
                this.set('wordCount', counts);
            }
        },

        /* Public tasks ----------------------------------------------------------*/

        // separate task for autosave so that it doesn't override a manual save
        autosave: (0, _emberConcurrency.task)(function* () {
            if (!this.get('save.isRunning')) {
                return yield this.get('save').perform({
                    silent: true,
                    backgroundSave: true
                });
            }
        }).drop(),

        // save tasks cancels autosave before running, although this cancels the
        // _xSave tasks  that will also cancel the autosave task
        save: (0, _emberConcurrency.task)(function* (options = {}) {
            let prevStatus = this.get('post.status');
            let isNew = this.get('post.isNew');
            let status;

            this.send('cancelAutosave');

            if (options.backgroundSave && !this.get('hasDirtyAttributes')) {
                return;
            }

            if (options.backgroundSave) {
                // do not allow a post's status to be set to published by a background save
                status = 'draft';
            } else {
                if (this.get('post.pastScheduledTime')) {
                    status = !this.get('willSchedule') && !this.get('willPublish') ? 'draft' : 'published';
                } else {
                    if (this.get('willPublish') && !this.get('post.isScheduled')) {
                        status = 'published';
                    } else if (this.get('willSchedule') && !this.get('post.isPublished')) {
                        status = 'scheduled';
                    } else {
                        status = 'draft';
                    }
                }
            }

            // ensure we remove any blank cards when performing a full save
            if (!options.backgroundSave) {
                if (this._koenig) {
                    this._koenig.cleanup();
                    this.set('hasDirtyAttributes', true);
                }
            }

            // Set the properties that are indirected
            // set mobiledoc equal to what's in the editor but create a copy so that
            // nested objects/arrays don't keep references which can mean that both
            // scratch and mobiledoc get updated simultaneously
            this.set('post.mobiledoc', Ember.copy(this.get('post.scratch'), true));
            this.set('post.status', status);

            // Set a default title
            if (!this.get('post.titleScratch').trim()) {
                this.set('post.titleScratch', DEFAULT_TITLE);
            }

            this.set('post.title', this.get('post.titleScratch'));
            this.set('post.customExcerpt', this.get('post.customExcerptScratch'));
            this.set('post.footerInjection', this.get('post.footerExcerptScratch'));
            this.set('post.headerInjection', this.get('post.headerExcerptScratch'));
            this.set('post.metaTitle', this.get('post.metaTitleScratch'));
            this.set('post.metaDescription', this.get('post.metaDescriptionScratch'));
            this.set('post.ogTitle', this.get('post.ogTitleScratch'));
            this.set('post.ogDescription', this.get('post.ogDescriptionScratch'));
            this.set('post.twitterTitle', this.get('post.twitterTitleScratch'));
            this.set('post.twitterDescription', this.get('post.twitterDescriptionScratch'));

            if (!this.get('post.slug')) {
                this.get('saveTitle').cancelAll();

                yield this.get('generateSlug').perform();
            }

            try {
                let post = yield this.get('post').save(options);

                if (!options.silent) {
                    this._showSaveNotification(prevStatus, post.get('status'), isNew ? true : false);
                }

                this.get('post').set('statusScratch', null);

                // redirect to edit route if saving a new record
                if (isNew && post.get('id')) {
                    if (!this.get('leaveEditorTransition')) {
                        this.replaceRoute('editor.edit', post);
                    }
                    return true;
                }

                return post;
            } catch (error) {
                // re-throw if we have a general server error
                if (error && !(0, _errors.isInvalidError)(error)) {
                    this.send('error', error);
                    return;
                }

                this.set('post.status', prevStatus);

                if (!options.silent) {
                    let errorOrMessages = error || this.get('post.errors.messages');
                    this._showErrorAlert(prevStatus, this.get('post.status'), errorOrMessages);
                    // simulate a validation error for upstream tasks
                    throw undefined;
                }

                return this.get('post');
            }
        }).group('saveTasks'),

        /*
         * triggered by a user manually changing slug
         */
        updateSlug: (0, _emberConcurrency.task)(function* (_newSlug) {
            let slug = this.get('post.slug');
            let newSlug, serverSlug;

            newSlug = _newSlug || slug;
            newSlug = newSlug && newSlug.trim();

            // Ignore unchanged slugs or candidate slugs that are empty
            if (!newSlug || slug === newSlug) {
                // reset the input to its previous state
                this.set('slugValue', slug);
                return;
            }

            serverSlug = yield this.get('slugGenerator').generateSlug('post', newSlug);

            // If after getting the sanitized and unique slug back from the API
            // we end up with a slug that matches the existing slug, abort the change
            if (serverSlug === slug) {
                return;
            }

            // Because the server transforms the candidate slug by stripping
            // certain characters and appending a number onto the end of slugs
            // to enforce uniqueness, there are cases where we can get back a
            // candidate slug that is a duplicate of the original except for
            // the trailing incrementor (e.g., this-is-a-slug and this-is-a-slug-2)

            // get the last token out of the slug candidate and see if it's a number
            let slugTokens = serverSlug.split('-');
            let check = Number(slugTokens.pop());

            // if the candidate slug is the same as the existing slug except
            // for the incrementor then the existing slug should be used
            if ((0, _isNumber.default)(check) && check > 0) {
                if (slug === slugTokens.join('-') && serverSlug !== newSlug) {
                    this.set('slugValue', slug);

                    return;
                }
            }

            this.set('post.slug', serverSlug);

            // If this is a new post.  Don't save the post.  Defer the save
            // to the user pressing the save button
            if (this.get('post.isNew')) {
                return;
            }

            return yield this.get('post').save();
        }).group('saveTasks'),

        // used in the PSM so that saves are sequential and don't trigger collision
        // detection errors
        savePost: (0, _emberConcurrency.task)(function* () {
            try {
                return yield this.get('post').save();
            } catch (error) {
                if (error) {
                    let status = this.get('post.status');
                    this._showErrorAlert(status, status, error);
                }

                throw error;
            }
        }).group('saveTasks'),

        saveTitle: (0, _emberConcurrency.task)(function* () {
            let post = this.get('post');
            let currentTitle = post.get('title');
            let newTitle = post.get('titleScratch').trim();

            if (currentTitle && newTitle && newTitle === currentTitle) {
                return;
            }

            // this is necessary to force a save when the title is blank
            this.set('hasDirtyAttributes', true);

            // generate a slug if a post is new and doesn't have a title yet or
            // if the title is still '(Untitled)'
            if (post.get('isNew') && !currentTitle || currentTitle === DEFAULT_TITLE) {
                yield this.get('generateSlug').perform();
            }

            if (this.get('post.isDraft')) {
                yield this.get('autosave').perform();
            }
        }),

        generateSlug: (0, _emberConcurrency.task)(function* () {
            let title = this.get('post.titleScratch');

            // Only set an "untitled" slug once per post
            if (title === DEFAULT_TITLE && this.get('post.slug')) {
                return;
            }

            try {
                let slug = yield this.get('slugGenerator').generateSlug('post', title);

                if (!Ember.isBlank(slug)) {
                    this.set('post.slug', slug);
                }
            } catch (error) {
                // Nothing to do (would be nice to log this somewhere though),
                // but a rejected promise needs to be handled here so that a resolved
                // promise is returned.
                if ((0, _ajax.isVersionMismatchError)(error)) {
                    this.get('notifications').showAPIError(error);
                }
            }
        }).enqueue(),

        /* Public methods --------------------------------------------------------*/

        // called by the new/edit routes to change the post model
        setPost(post) {
            // don't do anything else if we're setting the same post
            if (post === this.get('post')) {
                // set autofocus as change signal to the persistent editor on new->edit
                this.set('shouldFocusEditor', post.get('isNew'));
                return;
            }

            // reset everything ready for a new post
            this.reset();

            this.set('post', post);

            // autofocus the editor if we have a new post
            this.set('shouldFocusEditor', post.get('isNew'));

            // need to set scratch values because they won't be present on first
            // edit of the post
            // TODO: can these be `boundOneWay` on the model as per the other attrs?
            post.set('titleScratch', post.get('title'));
            post.set('scratch', post.get('mobiledoc'));

            this._previousTagNames = this.get('_tagNames');
            this._attachModelHooks();

            // triggered any time the admin tab is closed, we need to use a native
            // dialog here instead of our custom modal
            window.onbeforeunload = () => {
                if (this.get('hasDirtyAttributes')) {
                    return '==============================\n\n' + 'Hey there! It looks like you\'re in the middle of writing' + ' something and you haven\'t saved all of your content.' + '\n\nSave before you go!\n\n' + '==============================';
                }
            };
        },

        // called by editor route's willTransition hook, fires for editor.new->edit,
        // editor.edit->edit, or editor->any. Triggers `toggleLeaveEditorModal` action
        // which will either finish autosave then retry transition or abort and show
        // the "are you sure?" modal
        willTransition(transition) {
            let post = this.get('post');

            // exit early and allow transition if we have no post, occurs if reset
            // has already been called as in the `leaveEditor` action
            if (!post) {
                return;
            }

            // clean up blank cards when leaving the editor if we have a draft post
            // - blank cards could be left around due to autosave triggering whilst
            //   a blank card is present then the user attempting to leave
            // - will mark the post as dirty so it gets saved when transitioning
            if (this._koenig && post.isDraft) {
                this._koenig.cleanup();
            }

            let hasDirtyAttributes = this.get('hasDirtyAttributes');
            let state = post.getProperties('isDeleted', 'isSaving', 'hasDirtyAttributes', 'isNew');

            let fromNewToEdit = this.get('router.currentRouteName') === 'editor.new' && transition.targetName === 'editor.edit' && transition.intent.contexts && transition.intent.contexts[0] && transition.intent.contexts[0].id === post.get('id');

            let deletedWithoutChanges = state.isDeleted && (state.isSaving || !state.hasDirtyAttributes);

            // controller is dirty and we aren't in a new->edit or delete->index
            // transition so show our "are you sure you want to leave?" modal
            if (!fromNewToEdit && !deletedWithoutChanges && hasDirtyAttributes) {
                transition.abort();
                this.send('toggleLeaveEditorModal', transition);
                return;
            }

            // the transition is now certain to complete so cleanup and reset if
            // we're exiting the editor. new->edit keeps everything around and
            // edit->edit will call reset in the setPost method if necessary
            if (!fromNewToEdit && transition.targetName !== 'editor.edit') {
                this.reset();
            }
        },

        // called when the editor route is left or the post model is swapped
        reset() {
            let post = this.get('post');

            // make sure the save tasks aren't still running in the background
            // after leaving the edit route
            this.send('cancelAutosave');

            if (post) {
                // clear post of any unsaved, client-generated tags
                post.updateTags();

                // remove new+unsaved records from the store and rollback any unsaved changes
                if (post.get('isNew')) {
                    post.deleteRecord();
                } else {
                    post.rollbackAttributes();
                }

                // remove the create/update event handlers that were added to the post
                this._detachModelHooks();
            }

            this._previousTagNames = [];

            this.set('post', null);
            this.set('hasDirtyAttributes', false);
            this.set('shouldFocusEditor', false);
            this.set('leaveEditorTransition', null);
            this.set('infoMessage', null);
            this.set('wordCount', null);

            // remove the onbeforeunload handler as it's only relevant whilst on
            // the editor route
            window.onbeforeunload = null;
        },

        /* Private tasks ---------------------------------------------------------*/

        // save 3 seconds after the last edit
        _autosave: (0, _emberConcurrency.task)(function* () {
            if (!this.get('_canAutosave')) {
                return;
            }

            // force an instant save on first body edit for new posts
            if (this.get('post.isNew')) {
                return this.get('autosave').perform();
            }

            yield (0, _emberConcurrency.timeout)(AUTOSAVE_TIMEOUT);
            this.get('autosave').perform();
        }).restartable(),

        // save at 60 seconds even if the user doesn't stop typing
        _timedSave: (0, _emberConcurrency.task)(function* () {
            if (!this.get('_canAutosave')) {
                return;
            }

            while (_environment.default.environment !== 'test' && true) {
                yield (0, _emberConcurrency.timeout)(TIMEDSAVE_TIMEOUT);
                this.get('autosave').perform();
            }
        }).drop(),

        /* Private methods -------------------------------------------------------*/

        _hasDirtyAttributes() {
            let post = this.get('post');

            if (!post) {
                return false;
            }

            // if the Adapter failed to save the post isError will be true
            // and we should consider the post still dirty.
            if (post.get('isError')) {
                return true;
            }

            // post.tags is an array so hasDirtyAttributes doesn't pick up
            // changes unless the array ref is changed
            let currentTags = this.getWithDefault('_tagNames', []).join('');
            let previousTags = this.getWithDefault('_previousTagNames', []).join('');
            if (currentTags !== previousTags) {
                return true;
            }

            // titleScratch isn't an attr so needs a manual dirty check
            if (this.get('titleScratch') !== this.get('title')) {
                return true;
            }

            // scratch isn't an attr so needs a manual dirty check
            let mobiledoc = post.get('mobiledoc');
            let scratch = post.get('scratch');
            // additional guard in case we are trying to compare null with undefined
            if (scratch || mobiledoc) {
                let mobiledocJSON = JSON.stringify(mobiledoc);
                let scratchJSON = JSON.stringify(scratch);

                if (scratchJSON !== mobiledocJSON) {
                    return true;
                }
            }

            // new+unsaved posts always return `hasDirtyAttributes: true`
            // so we need a manual check to see if any
            if (post.get('isNew')) {
                let changedAttributes = Object.keys(post.changedAttributes());
                return changedAttributes.length ? true : false;
            }

            // we've covered all the non-tracked cases we care about so fall
            // back on Ember Data's default dirty attribute checks
            return post.get('hasDirtyAttributes');
        },

        // post.save() is called in multiple places, rather than remembering to
        // add a .then in every instance we use model hooks to update our local
        // values used for `hasDirtyAttributes`
        _attachModelHooks() {
            let post = this.get('post');
            if (post) {
                post.on('didCreate', this, this._postSaved);
                post.on('didUpdate', this, this._postSaved);
            }
        },

        _detachModelHooks() {
            let post = this.get('post');
            if (post) {
                post.off('didCreate', this, this._postSaved);
                post.off('didUpdate', this, this._postSaved);
            }
        },

        _postSaved() {
            let post = this.get('post');

            // remove any unsaved tags
            // NOTE: `updateTags` changes `hasDirtyAttributes => true`.
            // For a saved post it would otherwise be false.
            post.updateTags();

            this._previousTagNames = this.get('_tagNames');

            // if the two "scratch" properties (title and content) match the post,
            // then it's ok to set hasDirtyAttributes to false
            // TODO: why is this necessary?
            let titlesMatch = post.get('titleScratch') === post.get('title');
            let bodiesMatch = JSON.stringify(post.get('scratch')) === JSON.stringify(post.get('mobiledoc'));

            if (titlesMatch && bodiesMatch) {
                this.set('hasDirtyAttributes', false);
            }
        },

        _showSaveNotification(prevStatus, status, delay) {
            let message = messageMap.success.post[prevStatus][status];
            let notifications = this.get('notifications');
            let type, path;

            if (status === 'published') {
                type = this.get('post.page') ? 'Page' : 'Post';
                path = this.get('post.absoluteUrl');
            } else {
                type = 'Preview';
                path = this.get('post.previewUrl');
            }

            message += `&nbsp;<a href="${path}" target="_blank">View ${type}</a>`;

            notifications.showNotification(message.htmlSafe(), { delayed: delay });
        },

        _showErrorAlert(prevStatus, status, error, delay) {
            let message = messageMap.errors.post[prevStatus][status];
            let notifications = this.get('notifications');
            let errorMessage;

            function isString(str) {
                /* global toString */
                return toString.call(str) === '[object String]';
            }

            if (error && isString(error)) {
                errorMessage = error;
            } else if (error && Ember.isArray(error)) {
                // This is here because validation errors are returned as an array
                // TODO: remove this once validations are fixed
                errorMessage = error[0];
            } else if (error && error.payload && error.payload.errors && error.payload.errors[0].message) {
                errorMessage = error.payload.errors[0].message;
            } else {
                errorMessage = 'Unknown Error';
            }

            message += `: ${errorMessage}`;
            message = Ember.String.htmlSafe(message);

            notifications.showAlert(message, { type: 'error', delayed: delay, key: 'post.save' });
        }

    });
});
define('ghost-admin/controllers/error', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Controller.extend({

        stack: false,
        error: Ember.computed.readOnly('model'),

        code: Ember.computed('error.status', function () {
            return this.get('error.status') > 200 ? this.get('error.status') : 500;
        }),

        message: Ember.computed('error.statusText', function () {
            if (this.get('code') === 404) {
                return 'Page not found';
            }

            return this.get('error.statusText') !== 'error' ? this.get('error.statusText') : 'Internal Server Error';
        })
    });
});
define('ghost-admin/controllers/posts-loading', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Controller.extend({

        postsController: Ember.inject.controller('posts'),
        session: Ember.inject.service(),

        availableTypes: Ember.computed.readOnly('postsController.availableTypes'),
        selectedType: Ember.computed.readOnly('postsController.selectedType'),
        availableTags: Ember.computed.readOnly('postsController.availableTags'),
        selectedTag: Ember.computed.readOnly('postsController.selectedTag'),
        availableAuthors: Ember.computed.readOnly('postsController.availableAuthors'),
        selectedAuthor: Ember.computed.readOnly('postsController.selectedAuthor'),
        availableOrders: Ember.computed.readOnly('postsController.availableOrders'),
        selectedOrder: Ember.computed.readOnly('postsController.selectedOrder')

    });
});
define('ghost-admin/controllers/posts', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    const TYPES = [{
        name: 'All posts',
        value: null
    }, {
        name: 'Draft posts',
        value: 'draft'
    }, {
        name: 'Published posts',
        value: 'published'
    }, {
        name: 'Scheduled posts',
        value: 'scheduled'
    }, {
        name: 'Featured posts',
        value: 'featured'
    }, {
        name: 'Pages',
        value: 'page'
    }];

    const ORDERS = [{
        name: 'Newest',
        value: null
    }, {
        name: 'Oldest',
        value: 'published_at asc'
    }];

    exports.default = Ember.Controller.extend({

        session: Ember.inject.service(),
        store: Ember.inject.service(),

        queryParams: ['type', 'author', 'tag', 'order'],

        type: null,
        author: null,
        tag: null,
        order: null,

        _hasLoadedTags: false,
        _hasLoadedAuthors: false,

        availableTypes: null,
        availableOrders: null,

        init() {
            this._super(...arguments);
            this.availableTypes = TYPES;
            this.availableOrders = ORDERS;
        },

        postsInfinityModel: Ember.computed.alias('model'),

        showingAll: Ember.computed('type', 'author', 'tag', function () {
            var _getProperties = this.getProperties(['type', 'author', 'tag']);

            let type = _getProperties.type,
                author = _getProperties.author,
                tag = _getProperties.tag;


            return !type && !author && !tag;
        }),

        selectedType: Ember.computed('type', function () {
            let types = this.get('availableTypes');
            return types.findBy('value', this.get('type'));
        }),

        selectedOrder: Ember.computed('order', function () {
            let orders = this.get('availableOrders');
            return orders.findBy('value', this.get('order'));
        }),

        _availableTags: Ember.computed(function () {
            return this.get('store').peekAll('tag');
        }),

        availableTags: Ember.computed('_availableTags.[]', function () {
            let tags = this.get('_availableTags').filter(tag => tag.get('id') !== null);
            let options = tags.toArray();

            options.unshiftObject({ name: 'All tags', slug: null });

            return options;
        }),

        selectedTag: Ember.computed('tag', '_availableTags.[]', function () {
            let tag = this.get('tag');
            let tags = this.get('availableTags');

            return tags.findBy('slug', tag);
        }),

        _availableAuthors: Ember.computed(function () {
            return this.get('store').peekAll('user');
        }),

        availableAuthors: Ember.computed('_availableAuthors.[]', function () {
            let authors = this.get('_availableAuthors');
            let options = authors.toArray();

            options.unshiftObject({ name: 'All authors', slug: null });

            return options;
        }),

        selectedAuthor: Ember.computed('author', 'availableAuthors.[]', function () {
            let author = this.get('author');
            let authors = this.get('availableAuthors');

            return authors.findBy('slug', author);
        }),

        actions: {
            changeType(type) {
                this.set('type', Ember.get(type, 'value'));
            },

            changeAuthor(author) {
                this.set('author', Ember.get(author, 'slug'));
            },

            changeTag(tag) {
                this.set('tag', Ember.get(tag, 'slug'));
            },

            changeOrder(order) {
                this.set('order', Ember.get(order, 'value'));
            },

            openEditor(post) {
                this.transitionToRoute('editor.edit', post.get('id'));
            }
        }
    });
});
define('ghost-admin/controllers/reset', ['exports', 'ghost-admin/mixins/validation-engine', 'ember-concurrency'], function (exports, _validationEngine, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Controller.extend(_validationEngine.default, {
        ghostPaths: Ember.inject.service(),
        notifications: Ember.inject.service(),
        session: Ember.inject.service(),
        ajax: Ember.inject.service(),
        config: Ember.inject.service(),

        newPassword: '',
        ne2Password: '',
        token: '',
        flowErrors: '',

        validationType: 'reset',

        email: Ember.computed('token', function () {
            // The token base64 encodes the email (and some other stuff),
            // each section is divided by a '|'. Email comes second.
            return atob(this.get('token')).split('|')[1];
        }),

        actions: {
            submit() {
                return this.get('resetPassword').perform();
            }
        },

        // Used to clear sensitive information
        clearData() {
            this.setProperties({
                newPassword: '',
                ne2Password: '',
                token: ''
            });
        },

        resetPassword: (0, _emberConcurrency.task)(function* () {
            let credentials = this.getProperties('newPassword', 'ne2Password', 'token');
            let authUrl = this.get('ghostPaths.url').api('authentication', 'passwordreset');

            this.set('flowErrors', '');
            this.get('hasValidated').addObjects(['newPassword', 'ne2Password']);

            try {
                yield this.validate();
                try {
                    let resp = yield this.get('ajax').put(authUrl, {
                        data: {
                            passwordreset: [credentials]
                        }
                    });
                    this.get('notifications').showAlert(resp.passwordreset[0].message, { type: 'warn', delayed: true, key: 'password.reset' });
                    this.get('session').authenticate('authenticator:oauth2', this.get('email'), credentials.newPassword);
                    return true;
                } catch (error) {
                    this.get('notifications').showAPIError(error, { key: 'password.reset' });
                }
            } catch (error) {
                if (this.get('errors.newPassword')) {
                    this.set('flowErrors', this.get('errors.newPassword')[0].message);
                }

                if (this.get('errors.ne2Password')) {
                    this.set('flowErrors', this.get('errors.ne2Password')[0].message);
                }

                if (error && this.get('errors.length') === 0) {
                    throw error;
                }
            }
        }).drop()
    });
});
define('ghost-admin/controllers/settings/apps/amp', ['exports', 'ember-concurrency'], function (exports, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Controller.extend({
        notifications: Ember.inject.service(),
        settings: Ember.inject.service(),

        leaveSettingsTransition: null,

        ampSettings: Ember.computed.alias('settings.amp'),

        actions: {
            update(value) {
                this.set('ampSettings', value);
            },

            save() {
                this.get('save').perform();
            },

            toggleLeaveSettingsModal(transition) {
                let leaveTransition = this.get('leaveSettingsTransition');

                if (!transition && this.get('showLeaveSettingsModal')) {
                    this.set('leaveSettingsTransition', null);
                    this.set('showLeaveSettingsModal', false);
                    return;
                }

                if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
                    this.set('leaveSettingsTransition', transition);

                    // if a save is running, wait for it to finish then transition
                    if (this.get('save.isRunning')) {
                        return this.get('save.last').then(() => {
                            transition.retry();
                        });
                    }

                    // we genuinely have unsaved data, show the modal
                    this.set('showLeaveSettingsModal', true);
                }
            },

            leaveSettings() {
                let transition = this.get('leaveSettingsTransition');
                let settings = this.get('settings');

                if (!transition) {
                    this.get('notifications').showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', { type: 'error' });
                    return;
                }

                // roll back changes on settings model
                settings.rollbackAttributes();

                return transition.retry();
            }
        },

        save: (0, _emberConcurrency.task)(function* () {
            let amp = this.get('ampSettings');
            let settings = this.get('settings');

            settings.set('amp', amp);

            try {
                return yield settings.save();
            } catch (error) {
                this.get('notifications').showAPIError(error);
                throw error;
            }
        }).drop()
    });
});
define('ghost-admin/controllers/settings/apps/index', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Controller.extend({
        settings: Ember.inject.service()
    });
});
define('ghost-admin/controllers/settings/apps/slack', ['exports', 'ghost-admin/utils/bound-one-way', 'ember-ajax/errors', 'ember-concurrency'], function (exports, _boundOneWay, _errors, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Controller.extend({
        ghostPaths: Ember.inject.service(),
        ajax: Ember.inject.service(),
        notifications: Ember.inject.service(),
        settings: Ember.inject.service(),

        leaveSettingsTransition: null,
        slackArray: null,

        init() {
            this._super(...arguments);
            this.slackArray = [];
        },

        slackSettings: (0, _boundOneWay.default)('settings.slack.firstObject'),
        testNotificationDisabled: Ember.computed.empty('slackSettings.url'),

        actions: {
            save() {
                this.get('save').perform();
            },

            updateURL(value) {
                value = typeof value === 'string' ? value.trim() : value;
                this.set('slackSettings.url', value);
                this.get('slackSettings.errors').clear();
            },

            triggerDirtyState() {
                let slack = this.get('slackSettings');
                let slackArray = this.get('slackArray');
                let settings = this.get('settings');

                // Hack to trigger the `isDirty` state on the settings model by setting a new Array
                // for slack rather that replacing the existing one which would still point to the
                // same reference and therfore not setting the model into a dirty state
                slackArray.clear().pushObject(slack);
                settings.set('slack', slackArray);
            },

            toggleLeaveSettingsModal(transition) {
                let leaveTransition = this.get('leaveSettingsTransition');

                if (!transition && this.get('showLeaveSettingsModal')) {
                    this.set('leaveSettingsTransition', null);
                    this.set('showLeaveSettingsModal', false);
                    return;
                }

                if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
                    this.set('leaveSettingsTransition', transition);

                    // if a save is running, wait for it to finish then transition
                    if (this.get('save.isRunning')) {
                        return this.get('save.last').then(() => {
                            transition.retry();
                        });
                    }

                    // we genuinely have unsaved data, show the modal
                    this.set('showLeaveSettingsModal', true);
                }
            },

            leaveSettings() {
                let transition = this.get('leaveSettingsTransition');
                let settings = this.get('settings');
                let slackArray = this.get('slackArray');

                if (!transition) {
                    this.get('notifications').showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', { type: 'error' });
                    return;
                }

                // roll back changes on model props
                settings.rollbackAttributes();
                slackArray.clear();

                return transition.retry();
            }
        },

        save: (0, _emberConcurrency.task)(function* () {
            let slack = this.get('slackSettings');
            let settings = this.get('settings');
            let slackArray = this.get('slackArray');

            try {
                yield slack.validate();
                // clear existing objects in slackArray to make sure we only push the validated one
                slackArray.clear().pushObject(slack);
                yield settings.set('slack', slackArray);
                return yield settings.save();
            } catch (error) {
                if (error) {
                    this.get('notifications').showAPIError(error);
                    throw error;
                }
            }
        }).drop(),

        sendTestNotification: (0, _emberConcurrency.task)(function* () {
            let notifications = this.get('notifications');
            let slackApi = this.get('ghostPaths.url').api('slack', 'test');

            try {
                yield this.get('save').perform();
                yield this.get('ajax').post(slackApi);
                notifications.showNotification('Check your Slack channel for the test message!', { type: 'info', key: 'slack-test.send.success' });
                return true;
            } catch (error) {
                notifications.showAPIError(error, { key: 'slack-test:send' });

                if (!(0, _errors.isInvalidError)(error)) {
                    throw error;
                }
            }
        }).drop()
    });
});
define('ghost-admin/controllers/settings/apps/unsplash', ['exports', 'ember-concurrency'], function (exports, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Controller.extend({
        notifications: Ember.inject.service(),
        settings: Ember.inject.service(),

        dirtyAttributes: null,
        rollbackValue: null,
        leaveSettingsTransition: null,

        unsplashSettings: Ember.computed.alias('settings.unsplash'),

        actions: {
            save() {
                this.get('save').perform();
            },

            update(value) {
                if (!this.get('dirtyAttributes')) {
                    this.set('rollbackValue', this.get('unsplashSettings.isActive'));
                }
                this.set('unsplashSettings.isActive', value);
                this.set('dirtyAttributes', true);
            },

            toggleLeaveSettingsModal(transition) {
                let leaveTransition = this.get('leaveSettingsTransition');

                if (!transition && this.get('showLeaveSettingsModal')) {
                    this.set('leaveSettingsTransition', null);
                    this.set('showLeaveSettingsModal', false);
                    return;
                }

                if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
                    this.set('leaveSettingsTransition', transition);

                    // if a save is running, wait for it to finish then transition
                    if (this.get('save.isRunning')) {
                        return this.get('save.last').then(() => {
                            transition.retry();
                        });
                    }

                    // we genuinely have unsaved data, show the modal
                    this.set('showLeaveSettingsModal', true);
                }
            },

            leaveSettings() {
                let transition = this.get('leaveSettingsTransition');

                if (!transition) {
                    this.get('notifications').showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', { type: 'error' });
                    return;
                }

                // roll back changes on model props
                this.set('unsplashSettings.isActive', this.get('rollbackValue'));
                this.set('dirtyAttributes', false);
                this.set('rollbackValue', null);

                return transition.retry();
            }
        },

        save: (0, _emberConcurrency.task)(function* () {
            let unsplash = this.get('unsplashSettings');
            let settings = this.get('settings');

            try {
                settings.set('unsplash', unsplash);
                this.set('dirtyAttributes', false);
                this.set('rollbackValue', null);
                return yield settings.save();
            } catch (error) {
                if (error) {
                    this.get('notifications').showAPIError(error);
                    throw error;
                }
            }
        }).drop()
    });
});
define('ghost-admin/controllers/settings/apps/zapier', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Controller.extend({});
});
define('ghost-admin/controllers/settings/code-injection', ['exports', 'ember-concurrency'], function (exports, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Controller.extend({
        notifications: Ember.inject.service(),
        settings: Ember.inject.service(),

        actions: {
            save() {
                this.get('save').perform();
            },

            toggleLeaveSettingsModal(transition) {
                let leaveTransition = this.get('leaveSettingsTransition');

                if (!transition && this.get('showLeaveSettingsModal')) {
                    this.set('leaveSettingsTransition', null);
                    this.set('showLeaveSettingsModal', false);
                    return;
                }

                if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
                    this.set('leaveSettingsTransition', transition);

                    // if a save is running, wait for it to finish then transition
                    if (this.get('save.isRunning')) {
                        return this.get('save.last').then(() => {
                            transition.retry();
                        });
                    }

                    // we genuinely have unsaved data, show the modal
                    this.set('showLeaveSettingsModal', true);
                }
            },

            leaveSettings() {
                let transition = this.get('leaveSettingsTransition');
                let settings = this.get('settings');

                if (!transition) {
                    this.get('notifications').showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', { type: 'error' });
                    return;
                }

                // roll back changes on settings props
                settings.rollbackAttributes();

                return transition.retry();
            }

        },

        save: (0, _emberConcurrency.task)(function* () {
            let notifications = this.get('notifications');

            try {
                return yield this.get('settings').save();
            } catch (error) {
                notifications.showAPIError(error, { key: 'code-injection.save' });
                throw error;
            }
        })
    });
});
define('ghost-admin/controllers/settings/design', ['exports', 'ghost-admin/models/navigation-item', 'ghost-admin/services/ajax', 'ember-concurrency'], function (exports, _navigationItem, _ajax, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Controller.extend({
        config: Ember.inject.service(),
        ghostPaths: Ember.inject.service(),
        notifications: Ember.inject.service(),
        session: Ember.inject.service(),
        settings: Ember.inject.service(),

        newNavItem: null,

        dirtyAttributes: false,

        themes: null,
        themeToDelete: null,
        init() {
            this._super(...arguments);
            this.set('newNavItem', _navigationItem.default.create({ isNew: true }));
        },

        showDeleteThemeModal: Ember.computed.notEmpty('themeToDelete'),

        blogUrl: Ember.computed('config.blogUrl', function () {
            let url = this.get('config.blogUrl');

            return url.slice(-1) !== '/' ? `${url}/` : url;
        }),

        actions: {
            save() {
                this.get('save').perform();
            },

            addNavItem() {
                let newNavItem = this.get('newNavItem');

                // If the url sent through is blank (user never edited the url)
                if (newNavItem.get('url') === '') {
                    newNavItem.set('url', '/');
                }

                return newNavItem.validate().then(() => {
                    this.addNewNavItem();
                });
            },

            deleteNavItem(item) {
                if (!item) {
                    return;
                }

                let navItems = this.get('settings.navigation');

                navItems.removeObject(item);
                this.set('dirtyAttributes', true);
            },

            updateLabel(label, navItem) {
                if (!navItem) {
                    return;
                }

                navItem.set('label', label);
                this.set('dirtyAttributes', true);
            },

            updateUrl(url, navItem) {
                if (!navItem) {
                    return;
                }

                navItem.set('url', url);
                this.set('dirtyAttributes', true);
            },

            toggleLeaveSettingsModal(transition) {
                let leaveTransition = this.get('leaveSettingsTransition');

                if (!transition && this.get('showLeaveSettingsModal')) {
                    this.set('leaveSettingsTransition', null);
                    this.set('showLeaveSettingsModal', false);
                    return;
                }

                if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
                    this.set('leaveSettingsTransition', transition);

                    // if a save is running, wait for it to finish then transition
                    if (this.get('save.isRunning')) {
                        return this.get('save.last').then(() => {
                            transition.retry();
                        });
                    }

                    // we genuinely have unsaved data, show the modal
                    this.set('showLeaveSettingsModal', true);
                }
            },

            leaveSettings() {
                let transition = this.get('leaveSettingsTransition');
                let settings = this.get('settings');

                if (!transition) {
                    this.get('notifications').showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', { type: 'error' });
                    return;
                }

                // roll back changes on settings props
                settings.rollbackAttributes();
                this.set('dirtyAttributes', false);

                return transition.retry();
            },

            activateTheme(theme) {
                return theme.activate().then(theme => {
                    let themeName = theme.get('name');

                    if (!Ember.isEmpty(theme.get('warnings'))) {
                        this.set('themeWarnings', theme.get('warnings'));
                        this.set('showThemeWarningsModal', true);
                    }

                    if (!Ember.isEmpty(theme.get('errors'))) {
                        this.set('themeErrors', theme.get('errors'));
                        this.set('showThemeWarningsModal', true);
                    }

                    if (this.get('themeErrors') || this.get('themeWarnings')) {
                        let message = `${themeName} activated successfully but some warnings/errors were detected.
                                   You are still able to use and activate the theme. Here is your report...`;
                        this.set('message', message);
                    }
                }).catch(error => {
                    if ((0, _ajax.isThemeValidationError)(error)) {
                        let errors = error.payload.errors[0].errorDetails;
                        let fatalErrors = [];
                        let normalErrors = [];

                        // to have a proper grouping of fatal errors and none fatal, we need to check
                        // our errors for the fatal property
                        if (errors.length > 0) {
                            for (let i = 0; i < errors.length; i += 1) {
                                if (errors[i].fatal) {
                                    fatalErrors.push(errors[i]);
                                } else {
                                    normalErrors.push(errors[i]);
                                }
                            }
                        }

                        this.set('themeErrors', normalErrors);
                        this.set('themeFatalErrors', fatalErrors);
                        this.set('showThemeErrorsModal', true);
                        return;
                    }

                    throw error;
                });
            },

            downloadTheme(theme) {
                let themeURL = `${this.get('ghostPaths.apiRoot')}/themes/${theme.name}`;
                let accessToken = this.get('session.data.authenticated.access_token');
                let downloadURL = `${themeURL}/download/?access_token=${accessToken}`;
                let iframe = Ember.$('#iframeDownload');

                if (iframe.length === 0) {
                    iframe = Ember.$('<iframe>', { id: 'iframeDownload' }).hide().appendTo('body');
                }

                iframe.attr('src', downloadURL);
            },

            deleteTheme(theme) {
                if (theme) {
                    return this.set('themeToDelete', theme);
                }

                return this._deleteTheme();
            },

            hideDeleteThemeModal() {
                this.set('themeToDelete', null);
            },

            hideThemeWarningsModal() {
                this.set('themeWarnings', null);
                this.set('themeErrors', null);
                this.set('themeFatalErrors', null);
                this.set('showThemeWarningsModal', false);
                this.set('showThemeErrorsModal', false);
            },

            reset() {
                this.set('newNavItem', _navigationItem.default.create({ isNew: true }));
            }
        },

        save: (0, _emberConcurrency.task)(function* () {
            let navItems = this.get('settings.navigation');
            let newNavItem = this.get('newNavItem');
            let notifications = this.get('notifications');
            let validationPromises = [];

            if (!newNavItem.get('isBlank')) {
                validationPromises.pushObject(this.send('addNavItem'));
            }

            navItems.map(item => {
                validationPromises.pushObject(item.validate());
            });

            try {
                yield Ember.RSVP.all(validationPromises);
                this.set('dirtyAttributes', false);
                return yield this.get('settings').save();
            } catch (error) {
                if (error) {
                    notifications.showAPIError(error);
                    throw error;
                }
            }
        }),

        addNewNavItem() {
            let navItems = this.get('settings.navigation');
            let newNavItem = this.get('newNavItem');

            newNavItem.set('isNew', false);
            navItems.pushObject(newNavItem);
            this.set('dirtyAttributes', true);
            this.set('newNavItem', _navigationItem.default.create({ isNew: true }));
            Ember.$('.gh-blognav-line:last input:first').focus();
        },

        _deleteTheme() {
            let theme = this.get('store').peekRecord('theme', this.get('themeToDelete').name);

            if (!theme) {
                return;
            }

            return theme.destroyRecord().then(() => {
                // HACK: this is a private method, we need to unload from the store
                // here so that uploading another theme with the same "id" doesn't
                // attempt to update the deleted record
                theme.unloadRecord();
            }).catch(error => {
                this.get('notifications').showAPIError(error);
            });
        }
    });
});
define('ghost-admin/controllers/settings/general', ['exports', 'ghost-admin/utils/random-password', 'npm:validator', 'ghost-admin/components/gh-image-uploader', 'ember-concurrency'], function (exports, _randomPassword, _npmValidator, _ghImageUploader, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    const ICON_EXTENSIONS = ['ico', 'png'];

    exports.default = Ember.Controller.extend({
        config: Ember.inject.service(),
        ghostPaths: Ember.inject.service(),
        notifications: Ember.inject.service(),
        session: Ember.inject.service(),
        settings: Ember.inject.service(),

        availableTimezones: null,
        iconExtensions: null,
        iconMimeTypes: 'image/png,image/x-icon',
        imageExtensions: _ghImageUploader.IMAGE_EXTENSIONS,
        imageMimeTypes: _ghImageUploader.IMAGE_MIME_TYPES,

        _scratchFacebook: null,
        _scratchTwitter: null,

        init() {
            this._super(...arguments);
            this.iconExtensions = ICON_EXTENSIONS;
        },

        privateRSSUrl: Ember.computed('config.blogUrl', 'settings.publicHash', function () {
            let blogUrl = this.get('config.blogUrl');
            let publicHash = this.get('settings.publicHash');

            return `${blogUrl}/${publicHash}/rss`;
        }),

        actions: {
            save() {
                this.get('save').perform();
            },

            setTimezone(timezone) {
                this.set('settings.activeTimezone', timezone.name);
            },

            removeImage(image) {
                // setting `null` here will error as the server treats it as "null"
                this.get('settings').set(image, '');
            },

            updateImage(property, image, resetInput) {
                this.get('settings').set(property, image);
                resetInput();
            },

            /**
             * Opens a file selection dialog - Triggered by "Upload Image" buttons,
             * searches for the hidden file input within the .gh-setting element
             * containing the clicked button then simulates a click
             * @param  {MouseEvent} event - MouseEvent fired by the button click
             */
            triggerFileDialog(event) {
                // simulate click to open file dialog
                // using jQuery because IE11 doesn't support MouseEvent
                Ember.$(event.target).closest('.gh-setting-action').find('input[type="file"]').click();
            },

            /**
             * Fired after an image upload completes
             * @param  {string} property - Property name to be set on `this.settings`
             * @param  {UploadResult[]} results - Array of UploadResult objects
             * @return {string} The URL that was set on `this.settings.property`
             */
            imageUploaded(property, results) {
                if (results[0]) {
                    return this.get('settings').set(property, results[0].url);
                }
            },

            toggleIsPrivate(isPrivate) {
                let settings = this.get('settings');

                settings.set('isPrivate', isPrivate);
                settings.get('errors').remove('password');

                let changedAttrs = settings.changedAttributes();

                // set a new random password when isPrivate is enabled
                if (isPrivate && changedAttrs.isPrivate) {
                    settings.set('password', (0, _randomPassword.default)());

                    // reset the password when isPrivate is disabled
                } else if (changedAttrs.password) {
                    settings.set('password', changedAttrs.password[0]);
                }
            },

            toggleLeaveSettingsModal(transition) {
                let leaveTransition = this.get('leaveSettingsTransition');

                if (!transition && this.get('showLeaveSettingsModal')) {
                    this.set('leaveSettingsTransition', null);
                    this.set('showLeaveSettingsModal', false);
                    return;
                }

                if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
                    this.set('leaveSettingsTransition', transition);

                    // if a save is running, wait for it to finish then transition
                    if (this.get('save.isRunning')) {
                        return this.get('save.last').then(() => {
                            transition.retry();
                        });
                    }

                    // we genuinely have unsaved data, show the modal
                    this.set('showLeaveSettingsModal', true);
                }
            },

            leaveSettings() {
                let transition = this.get('leaveSettingsTransition');
                let settings = this.get('settings');

                if (!transition) {
                    this.get('notifications').showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', { type: 'error' });
                    return;
                }

                // roll back changes on settings props
                settings.rollbackAttributes();

                return transition.retry();
            },

            validateFacebookUrl() {
                let newUrl = this.get('_scratchFacebook');
                let oldUrl = this.get('settings.facebook');
                let errMessage = '';

                // reset errors and validation
                this.get('settings.errors').remove('facebook');
                this.get('settings.hasValidated').removeObject('facebook');

                if (newUrl === '') {
                    // Clear out the Facebook url
                    this.set('settings.facebook', '');
                    return;
                }

                // _scratchFacebook will be null unless the user has input something
                if (!newUrl) {
                    newUrl = oldUrl;
                }

                try {
                    // strip any facebook URLs out
                    newUrl = newUrl.replace(/(https?:\/\/)?(www\.)?facebook\.com/i, '');

                    // don't allow any non-facebook urls
                    if (newUrl.match(/^(http|\/\/)/i)) {
                        throw 'invalid url';
                    }

                    // strip leading / if we have one then concat to full facebook URL
                    newUrl = newUrl.replace(/^\//, '');
                    newUrl = `https://www.facebook.com/${newUrl}`;

                    // don't allow URL if it's not valid
                    if (!_npmValidator.default.isURL(newUrl)) {
                        throw 'invalid url';
                    }

                    this.set('settings.facebook', '');
                    Ember.run.schedule('afterRender', this, function () {
                        this.set('settings.facebook', newUrl);
                    });
                } catch (e) {
                    if (e === 'invalid url') {
                        errMessage = 'The URL must be in a format like ' + 'https://www.facebook.com/yourPage';
                        this.get('settings.errors').add('facebook', errMessage);
                        return;
                    }

                    throw e;
                } finally {
                    this.get('settings.hasValidated').pushObject('facebook');
                }
            },

            validateTwitterUrl() {
                let newUrl = this.get('_scratchTwitter');
                let oldUrl = this.get('settings.twitter');
                let errMessage = '';

                // reset errors and validation
                this.get('settings.errors').remove('twitter');
                this.get('settings.hasValidated').removeObject('twitter');

                if (newUrl === '') {
                    // Clear out the Twitter url
                    this.set('settings.twitter', '');
                    return;
                }

                // _scratchTwitter will be null unless the user has input something
                if (!newUrl) {
                    newUrl = oldUrl;
                }

                if (newUrl.match(/(?:twitter\.com\/)(\S+)/) || newUrl.match(/([a-z\d.]+)/i)) {
                    let username = [];

                    if (newUrl.match(/(?:twitter\.com\/)(\S+)/)) {
                        var _newUrl$match = newUrl.match(/(?:twitter\.com\/)(\S+)/);

                        var _newUrl$match2 = _slicedToArray(_newUrl$match, 2);

                        username = _newUrl$match2[1];
                    } else {
                        var _newUrl$match3 = newUrl.match(/([^/]+)\/?$/mi);

                        var _newUrl$match4 = _slicedToArray(_newUrl$match3, 1);

                        username = _newUrl$match4[0];
                    }

                    // check if username starts with http or www and show error if so
                    if (username.match(/^(http|www)|(\/)/) || !username.match(/^[a-z\d._]{1,15}$/mi)) {
                        errMessage = !username.match(/^[a-z\d._]{1,15}$/mi) ? 'Your Username is not a valid Twitter Username' : 'The URL must be in a format like https://twitter.com/yourUsername';

                        this.get('settings.errors').add('twitter', errMessage);
                        this.get('settings.hasValidated').pushObject('twitter');
                        return;
                    }

                    newUrl = `https://twitter.com/${username}`;

                    this.get('settings.hasValidated').pushObject('twitter');

                    this.set('settings.twitter', '');
                    Ember.run.schedule('afterRender', this, function () {
                        this.set('settings.twitter', newUrl);
                    });
                } else {
                    errMessage = 'The URL must be in a format like ' + 'https://twitter.com/yourUsername';
                    this.get('settings.errors').add('twitter', errMessage);
                    this.get('settings.hasValidated').pushObject('twitter');
                    return;
                }
            }
        },

        _deleteTheme() {
            let theme = this.get('store').peekRecord('theme', this.get('themeToDelete').name);

            if (!theme) {
                return;
            }

            return theme.destroyRecord().catch(error => {
                this.get('notifications').showAPIError(error);
            });
        },

        save: (0, _emberConcurrency.task)(function* () {
            let notifications = this.get('notifications');
            let config = this.get('config');

            try {
                let settings = yield this.get('settings').save();
                config.set('blogTitle', settings.get('title'));

                // this forces the document title to recompute after
                // a blog title change
                this.send('collectTitleTokens', []);

                return settings;
            } catch (error) {
                if (error) {
                    notifications.showAPIError(error, { key: 'settings.save' });
                }
                throw error;
            }
        })
    });
});
define('ghost-admin/controllers/settings/labs', ['exports', 'ghost-admin/config/environment', 'ghost-admin/services/ajax', 'ember-concurrency'], function (exports, _environment, _ajax, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    const Promise = Ember.RSVP.Promise;


    const IMPORT_MIME_TYPES = ['application/json', 'application/zip', 'application/x-zip-compressed'];

    const JSON_EXTENSION = ['json'];
    const JSON_MIME_TYPE = ['application/json'];

    const YAML_EXTENSION = ['yml', 'yaml'];
    const YAML_MIME_TYPE = ['text/vnd.yaml', 'application/vnd.yaml', 'text/x-yaml', 'application/x-yaml'];

    exports.default = Ember.Controller.extend({
        ajax: Ember.inject.service(),
        config: Ember.inject.service(),
        feature: Ember.inject.service(),
        ghostPaths: Ember.inject.service(),
        notifications: Ember.inject.service(),
        session: Ember.inject.service(),
        settings: Ember.inject.service(),

        importErrors: null,
        importSuccessful: false,
        showDeleteAllModal: false,
        submitting: false,
        uploadButtonText: 'Import',

        importMimeType: null,
        jsonExtension: null,
        jsonMimeType: null,
        yamlExtension: null,
        yamlMimeType: null,

        init() {
            this._super(...arguments);
            this.importMimeType = IMPORT_MIME_TYPES;
            this.jsonExtension = JSON_EXTENSION;
            this.jsonMimeType = JSON_MIME_TYPE;
            this.yamlExtension = YAML_EXTENSION;
            this.yamlMimeType = YAML_MIME_TYPE;
        },

        actions: {
            onUpload(file) {
                let formData = new FormData();
                let notifications = this.get('notifications');
                let currentUserId = this.get('session.user.id');
                let dbUrl = this.get('ghostPaths.url').api('db');

                this.set('uploadButtonText', 'Importing');
                this.set('importErrors', null);
                this.set('importSuccessful', false);

                return this._validate(file).then(() => {
                    formData.append('importfile', file);

                    return this.get('ajax').post(dbUrl, {
                        data: formData,
                        dataType: 'json',
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }).then(response => {
                    let store = this.get('store');

                    this.set('importSuccessful', true);

                    if (response.problems) {
                        this.set('importErrors', response.problems);
                    }

                    // Clear the store, so that all the new data gets fetched correctly.
                    store.unloadAll();

                    // NOTE: workaround for behaviour change in Ember 2.13
                    // store.unloadAll has some async tendencies so we need to schedule
                    // the reload of the current user once the unload has finished
                    // https://github.com/emberjs/data/issues/4963
                    Ember.run.schedule('destroy', this, () => {
                        // Reload currentUser and set session
                        this.set('session.user', store.findRecord('user', currentUserId));

                        // TODO: keep as notification, add link to view content
                        notifications.showNotification('Import successful.', { key: 'import.upload.success' });

                        // reload settings
                        return this.get('settings').reload().then(settings => {
                            this.get('feature').fetch();
                            this.get('config').set('blogTitle', settings.get('title'));
                        });
                    });
                }).catch(response => {
                    if ((0, _ajax.isUnsupportedMediaTypeError)(response) || (0, _ajax.isRequestEntityTooLargeError)(response)) {
                        this.set('importErrors', [response]);
                    } else if (response && response.payload.errors && Ember.isArray(response.payload.errors)) {
                        this.set('importErrors', response.payload.errors);
                    } else {
                        this.set('importErrors', [{ message: 'Import failed due to an unknown error. Check the Web Inspector console and network tabs for errors.' }]);
                    }

                    throw response;
                }).finally(() => {
                    this.set('uploadButtonText', 'Import');
                });
            },

            downloadFile(url) {
                let dbUrl = this.get('ghostPaths.url').api(url);
                let accessToken = this.get('session.data.authenticated.access_token');
                let downloadURL = `${dbUrl}?access_token=${accessToken}`;
                let iframe = Ember.$('#iframeDownload');

                if (iframe.length === 0) {
                    iframe = Ember.$('<iframe>', { id: 'iframeDownload' }).hide().appendTo('body');
                }

                iframe.attr('src', downloadURL);
            },

            toggleDeleteAllModal() {
                this.toggleProperty('showDeleteAllModal');
            },

            /**
             * Opens a file selection dialog - Triggered by "Upload x" buttons,
             * searches for the hidden file input within the .gh-setting element
             * containing the clicked button then simulates a click
             * @param  {MouseEvent} event - MouseEvent fired by the button click
             */
            triggerFileDialog(event) {
                // simulate click to open file dialog
                // using jQuery because IE11 doesn't support MouseEvent
                Ember.$(event.target).closest('.gh-setting-action').find('input[type="file"]').click();
            }
        },

        // TODO: convert to ember-concurrency task
        _validate(file) {
            // Windows doesn't have mime-types for json files by default, so we
            // need to have some additional checking
            if (file.type === '') {
                // First check file extension so we can early return
                var _$exec = /(?:\.([^.]+))?$/.exec(file.name),
                    _$exec2 = _slicedToArray(_$exec, 2);

                let extension = _$exec2[1];


                if (!extension || extension.toLowerCase() !== 'json') {
                    return Ember.RSVP.reject(new _ajax.UnsupportedMediaTypeError());
                }

                return new Promise((resolve, reject) => {
                    // Extension is correct, so check the contents of the file
                    let reader = new FileReader();

                    reader.onload = function () {
                        let result = reader.result;


                        try {
                            JSON.parse(result);

                            return resolve();
                        } catch (e) {
                            return reject(new _ajax.UnsupportedMediaTypeError());
                        }
                    };

                    reader.readAsText(file);
                });
            }

            let accept = this.get('importMimeType');

            if (!Ember.isBlank(accept) && file && accept.indexOf(file.type) === -1) {
                return Ember.RSVP.reject(new _ajax.UnsupportedMediaTypeError());
            }

            return Ember.RSVP.resolve();
        },

        sendTestEmail: (0, _emberConcurrency.task)(function* () {
            let notifications = this.get('notifications');
            let emailUrl = this.get('ghostPaths.url').api('mail', 'test');

            try {
                yield this.get('ajax').post(emailUrl);
                notifications.showAlert('Check your email for the test message.', { type: 'info', key: 'test-email.send.success' });
                return true;
            } catch (error) {
                notifications.showAPIError(error, { key: 'test-email:send' });
            }
        }).drop(),

        redirectUploadResult: (0, _emberConcurrency.task)(function* (success) {
            this.set('redirectSuccess', success);
            this.set('redirectFailure', !success);

            yield (0, _emberConcurrency.timeout)(_environment.default.environment === 'test' ? 100 : 5000);

            this.set('redirectSuccess', null);
            this.set('redirectFailure', null);
            return true;
        }).drop(),

        routesUploadResult: (0, _emberConcurrency.task)(function* (success) {
            this.set('routesSuccess', success);
            this.set('routesFailure', !success);

            yield (0, _emberConcurrency.timeout)(_environment.default.environment === 'test' ? 100 : 5000);

            this.set('routesSuccess', null);
            this.set('routesFailure', null);
            return true;
        }).drop(),

        reset() {
            this.set('importErrors', null);
            this.set('importSuccessful', false);
        }
    });
});
define('ghost-admin/controllers/settings/tags', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Controller.extend({

        tagController: Ember.inject.controller('settings.tags.tag'),

        tags: Ember.computed.alias('model'),
        selectedTag: Ember.computed.alias('tagController.tag'),

        tagListFocused: Ember.computed.equal('keyboardFocus', 'tagList'),
        tagContentFocused: Ember.computed.equal('keyboardFocus', 'tagContent'),

        filteredTags: Ember.computed('tags.@each.isNew', function () {
            return this.get('tags').filterBy('isNew', false);
        }),

        // TODO: replace with ordering by page count once supported by the API
        sortedTags: Ember.computed.sort('filteredTags', function (a, b) {
            let idA = +a.get('id');
            let idB = +b.get('id');

            if (idA > idB) {
                return 1;
            } else if (idA < idB) {
                return -1;
            }

            return 0;
        }),

        actions: {
            leftMobile() {
                let firstTag = this.get('tags.firstObject');
                // redirect to first tag if possible so that you're not left with
                // tag settings blank slate when switching from portrait to landscape
                if (firstTag && !this.get('tagController.tag')) {
                    this.transitionToRoute('settings.tags.tag', firstTag);
                }
            }
        },

        scrollTagIntoView(tag) {
            Ember.run.scheduleOnce('afterRender', this, function () {
                let id = `#gh-tag-${tag.get('id')}`;
                let element = document.querySelector(id);

                if (element) {
                    let scroll = document.querySelector('.tag-list');
                    let scrollTop = scroll.scrollTop;

                    let scrollHeight = scroll.offsetHeight;
                    let element = document.querySelector(id);
                    let elementTop = element.offsetTop;
                    let elementHeight = element.offsetHeight;

                    if (elementTop < scrollTop) {
                        element.scrollIntoView(true);
                    }

                    if (elementTop + elementHeight > scrollTop + scrollHeight) {
                        element.scrollIntoView(false);
                    }
                }
            });
        }
    });
});
define('ghost-admin/controllers/settings/tags/tag', ['exports', 'ghost-admin/utils/window-proxy'], function (exports, _windowProxy) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Controller.extend({
        applicationController: Ember.inject.controller('application'),
        tagsController: Ember.inject.controller('settings.tags'),
        notifications: Ember.inject.service(),

        showDeleteTagModal: false,

        tag: Ember.computed.alias('model'),
        isMobile: Ember.computed.alias('tagsController.isMobile'),

        actions: {
            setProperty(propKey, value) {
                this._saveTagProperty(propKey, value);
            },

            toggleDeleteTagModal() {
                this.toggleProperty('showDeleteTagModal');
            },

            deleteTag() {
                return this._deleteTag();
            }
        },

        _saveTagProperty(propKey, newValue) {
            let tag = this.get('tag');
            let isNewTag = tag.get('isNew');
            let currentValue = tag.get(propKey);

            if (newValue) {
                newValue = newValue.trim();
            }

            // Quit if there was no change
            if (newValue === currentValue) {
                return;
            }

            tag.set(propKey, newValue);
            // TODO: This is required until .validate/.save mark fields as validated
            tag.get('hasValidated').addObject(propKey);

            tag.save().then(savedTag => {
                // replace 'new' route with 'tag' route
                this.replaceRoute('settings.tags.tag', savedTag);

                // update the URL if the slug changed
                if (propKey === 'slug' && !isNewTag) {
                    let currentPath = window.location.hash;

                    let newPath = currentPath.split('/');
                    newPath[newPath.length - 1] = savedTag.get('slug');
                    newPath = newPath.join('/');

                    _windowProxy.default.replaceState({ path: newPath }, '', newPath);
                }
            }).catch(error => {
                if (error) {
                    this.get('notifications').showAPIError(error, { key: 'tag.save' });
                }
            });
        },

        _deleteTag() {
            let tag = this.get('tag');

            return tag.destroyRecord().then(() => {
                this._deleteTagSuccess();
            }, error => {
                this._deleteTagFailure(error);
            });
        },

        _deleteTagSuccess() {
            let currentRoute = this.get('applicationController.currentRouteName') || '';

            if (currentRoute.match(/^settings\.tags/)) {
                this.transitionToRoute('settings.tags.index');
            }
        },

        _deleteTagFailure(error) {
            this.get('notifications').showAPIError(error, { key: 'tag.delete' });
        }
    });
});
define('ghost-admin/controllers/setup', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Controller.extend({
        appController: Ember.inject.controller('application'),
        ghostPaths: Ember.inject.service(),

        showBackLink: Ember.computed.match('appController.currentRouteName', /^setup\.(two|three)$/),

        backRoute: Ember.computed('appController.currentRouteName', function () {
            let currentRoute = this.get('appController.currentRouteName');

            return currentRoute === 'setup.two' ? 'setup.one' : 'setup.two';
        })
    });
});
define('ghost-admin/controllers/setup/three', ['exports', 'ember-data', 'npm:validator', 'ember-ajax/errors', 'ember-concurrency'], function (exports, _emberData, _npmValidator, _errors, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    const Errors = _emberData.default.Errors;
    exports.default = Ember.Controller.extend({
        two: Ember.inject.controller('setup/two'),
        notifications: Ember.inject.service(),

        users: '',

        errors: Errors.create(),
        hasValidated: Ember.A(),
        ownerEmail: Ember.computed.alias('two.email'),

        usersArray: Ember.computed('users', function () {
            let errors = this.get('errors');
            let users = this.get('users').split('\n').filter(function (email) {
                return email.trim().length > 0;
            });

            // remove "no users to invite" error if we have users
            if (users.uniq().length > 0 && errors.get('users.length') === 1) {
                if (errors.get('users.firstObject').message.match(/no users/i)) {
                    errors.remove('users');
                }
            }

            return users.uniq();
        }),

        validUsersArray: Ember.computed('usersArray', 'ownerEmail', function () {
            let ownerEmail = this.get('ownerEmail');

            return this.get('usersArray').filter(function (user) {
                return _npmValidator.default.isEmail(user || '') && user !== ownerEmail;
            });
        }),

        invalidUsersArray: Ember.computed('usersArray', 'ownerEmail', function () {
            let ownerEmail = this.get('ownerEmail');

            return this.get('usersArray').reject(user => _npmValidator.default.isEmail(user || '') || user === ownerEmail);
        }),

        validationResult: Ember.computed('invalidUsersArray', function () {
            let errors = [];

            this.get('invalidUsersArray').forEach(user => {
                errors.push({
                    user,
                    error: 'email'
                });
            });

            if (errors.length === 0) {
                // ensure we aren't highlighting fields when everything is fine
                this.get('errors').clear();
                return true;
            } else {
                return errors;
            }
        }),

        buttonText: Ember.computed('errors.users', 'validUsersArray', 'invalidUsersArray', function () {
            let usersError = this.get('errors.users.firstObject.message');
            let validNum = this.get('validUsersArray').length;
            let invalidNum = this.get('invalidUsersArray').length;
            let userCount;

            if (usersError && usersError.match(/no users/i)) {
                return usersError;
            }

            if (invalidNum > 0) {
                userCount = invalidNum === 1 ? 'email address' : 'email addresses';
                return `${invalidNum} invalid ${userCount}`;
            }

            if (validNum > 0) {
                userCount = validNum === 1 ? 'user' : 'users';
                userCount = `${validNum} ${userCount}`;
            } else {
                userCount = 'some users';
            }

            return `Invite ${userCount}`;
        }),

        buttonClass: Ember.computed('validationResult', 'usersArray.length', function () {
            if (this.get('validationResult') === true && this.get('usersArray.length') > 0) {
                return 'gh-btn-green';
            } else {
                return 'gh-btn-minor';
            }
        }),

        authorRole: Ember.computed(function () {
            return this.store.findAll('role', { reload: true }).then(roles => roles.findBy('name', 'Author'));
        }),

        actions: {
            validate() {
                this.validate();
            },

            invite() {
                this.get('invite').perform();
            },

            skipInvite() {
                this.send('loadServerNotifications');
                this.transitionToRoute('posts.index');
            }
        },

        validate() {
            let errors = this.get('errors');
            let validationResult = this.get('validationResult');
            let property = 'users';

            errors.clear();

            // If property isn't in the `hasValidated` array, add it to mark that this field can show a validation result
            this.get('hasValidated').addObject(property);

            if (validationResult === true) {
                return true;
            }

            validationResult.forEach(error => {
                // Only one error type here so far, but one day the errors might be more detailed
                switch (error.error) {
                    case 'email':
                        errors.add(property, `${error.user} is not a valid email.`);
                }
            });

            return false;
        },

        _transitionAfterSubmission() {
            if (!this._hasTransitioned) {
                this._hasTransitioned = true;
                this.transitionToRoute('posts.index');
            }
        },

        invite: (0, _emberConcurrency.task)(function* () {
            let users = this.get('validUsersArray');

            if (this.validate() && users.length > 0) {
                this._hasTransitioned = false;

                this.get('_slowSubmissionTimeout').perform();

                let authorRole = yield this.get('authorRole');
                let invites = yield this._saveInvites(authorRole);

                this.get('_slowSubmissionTimeout').cancelAll();

                this._showNotifications(invites);

                Ember.run.schedule('actions', this, function () {
                    this.send('loadServerNotifications');
                    this._transitionAfterSubmission();
                });
            } else if (users.length === 0) {
                this.get('errors').add('users', 'No users to invite');
            }
        }).drop(),

        _slowSubmissionTimeout: (0, _emberConcurrency.task)(function* () {
            yield (0, _emberConcurrency.timeout)(4000);
            this._transitionAfterSubmission();
        }).drop(),

        _saveInvites(authorRole) {
            let users = this.get('validUsersArray');

            return Ember.RSVP.Promise.all(users.map(user => {
                let invite = this.store.createRecord('invite', {
                    email: user,
                    role: authorRole
                });

                return invite.save().then(() => ({
                    email: user,
                    success: invite.get('status') === 'sent'
                })).catch(error => ({
                    error,
                    email: user,
                    success: false
                }));
            }));
        },

        _showNotifications(invites) {
            let notifications = this.get('notifications');
            let erroredEmails = [];
            let successCount = 0;
            let invitationsString, message;

            invites.forEach(invite => {
                if (invite.success) {
                    successCount += 1;
                } else if ((0, _errors.isInvalidError)(invite.error)) {
                    message = `${invite.email} was invalid: ${invite.error.payload.errors[0].message}`;
                    notifications.showAlert(message, { type: 'error', delayed: true, key: `signup.send-invitations.${invite.email}` });
                } else {
                    erroredEmails.push(invite.email);
                }
            });

            if (erroredEmails.length > 0) {
                invitationsString = erroredEmails.length > 1 ? ' invitations: ' : ' invitation: ';
                message = `Failed to send ${erroredEmails.length} ${invitationsString}`;
                message += erroredEmails.join(', ');
                message += '. Please check your email configuration, see <a href=\'https://docs.ghost.org/docs/mail-config\' target=\'_blank\'>https://docs.ghost.org/v1.0.0/docs/mail-config</a> for instructions';

                message = Ember.String.htmlSafe(message);
                notifications.showAlert(message, { type: 'error', delayed: successCount > 0, key: 'signup.send-invitations.failed' });
            }

            if (successCount > 0) {
                // pluralize
                invitationsString = successCount > 1 ? 'invitations' : 'invitation';
                notifications.showAlert(`${successCount} ${invitationsString} sent!`, { type: 'success', delayed: true, key: 'signup.send-invitations.success' });
            }
        }
    });
});
define('ghost-admin/controllers/setup/two', ['exports', 'ghost-admin/mixins/validation-engine', 'ember-ajax/errors', 'ghost-admin/services/ajax', 'ember-concurrency'], function (exports, _validationEngine, _errors, _ajax, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Controller.extend(_validationEngine.default, {
        application: Ember.inject.controller(),
        ajax: Ember.inject.service(),
        config: Ember.inject.service(),
        ghostPaths: Ember.inject.service(),
        notifications: Ember.inject.service(),
        session: Ember.inject.service(),
        settings: Ember.inject.service(),

        // ValidationEngine settings
        validationType: 'setup',

        blogCreated: false,
        blogTitle: null,
        email: '',
        flowErrors: '',
        profileImage: null,
        name: null,
        password: null,

        actions: {
            setup() {
                this.get('setup').perform();
            },

            preValidate(model) {
                // Only triggers validation if a value has been entered, preventing empty errors on focusOut
                if (this.get(model)) {
                    return this.validate({ property: model });
                }
            },

            setImage(image) {
                this.set('profileImage', image);
            }
        },

        setup: (0, _emberConcurrency.task)(function* () {
            return yield this._passwordSetup();
        }),

        authenticate: (0, _emberConcurrency.task)(function* (authStrategy, authentication) {
            // we don't want to redirect after sign-in during setup
            this.set('session.skipAuthSuccessHandler', true);

            try {
                let authResult = yield this.get('session').authenticate(authStrategy, ...authentication);

                this.get('errors').remove('session');

                return authResult;
            } catch (error) {
                if (error && error.payload && error.payload.errors) {
                    if ((0, _ajax.isVersionMismatchError)(error)) {
                        return this.get('notifications').showAPIError(error);
                    }

                    error.payload.errors.forEach(err => {
                        err.message = err.message.htmlSafe();
                    });

                    this.set('flowErrors', error.payload.errors[0].message.string);
                } else {
                    // Connection errors don't return proper status message, only req.body
                    this.get('notifications').showAlert('There was a problem on the server.', { type: 'error', key: 'session.authenticate.failed' });
                }
            }
        }),

        /**
         * Uploads the given data image, then sends the changed user image property to the server
         * @param  {Object} user User object, returned from the 'setup' api call
         * @return {RSVP.Promise} A promise that takes care of both calls
         */
        _sendImage(user) {
            let formData = new FormData();
            let imageFile = this.get('profileImage');
            let uploadUrl = this.get('ghostPaths.url').api('uploads');

            formData.append('uploadimage', imageFile, imageFile.name);

            return this.get('ajax').post(uploadUrl, {
                data: formData,
                processData: false,
                contentType: false,
                dataType: 'text'
            }).then(response => {
                let imageUrl = JSON.parse(response);
                let usersUrl = this.get('ghostPaths.url').api('users', user.id.toString());
                user.profile_image = imageUrl;

                return this.get('ajax').put(usersUrl, {
                    data: {
                        users: [user]
                    }
                });
            });
        },

        _passwordSetup() {
            let setupProperties = ['blogTitle', 'name', 'email', 'password'];
            let data = this.getProperties(setupProperties);
            let config = this.get('config');
            let method = this.get('blogCreated') ? 'put' : 'post';

            this.set('flowErrors', '');

            this.get('hasValidated').addObjects(setupProperties);

            return this.validate().then(() => {
                let authUrl = this.get('ghostPaths.url').api('authentication', 'setup');

                return this.get('ajax')[method](authUrl, {
                    data: {
                        setup: [{
                            name: data.name,
                            email: data.email,
                            password: data.password,
                            blogTitle: data.blogTitle
                        }]
                    }
                }).then(result => {
                    config.set('blogTitle', data.blogTitle);

                    // don't try to login again if we are already logged in
                    if (this.get('session.isAuthenticated')) {
                        return this._afterAuthentication(result);
                    }

                    // Don't call the success handler, otherwise we will be redirected to admin
                    this.set('session.skipAuthSuccessHandler', true);

                    return this.get('session').authenticate('authenticator:oauth2', this.get('email'), this.get('password')).then(() => {
                        this.set('blogCreated', true);
                        return this._afterAuthentication(result);
                    }).catch(error => {
                        this._handleAuthenticationError(error);
                    }).finally(() => {
                        this.set('session.skipAuthSuccessHandler', undefined);
                    });
                }).catch(error => {
                    this._handleSaveError(error);
                });
            }).catch(() => {
                this.set('flowErrors', 'Please fill out the form to setup your blog.');
            });
        },

        _handleSaveError(resp) {
            if ((0, _errors.isInvalidError)(resp)) {
                this.set('flowErrors', resp.payload.errors[0].message);
            } else {
                this.get('notifications').showAPIError(resp, { key: 'setup.blog-details' });
            }
        },

        _handleAuthenticationError(error) {
            if (error && error.payload && error.payload.errors) {
                this.set('flowErrors', error.payload.errors[0].message);
            } else {
                // Connection errors don't return proper status message, only req.body
                this.get('notifications').showAlert('There was a problem on the server.', { type: 'error', key: 'setup.authenticate.failed' });
            }
        },

        _afterAuthentication(result) {
            // fetch settings and private config for synchronous access before transitioning
            let fetchSettingsAndConfig = Ember.RSVP.all([this.get('settings').fetch(), this.get('config').fetchPrivate()]);

            if (this.get('profileImage')) {
                return this._sendImage(result.users[0]).then(() => fetchSettingsAndConfig).then(() => this.transitionToRoute('setup.three')).catch(resp => {
                    this.get('notifications').showAPIError(resp, { key: 'setup.blog-details' });
                });
            } else {
                return fetchSettingsAndConfig.then(() => this.transitionToRoute('setup.three'));
            }
        }
    });
});
define('ghost-admin/controllers/signin', ['exports', 'ghost-admin/mixins/validation-engine', 'ghost-admin/services/ajax', 'ember-concurrency'], function (exports, _validationEngine, _ajax, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    exports.default = Ember.Controller.extend(_validationEngine.default, {
        application: Ember.inject.controller(),
        ajax: Ember.inject.service(),
        config: Ember.inject.service(),
        ghostPaths: Ember.inject.service(),
        notifications: Ember.inject.service(),
        session: Ember.inject.service(),
        settings: Ember.inject.service(),

        submitting: false,
        loggingIn: false,
        authProperties: null,

        flowErrors: '',
        // ValidationEngine settings
        validationType: 'signin',

        init() {
            this._super(...arguments);
            this.authProperties = ['identification', 'password'];
        },

        signin: Ember.computed.alias('model'),

        actions: {
            authenticate() {
                this.get('validateAndAuthenticate').perform();
            }
        },

        authenticate: (0, _emberConcurrency.task)(function* (authStrategy, authentication) {
            try {
                let authResult = yield this.get('session').authenticate(authStrategy, ...authentication);
                let promises = [];

                promises.pushObject(this.get('settings').fetch());
                promises.pushObject(this.get('config').fetchPrivate());

                // fetch settings and private config for synchronous access
                yield Ember.RSVP.all(promises);

                return authResult;
            } catch (error) {
                if ((0, _ajax.isVersionMismatchError)(error)) {
                    return this.get('notifications').showAPIError(error);
                }

                if (error && error.payload && error.payload.errors) {
                    error.payload.errors.forEach(err => {
                        err.message = err.message.htmlSafe();
                    });

                    this.set('flowErrors', error.payload.errors[0].message.string);

                    if (error.payload.errors[0].message.string.match(/user with that email/)) {
                        this.get('signin.errors').add('identification', '');
                    }

                    if (error.payload.errors[0].message.string.match(/password is incorrect/)) {
                        this.get('signin.errors').add('password', '');
                    }
                } else {
                    // Connection errors don't return proper status message, only req.body
                    this.get('notifications').showAlert('There was a problem on the server.', { type: 'error', key: 'session.authenticate.failed' });
                }
            }
        }).drop(),

        validateAndAuthenticate: (0, _emberConcurrency.task)(function* () {
            let signin = this.get('signin');
            let authStrategy = 'authenticator:oauth2';

            this.set('flowErrors', '');
            // Manually trigger events for input fields, ensuring legacy compatibility with
            // browsers and password managers that don't send proper events on autofill
            Ember.$('#login').find('input').trigger('change');

            // This is a bit dirty, but there's no other way to ensure the properties are set as well as 'signin'
            this.get('hasValidated').addObjects(this.authProperties);

            try {
                yield this.validate({ property: 'signin' });
                return yield this.get('authenticate').perform(authStrategy, [signin.get('identification'), signin.get('password')]);
            } catch (error) {
                this.set('flowErrors', 'Please fill out the form to sign in.');
            }
        }).drop(),

        forgotten: (0, _emberConcurrency.task)(function* () {
            let email = this.get('signin.identification');
            let forgottenUrl = this.get('ghostPaths.url').api('authentication', 'passwordreset');
            let notifications = this.get('notifications');

            this.set('flowErrors', '');
            // This is a bit dirty, but there's no other way to ensure the properties are set as well as 'forgotPassword'
            this.get('hasValidated').addObject('identification');

            try {
                yield this.validate({ property: 'forgotPassword' });
                yield this.get('ajax').post(forgottenUrl, { data: { passwordreset: [{ email }] } });
                notifications.showAlert('Please check your email for instructions.', { type: 'info', key: 'forgot-password.send.success' });
                return true;
            } catch (error) {
                // ValidationEngine throws "undefined" for failed validation
                if (!error) {
                    return this.set('flowErrors', 'We need your email address to reset your password!');
                }

                if ((0, _ajax.isVersionMismatchError)(error)) {
                    return notifications.showAPIError(error);
                }

                if (error && error.payload && error.payload.errors && Ember.isArray(error.payload.errors)) {
                    var _error$payload$errors = _slicedToArray(error.payload.errors, 1);

                    let message = _error$payload$errors[0].message;


                    this.set('flowErrors', message);

                    if (message.match(/no user with that email/)) {
                        this.get('signin.errors').add('identification', '');
                    }
                } else {
                    notifications.showAPIError(error, { defaultErrorText: 'There was a problem with the reset, please try again.', key: 'forgot-password.send' });
                }
            }
        })
    });
});
define('ghost-admin/controllers/signup', ['exports', 'ghost-admin/mixins/validation-engine', 'ghost-admin/services/ajax', 'ember-concurrency'], function (exports, _validationEngine, _ajax, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Controller.extend(_validationEngine.default, {
        ajax: Ember.inject.service(),
        config: Ember.inject.service(),
        ghostPaths: Ember.inject.service(),
        notifications: Ember.inject.service(),
        session: Ember.inject.service(),
        settings: Ember.inject.service(),

        flowErrors: '',
        profileImage: null,

        // ValidationEngine settings
        validationType: 'signup',
        signupDetails: Ember.computed.alias('model'),

        actions: {
            signup() {
                this.get('signup').perform();
            },

            setImage(image) {
                this.set('profileImage', image);
            }
        },

        authenticate: (0, _emberConcurrency.task)(function* (authStrategy, authentication) {
            try {
                let authResult = yield this.get('session').authenticate(authStrategy, ...authentication);
                let promises = [];

                promises.pushObject(this.get('settings').fetch());
                promises.pushObject(this.get('config').fetchPrivate());

                // fetch settings and private config for synchronous access
                yield Ember.RSVP.all(promises);

                return authResult;
            } catch (error) {
                if (error && error.payload && error.payload.errors) {
                    // we don't get back an ember-data/ember-ajax error object
                    // back so we need to pass in a null status in order to
                    // test against the payload
                    if ((0, _ajax.isVersionMismatchError)(null, error)) {
                        let versionMismatchError = new _ajax.VersionMismatchError(error);
                        return this.get('notifications').showAPIError(versionMismatchError);
                    }

                    error.payload.errors.forEach(err => {
                        err.message = err.message.htmlSafe();
                    });

                    this.set('flowErrors', error.payload.errors[0].message.string);

                    if (error.payload.errors[0].message.string.match(/user with that email/)) {
                        this.get('signupDetails.errors').add('email', '');
                    }

                    if (error.payload.errors[0].message.string.match(/password is incorrect/)) {
                        this.get('signupDetails.errors').add('password', '');
                    }
                } else {
                    // Connection errors don't return proper status message, only req.body
                    this.get('notifications').showAlert('There was a problem on the server.', { type: 'error', key: 'session.authenticate.failed' });
                    throw error;
                }
            }
        }).drop(),

        signup: (0, _emberConcurrency.task)(function* () {
            let setupProperties = ['name', 'email', 'password', 'token'];
            let notifications = this.get('notifications');

            this.set('flowErrors', '');
            this.get('hasValidated').addObjects(setupProperties);

            try {
                yield this.validate();
                yield this._completeInvitation();

                try {
                    yield this._authenticateWithPassword();
                    yield this.get('_sendImage').perform();
                } catch (error) {
                    notifications.showAPIError(error, { key: 'signup.complete' });
                }
            } catch (error) {
                // ValidationEngine throws undefined
                if (!error) {
                    this.set('flowErrors', 'Please fill out the form to complete your sign-up');
                }

                if (error && error.payload && error.payload.errors && Ember.isArray(error.payload.errors)) {
                    if ((0, _ajax.isVersionMismatchError)(error)) {
                        notifications.showAPIError(error);
                    }
                    this.set('flowErrors', error.payload.errors[0].message);
                } else {
                    notifications.showAPIError(error, { key: 'signup.complete' });
                }
            }
        }),

        _completeInvitation() {
            let authUrl = this.get('ghostPaths.url').api('authentication', 'invitation');
            let signupDetails = this.get('signupDetails');

            return this.get('ajax').post(authUrl, {
                dataType: 'json',
                data: {
                    invitation: [{
                        name: signupDetails.get('name'),
                        email: signupDetails.get('email'),
                        password: signupDetails.get('password'),
                        token: signupDetails.get('token')
                    }]
                }
            });
        },

        _authenticateWithPassword() {
            let email = this.get('signupDetails.email');
            let password = this.get('signupDetails.password');

            return this.get('session').authenticate('authenticator:oauth2', email, password);
        },

        _sendImage: (0, _emberConcurrency.task)(function* () {
            let formData = new FormData();
            let imageFile = this.get('profileImage');
            let uploadUrl = this.get('ghostPaths.url').api('uploads');

            if (imageFile) {
                formData.append('uploadimage', imageFile, imageFile.name);

                let user = yield this.get('session.user');
                let response = yield this.get('ajax').post(uploadUrl, {
                    data: formData,
                    processData: false,
                    contentType: false,
                    dataType: 'text'
                });

                let imageUrl = JSON.parse(response);
                let usersUrl = this.get('ghostPaths.url').api('users', user.id.toString());

                user.profile_image = imageUrl;

                return yield this.get('ajax').put(usersUrl, {
                    data: {
                        users: [user]
                    }
                });
            }
        })
    });
});
define('ghost-admin/controllers/subscribers', ['exports', 'ghost-admin/mixins/pagination', 'ember-light-table', 'ghost-admin/utils/ghost-paths'], function (exports, _pagination, _emberLightTable, _ghostPaths) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Controller.extend(_pagination.default, {
        session: Ember.inject.service(),

        queryParams: ['order', 'direction'],
        order: 'created_at',
        direction: 'desc',

        paginationModel: 'subscriber',

        total: 0,
        table: null,
        subscriberToDelete: null,

        // paginationSettings is replaced by the pagination mixin so we need a
        // getter/setter CP here so that we don't lose the dynamic order param
        paginationSettings: Ember.computed('order', 'direction', {
            get() {
                let order = this.get('order');
                let direction = this.get('direction');

                let currentSettings = this._paginationSettings || {
                    limit: 30
                };

                return Ember.assign({}, currentSettings, {
                    order: `${order} ${direction}`
                });
            },
            set(key, value) {
                this._paginationSettings = value;
                return value;
            }
        }),

        columns: Ember.computed('order', 'direction', function () {
            let order = this.get('order');
            let direction = this.get('direction');

            return [{
                label: 'Email Address',
                valuePath: 'email',
                sorted: order === 'email',
                ascending: direction === 'asc',
                classNames: ['gh-subscribers-table-email-cell'],
                cellClassNames: ['gh-subscribers-table-email-cell']
            }, {
                label: 'Subscription Date',
                valuePath: 'createdAtUTC',
                format(value) {
                    return value.format('MMMM DD, YYYY');
                },
                sorted: order === 'created_at',
                ascending: direction === 'asc',
                classNames: ['gh-subscribers-table-date-cell'],
                cellClassNames: ['gh-subscribers-table-date-cell']
            }, {
                label: 'Status',
                valuePath: 'status',
                sorted: order === 'status',
                ascending: direction === 'asc',
                classNames: ['gh-subscribers-table-status-cell'],
                cellClassNames: ['gh-subscribers-table-status-cell']
            }, {
                label: '',
                sortable: false,
                cellComponent: 'gh-subscribers-table-delete-cell',
                align: 'right',
                classNames: ['gh-subscribers-table-delete-cell'],
                cellClassNames: ['gh-subscribers-table-delete-cell']
            }];
        }),

        actions: {
            loadFirstPage() {
                let table = this.get('table');

                return this._super(...arguments).then(results => {
                    table.addRows(results);
                    return results;
                });
            },

            loadNextPage() {
                let table = this.get('table');

                return this._super(...arguments).then(results => {
                    table.addRows(results);
                    return results;
                });
            },

            sortByColumn(column) {
                let table = this.get('table');

                if (column.sorted) {
                    this.setProperties({
                        order: column.get('valuePath').trim().replace(/UTC$/, '').underscore(),
                        direction: column.ascending ? 'asc' : 'desc'
                    });
                    table.setRows([]);
                    this.send('loadFirstPage');
                }
            },

            addSubscriber(subscriber) {
                this.get('table').insertRowAt(0, subscriber);
                this.incrementProperty('total');
            },

            deleteSubscriber(subscriber) {
                this.set('subscriberToDelete', subscriber);
            },

            confirmDeleteSubscriber() {
                let subscriber = this.get('subscriberToDelete');

                return subscriber.destroyRecord().then(() => {
                    this.set('subscriberToDelete', null);
                    this.get('table').removeRow(subscriber);
                    this.decrementProperty('total');
                });
            },

            cancelDeleteSubscriber() {
                this.set('subscriberToDelete', null);
            },

            reset() {
                this.get('table').setRows([]);
                this.send('loadFirstPage');
            },

            exportData() {
                let exportUrl = (0, _ghostPaths.default)().url.api('subscribers/csv');
                let accessToken = this.get('session.data.authenticated.access_token');
                let downloadURL = `${exportUrl}?access_token=${accessToken}`;
                let iframe = Ember.$('#iframeDownload');

                if (iframe.length === 0) {
                    iframe = Ember.$('<iframe>', { id: 'iframeDownload' }).hide().appendTo('body');
                }

                iframe.attr('src', downloadURL);
            }
        },

        initializeTable() {
            this.set('table', new _emberLightTable.default(this.get('columns'), this.get('subscribers')));
        },

        // capture the total from the server any time we fetch a new page
        didReceivePaginationMeta(meta) {
            if (meta && meta.pagination) {
                this.set('total', meta.pagination.total);
            }
        }
    });
});
define('ghost-admin/controllers/team/index', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Controller.extend({
        session: Ember.inject.service(),

        showInviteUserModal: false,

        activeUsers: null,
        suspendedUsers: null,
        invites: null,

        inviteOrder: null,
        userOrder: null,

        init() {
            this._super(...arguments);
            this.inviteOrder = ['email'];
            this.userOrder = ['name', 'email'];
        },

        sortedInvites: Ember.computed.sort('filteredInvites', 'inviteOrder'),
        sortedActiveUsers: Ember.computed.sort('activeUsers', 'userOrder'),
        sortedSuspendedUsers: Ember.computed.sort('suspendedUsers', 'userOrder'),

        filteredInvites: Ember.computed('invites.@each.isNew', function () {
            return this.get('invites').filterBy('isNew', false);
        }),

        actions: {
            toggleInviteUserModal() {
                this.toggleProperty('showInviteUserModal');
            }
        }
    });
});
define('ghost-admin/controllers/team/user', ['exports', 'ghost-admin/utils/bound-one-way', 'ghost-admin/utils/isNumber', 'npm:validator', 'ghost-admin/utils/window-proxy', 'ember-concurrency'], function (exports, _boundOneWay, _isNumber, _npmValidator, _windowProxy, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    exports.default = Ember.Controller.extend({
        ajax: Ember.inject.service(),
        config: Ember.inject.service(),
        dropdown: Ember.inject.service(),
        ghostPaths: Ember.inject.service(),
        notifications: Ember.inject.service(),
        session: Ember.inject.service(),
        slugGenerator: Ember.inject.service(),

        leaveSettingsTransition: null,
        dirtyAttributes: false,
        showDeleteUserModal: false,
        showSuspendUserModal: false,
        showTransferOwnerModal: false,
        showUploadCoverModal: false,
        showUplaodImageModal: false,
        _scratchFacebook: null,
        _scratchTwitter: null,

        saveHandlers: (0, _emberConcurrency.taskGroup)().enqueue(),

        user: Ember.computed.alias('model'),
        currentUser: Ember.computed.alias('session.user'),

        email: Ember.computed.readOnly('user.email'),
        slugValue: (0, _boundOneWay.default)('user.slug'),

        canAssignRoles: Ember.computed.or('currentUser.isAdmin', 'currentUser.isOwner'),
        canChangeEmail: Ember.computed.not('isAdminUserOnOwnerProfile'),
        canChangePassword: Ember.computed.not('isAdminUserOnOwnerProfile'),
        canMakeOwner: Ember.computed.and('currentUser.isOwner', 'isNotOwnProfile', 'user.isAdmin'),
        isAdminUserOnOwnerProfile: Ember.computed.and('currentUser.isAdmin', 'user.isOwner'),
        isNotOwnersProfile: Ember.computed.not('user.isOwner'),
        rolesDropdownIsVisible: Ember.computed.and('isNotOwnProfile', 'canAssignRoles', 'isNotOwnersProfile'),
        userActionsAreVisible: Ember.computed.or('deleteUserActionIsVisible', 'canMakeOwner'),

        isNotOwnProfile: Ember.computed.not('isOwnProfile'),
        isOwnProfile: Ember.computed('user.id', 'currentUser.id', function () {
            return this.get('user.id') === this.get('currentUser.id');
        }),

        deleteUserActionIsVisible: Ember.computed('currentUser', 'canAssignRoles', 'user', function () {
            if (this.get('canAssignRoles') && this.get('isNotOwnProfile') && !this.get('user.isOwner') || this.get('currentUser.isEditor') && (this.get('isNotOwnProfile') || this.get('user.isAuthorOrContributor'))) {
                return true;
            }
        }),

        coverTitle: Ember.computed('user.name', function () {
            return `${this.get('user.name')}'s Cover Image`;
        }),

        roles: Ember.computed(function () {
            return this.store.query('role', { permissions: 'assign' });
        }),

        actions: {
            changeRole(newRole) {
                this.get('user').set('role', newRole);
                this.set('dirtyAttributes', true);
            },

            deleteUser() {
                return this._deleteUser().then(() => {
                    this._deleteUserSuccess();
                }, () => {
                    this._deleteUserFailure();
                });
            },

            toggleDeleteUserModal() {
                if (this.get('deleteUserActionIsVisible')) {
                    this.toggleProperty('showDeleteUserModal');
                }
            },

            suspendUser() {
                this.get('user').set('status', 'inactive');
                return this.get('save').perform();
            },

            toggleSuspendUserModal() {
                if (this.get('deleteUserActionIsVisible')) {
                    this.toggleProperty('showSuspendUserModal');
                }
            },

            unsuspendUser() {
                this.get('user').set('status', 'active');
                return this.get('save').perform();
            },

            toggleUnsuspendUserModal() {
                if (this.get('deleteUserActionIsVisible')) {
                    this.toggleProperty('showUnsuspendUserModal');
                }
            },

            validateFacebookUrl() {
                let newUrl = this.get('_scratchFacebook');
                let oldUrl = this.get('user.facebook');
                let errMessage = '';

                // reset errors and validation
                this.get('user.errors').remove('facebook');
                this.get('user.hasValidated').removeObject('facebook');

                if (newUrl === '') {
                    // Clear out the Facebook url
                    this.set('user.facebook', '');
                    return;
                }

                // _scratchFacebook will be null unless the user has input something
                if (!newUrl) {
                    newUrl = oldUrl;
                }

                try {
                    // strip any facebook URLs out
                    newUrl = newUrl.replace(/(https?:\/\/)?(www\.)?facebook\.com/i, '');

                    // don't allow any non-facebook urls
                    if (newUrl.match(/^(http|\/\/)/i)) {
                        throw 'invalid url';
                    }

                    // strip leading / if we have one then concat to full facebook URL
                    newUrl = newUrl.replace(/^\//, '');
                    newUrl = `https://www.facebook.com/${newUrl}`;

                    // don't allow URL if it's not valid
                    if (!_npmValidator.default.isURL(newUrl)) {
                        throw 'invalid url';
                    }

                    this.set('user.facebook', '');
                    Ember.run.schedule('afterRender', this, function () {
                        this.set('user.facebook', newUrl);
                    });
                } catch (e) {
                    if (e === 'invalid url') {
                        errMessage = 'The URL must be in a format like ' + 'https://www.facebook.com/yourPage';
                        this.get('user.errors').add('facebook', errMessage);
                        return;
                    }

                    throw e;
                } finally {
                    this.get('user.hasValidated').pushObject('facebook');
                }
            },

            validateTwitterUrl() {
                let newUrl = this.get('_scratchTwitter');
                let oldUrl = this.get('user.twitter');
                let errMessage = '';

                // reset errors and validation
                this.get('user.errors').remove('twitter');
                this.get('user.hasValidated').removeObject('twitter');

                if (newUrl === '') {
                    // Clear out the Twitter url
                    this.set('user.twitter', '');
                    return;
                }

                // _scratchTwitter will be null unless the user has input something
                if (!newUrl) {
                    newUrl = oldUrl;
                }

                if (newUrl.match(/(?:twitter\.com\/)(\S+)/) || newUrl.match(/([a-z\d.]+)/i)) {
                    let username = [];

                    if (newUrl.match(/(?:twitter\.com\/)(\S+)/)) {
                        var _newUrl$match = newUrl.match(/(?:twitter\.com\/)(\S+)/);

                        var _newUrl$match2 = _slicedToArray(_newUrl$match, 2);

                        username = _newUrl$match2[1];
                    } else {
                        var _newUrl$match3 = newUrl.match(/([^/]+)\/?$/mi);

                        var _newUrl$match4 = _slicedToArray(_newUrl$match3, 1);

                        username = _newUrl$match4[0];
                    }

                    // check if username starts with http or www and show error if so
                    if (username.match(/^(http|www)|(\/)/) || !username.match(/^[a-z\d._]{1,15}$/mi)) {
                        errMessage = !username.match(/^[a-z\d._]{1,15}$/mi) ? 'Your Username is not a valid Twitter Username' : 'The URL must be in a format like https://twitter.com/yourUsername';

                        this.get('user.errors').add('twitter', errMessage);
                        this.get('user.hasValidated').pushObject('twitter');
                        return;
                    }

                    newUrl = `https://twitter.com/${username}`;

                    this.get('user.hasValidated').pushObject('twitter');

                    this.set('user.twitter', '');
                    Ember.run.schedule('afterRender', this, function () {
                        this.set('user.twitter', newUrl);
                    });
                } else {
                    errMessage = 'The URL must be in a format like ' + 'https://twitter.com/yourUsername';
                    this.get('user.errors').add('twitter', errMessage);
                    this.get('user.hasValidated').pushObject('twitter');
                    return;
                }
            },

            transferOwnership() {
                let user = this.get('user');
                let url = this.get('ghostPaths.url').api('users', 'owner');

                this.get('dropdown').closeDropdowns();

                return this.get('ajax').put(url, {
                    data: {
                        owner: [{
                            id: user.get('id')
                        }]
                    }
                }).then(response => {
                    // manually update the roles for the users that just changed roles
                    // because store.pushPayload is not working with embedded relations
                    if (response && Ember.isArray(response.users)) {
                        response.users.forEach(userJSON => {
                            let user = this.store.peekRecord('user', userJSON.id);
                            let role = this.store.peekRecord('role', userJSON.roles[0].id);

                            user.set('role', role);
                        });
                    }

                    this.get('notifications').showAlert(`Ownership successfully transferred to ${user.get('name')}`, { type: 'success', key: 'owner.transfer.success' });
                }).catch(error => {
                    this.get('notifications').showAPIError(error, { key: 'owner.transfer' });
                });
            },

            toggleLeaveSettingsModal(transition) {
                let leaveTransition = this.get('leaveSettingsTransition');

                if (!transition && this.get('showLeaveSettingsModal')) {
                    this.set('leaveSettingsTransition', null);
                    this.set('showLeaveSettingsModal', false);
                    return;
                }

                if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
                    this.set('leaveSettingsTransition', transition);

                    // if a save is running, wait for it to finish then transition
                    if (this.get('saveHandlers.isRunning')) {
                        return this.get('saveHandlers.last').then(() => {
                            transition.retry();
                        });
                    }

                    // we genuinely have unsaved data, show the modal
                    this.set('showLeaveSettingsModal', true);
                }
            },

            leaveSettings() {
                let transition = this.get('leaveSettingsTransition');
                let user = this.get('user');

                if (!transition) {
                    this.get('notifications').showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', { type: 'error' });
                    return;
                }

                // roll back changes on user props
                user.rollbackAttributes();
                // roll back the slugValue property
                if (this.get('dirtyAttributes')) {
                    this.set('slugValue', user.get('slug'));
                    this.set('dirtyAttributes', false);
                }

                return transition.retry();
            },

            toggleTransferOwnerModal() {
                if (this.get('canMakeOwner')) {
                    this.toggleProperty('showTransferOwnerModal');
                }
            },

            toggleUploadCoverModal() {
                this.toggleProperty('showUploadCoverModal');
            },

            toggleUploadImageModal() {
                this.toggleProperty('showUploadImageModal');
            },

            // TODO: remove those mutation actions once we have better
            // inline validations that auto-clear errors on input
            updatePassword(password) {
                this.set('user.password', password);
                this.get('user.hasValidated').removeObject('password');
                this.get('user.errors').remove('password');
            },

            updateNewPassword(password) {
                this.set('user.newPassword', password);
                this.get('user.hasValidated').removeObject('newPassword');
                this.get('user.errors').remove('newPassword');
            },

            updateNe2Password(password) {
                this.set('user.ne2Password', password);
                this.get('user.hasValidated').removeObject('ne2Password');
                this.get('user.errors').remove('ne2Password');
            }
        },

        _deleteUser() {
            if (this.get('deleteUserActionIsVisible')) {
                let user = this.get('user');
                return user.destroyRecord();
            }
        },

        _deleteUserSuccess() {
            this.get('notifications').closeAlerts('user.delete');
            this.store.unloadAll('post');
            this.transitionToRoute('team');
        },

        _deleteUserFailure() {
            this.get('notifications').showAlert('The user could not be deleted. Please try again.', { type: 'error', key: 'user.delete.failed' });
        },

        updateSlug: (0, _emberConcurrency.task)(function* (newSlug) {
            let slug = this.get('user.slug');

            newSlug = newSlug || slug;
            newSlug = newSlug.trim();

            // Ignore unchanged slugs or candidate slugs that are empty
            if (!newSlug || slug === newSlug) {
                this.set('slugValue', slug);

                return true;
            }

            let serverSlug = yield this.get('slugGenerator').generateSlug('user', newSlug);

            // If after getting the sanitized and unique slug back from the API
            // we end up with a slug that matches the existing slug, abort the change
            if (serverSlug === slug) {
                return true;
            }

            // Because the server transforms the candidate slug by stripping
            // certain characters and appending a number onto the end of slugs
            // to enforce uniqueness, there are cases where we can get back a
            // candidate slug that is a duplicate of the original except for
            // the trailing incrementor (e.g., this-is-a-slug and this-is-a-slug-2)

            // get the last token out of the slug candidate and see if it's a number
            let slugTokens = serverSlug.split('-');
            let check = Number(slugTokens.pop());

            // if the candidate slug is the same as the existing slug except
            // for the incrementor then the existing slug should be used
            if ((0, _isNumber.default)(check) && check > 0) {
                if (slug === slugTokens.join('-') && serverSlug !== newSlug) {
                    this.set('slugValue', slug);

                    return true;
                }
            }

            this.set('slugValue', serverSlug);
            this.set('dirtyAttributes', true);

            return true;
        }).group('saveHandlers'),

        save: (0, _emberConcurrency.task)(function* () {
            let user = this.get('user');
            let slugValue = this.get('slugValue');
            let slugChanged;

            if (user.get('slug') !== slugValue) {
                slugChanged = true;
                user.set('slug', slugValue);
            }

            try {
                user = yield user.save({ format: false });

                // If the user's slug has changed, change the URL and replace
                // the history so refresh and back button still work
                if (slugChanged) {
                    let currentPath = window.location.hash;

                    let newPath = currentPath.split('/');
                    newPath[newPath.length - 1] = user.get('slug');
                    newPath = newPath.join('/');

                    _windowProxy.default.replaceState({ path: newPath }, '', newPath);
                }

                this.set('dirtyAttributes', false);
                this.get('notifications').closeAlerts('user.update');

                return user;
            } catch (error) {
                // validation engine returns undefined so we have to check
                // before treating the failure as an API error
                if (error) {
                    this.get('notifications').showAPIError(error, { key: 'user.update' });
                }
            }
        }).group('saveHandlers')
    });
});
define('ghost-admin/helpers/and', ['exports', 'ember-truth-helpers/helpers/and'], function (exports, _and) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _and.default;
    }
  });
  Object.defineProperty(exports, 'and', {
    enumerable: true,
    get: function () {
      return _and.and;
    }
  });
});
define('ghost-admin/helpers/app-version', ['exports', 'ghost-admin/config/environment', 'ember-cli-app-version/utils/regexp'], function (exports, _environment, _regexp) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.appVersion = appVersion;
  function appVersion(_, hash = {}) {
    const version = _environment.default.APP.version;
    // e.g. 1.0.0-alpha.1+4jds75hf

    // Allow use of 'hideSha' and 'hideVersion' For backwards compatibility
    let versionOnly = hash.versionOnly || hash.hideSha;
    let shaOnly = hash.shaOnly || hash.hideVersion;

    let match = null;

    if (versionOnly) {
      if (hash.showExtended) {
        match = version.match(_regexp.versionExtendedRegExp); // 1.0.0-alpha.1
      }
      // Fallback to just version
      if (!match) {
        match = version.match(_regexp.versionRegExp); // 1.0.0
      }
    }

    if (shaOnly) {
      match = version.match(_regexp.shaRegExp); // 4jds75hf
    }

    return match ? match[0] : version;
  }

  exports.default = Ember.Helper.helper(appVersion);
});
define('ghost-admin/helpers/append', ['exports', 'ember-composable-helpers/helpers/append'], function (exports, _append) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _append.default;
    }
  });
  Object.defineProperty(exports, 'append', {
    enumerable: true,
    get: function () {
      return _append.append;
    }
  });
});
define('ghost-admin/helpers/array', ['exports', 'ember-composable-helpers/helpers/array'], function (exports, _array) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _array.default;
    }
  });
  Object.defineProperty(exports, 'array', {
    enumerable: true,
    get: function () {
      return _array.array;
    }
  });
});
define('ghost-admin/helpers/assign', ['exports', 'ember-assign-helper/helpers/assign'], function (exports, _assign) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _assign.default;
    }
  });
  Object.defineProperty(exports, 'assign', {
    enumerable: true,
    get: function () {
      return _assign.assign;
    }
  });
});
define('ghost-admin/helpers/background-image-style', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.backgroundImageStyle = backgroundImageStyle;
    function backgroundImageStyle([url] /*, hash*/) {
        if (url) {
            let safeUrl = encodeURI(decodeURI(url));
            return Ember.String.htmlSafe(`background-image: url(${safeUrl});`);
        }

        return '';
    }

    exports.default = Ember.Helper.helper(backgroundImageStyle);
});
define('ghost-admin/helpers/camelize', ['exports', 'ember-cli-string-helpers/helpers/camelize'], function (exports, _camelize) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _camelize.default;
    }
  });
  Object.defineProperty(exports, 'camelize', {
    enumerable: true,
    get: function () {
      return _camelize.camelize;
    }
  });
});
define('ghost-admin/helpers/cancel-all', ['exports', 'ember-concurrency/helpers/cancel-all'], function (exports, _cancelAll) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _cancelAll.default;
    }
  });
  Object.defineProperty(exports, 'cancelAll', {
    enumerable: true,
    get: function () {
      return _cancelAll.cancelAll;
    }
  });
});
define('ghost-admin/helpers/capitalize', ['exports', 'ember-cli-string-helpers/helpers/capitalize'], function (exports, _capitalize) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _capitalize.default;
    }
  });
  Object.defineProperty(exports, 'capitalize', {
    enumerable: true,
    get: function () {
      return _capitalize.capitalize;
    }
  });
});
define('ghost-admin/helpers/chunk', ['exports', 'ember-composable-helpers/helpers/chunk'], function (exports, _chunk) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _chunk.default;
    }
  });
  Object.defineProperty(exports, 'chunk', {
    enumerable: true,
    get: function () {
      return _chunk.chunk;
    }
  });
});
define('ghost-admin/helpers/classify', ['exports', 'ember-cli-string-helpers/helpers/classify'], function (exports, _classify) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _classify.default;
    }
  });
  Object.defineProperty(exports, 'classify', {
    enumerable: true,
    get: function () {
      return _classify.classify;
    }
  });
});
define('ghost-admin/helpers/clean-basic-html', ['exports', 'koenig-editor/helpers/clean-basic-html'], function (exports, _cleanBasicHtml) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _cleanBasicHtml.default;
    }
  });
  Object.defineProperty(exports, 'cleanBasicHtml', {
    enumerable: true,
    get: function () {
      return _cleanBasicHtml.cleanBasicHtml;
    }
  });
});
define('ghost-admin/helpers/compact', ['exports', 'ember-composable-helpers/helpers/compact'], function (exports, _compact) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _compact.default;
    }
  });
  Object.defineProperty(exports, 'compact', {
    enumerable: true,
    get: function () {
      return _compact.compact;
    }
  });
});
define('ghost-admin/helpers/compute', ['exports', 'ember-composable-helpers/helpers/compute'], function (exports, _compute) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _compute.default;
    }
  });
  Object.defineProperty(exports, 'compute', {
    enumerable: true,
    get: function () {
      return _compute.compute;
    }
  });
});
define('ghost-admin/helpers/contains', ['exports', 'ember-composable-helpers/helpers/contains'], function (exports, _contains) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _contains.default;
    }
  });
  Object.defineProperty(exports, 'contains', {
    enumerable: true,
    get: function () {
      return _contains.contains;
    }
  });
});
define('ghost-admin/helpers/dasherize', ['exports', 'ember-cli-string-helpers/helpers/dasherize'], function (exports, _dasherize) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _dasherize.default;
    }
  });
  Object.defineProperty(exports, 'dasherize', {
    enumerable: true,
    get: function () {
      return _dasherize.dasherize;
    }
  });
});
define('ghost-admin/helpers/dec', ['exports', 'ember-composable-helpers/helpers/dec'], function (exports, _dec) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _dec.default;
    }
  });
  Object.defineProperty(exports, 'dec', {
    enumerable: true,
    get: function () {
      return _dec.dec;
    }
  });
});
define('ghost-admin/helpers/drop', ['exports', 'ember-composable-helpers/helpers/drop'], function (exports, _drop) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _drop.default;
    }
  });
  Object.defineProperty(exports, 'drop', {
    enumerable: true,
    get: function () {
      return _drop.drop;
    }
  });
});
define('ghost-admin/helpers/ember-power-select-is-group', ['exports', 'ember-power-select/helpers/ember-power-select-is-group'], function (exports, _emberPowerSelectIsGroup) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberPowerSelectIsGroup.default;
    }
  });
  Object.defineProperty(exports, 'emberPowerSelectIsGroup', {
    enumerable: true,
    get: function () {
      return _emberPowerSelectIsGroup.emberPowerSelectIsGroup;
    }
  });
});
define('ghost-admin/helpers/ember-power-select-is-selected', ['exports', 'ember-power-select/helpers/ember-power-select-is-selected'], function (exports, _emberPowerSelectIsSelected) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberPowerSelectIsSelected.default;
    }
  });
  Object.defineProperty(exports, 'emberPowerSelectIsSelected', {
    enumerable: true,
    get: function () {
      return _emberPowerSelectIsSelected.emberPowerSelectIsSelected;
    }
  });
});
define('ghost-admin/helpers/ember-power-select-true-string-if-present', ['exports', 'ember-power-select/helpers/ember-power-select-true-string-if-present'], function (exports, _emberPowerSelectTrueStringIfPresent) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberPowerSelectTrueStringIfPresent.default;
    }
  });
  Object.defineProperty(exports, 'emberPowerSelectTrueStringIfPresent', {
    enumerable: true,
    get: function () {
      return _emberPowerSelectTrueStringIfPresent.emberPowerSelectTrueStringIfPresent;
    }
  });
});
define('ghost-admin/helpers/eq', ['exports', 'ember-truth-helpers/helpers/equal'], function (exports, _equal) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _equal.default;
    }
  });
  Object.defineProperty(exports, 'equal', {
    enumerable: true,
    get: function () {
      return _equal.equal;
    }
  });
});
define('ghost-admin/helpers/filter-by', ['exports', 'ember-composable-helpers/helpers/filter-by'], function (exports, _filterBy) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _filterBy.default;
    }
  });
  Object.defineProperty(exports, 'filterBy', {
    enumerable: true,
    get: function () {
      return _filterBy.filterBy;
    }
  });
});
define('ghost-admin/helpers/filter', ['exports', 'ember-composable-helpers/helpers/filter'], function (exports, _filter) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _filter.default;
    }
  });
  Object.defineProperty(exports, 'filter', {
    enumerable: true,
    get: function () {
      return _filter.filter;
    }
  });
});
define('ghost-admin/helpers/find-by', ['exports', 'ember-composable-helpers/helpers/find-by'], function (exports, _findBy) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _findBy.default;
    }
  });
  Object.defineProperty(exports, 'findBy', {
    enumerable: true,
    get: function () {
      return _findBy.findBy;
    }
  });
});
define('ghost-admin/helpers/flatten', ['exports', 'ember-composable-helpers/helpers/flatten'], function (exports, _flatten) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _flatten.default;
    }
  });
  Object.defineProperty(exports, 'flatten', {
    enumerable: true,
    get: function () {
      return _flatten.flatten;
    }
  });
});
define('ghost-admin/helpers/gh-count-characters', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.countCharacters = countCharacters;
    function countCharacters(params) {
        if (!params || !params.length) {
            return;
        }

        let el = document.createElement('span');
        let content = params[0] || '';

        // convert to array so that we get accurate symbol counts for multibyte chars
        // this will still count emoji+modifer as two chars

        var _Array$from = Array.from(content);

        let length = _Array$from.length;


        el.className = 'word-count';

        if (length > 180) {
            el.style.color = '#f05230';
        } else {
            el.style.color = '#738a94';
        }

        el.innerHTML = 200 - length;

        return Ember.String.htmlSafe(el.outerHTML);
    }

    exports.default = Ember.Helper.helper(function (params) {
        return countCharacters(params);
    });
});
define('ghost-admin/helpers/gh-count-down-characters', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.countDownCharacters = countDownCharacters;

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    function countDownCharacters(params) {
        if (!params || params.length < 2) {
            return;
        }

        let el = document.createElement('span');

        var _params = _slicedToArray(params, 2);

        let content = _params[0],
            maxCharacters = _params[1];

        var _Array$from = Array.from(content || '');

        let length = _Array$from.length;


        el.className = 'word-count';

        if (length > maxCharacters) {
            el.style.color = '#E25440';
        } else {
            el.style.color = '#9FBB58';
        }

        el.innerHTML = length;

        return Ember.String.htmlSafe(el.outerHTML);
    }

    exports.default = Ember.Helper.helper(function (params) {
        return countDownCharacters(params);
    });
});
define('ghost-admin/helpers/gh-format-html', ['exports', 'ghost-admin/utils/caja-sanitizers'], function (exports, _cajaSanitizers) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Helper.helper(function (params) {
        if (!params || !params.length) {
            return;
        }

        let escapedhtml = params[0] || '';

        // replace script and iFrame
        escapedhtml = escapedhtml.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '<pre class="js-embed-placeholder">Embedded JavaScript</pre>');
        escapedhtml = escapedhtml.replace(/<iframe\b[^<]*(?:(?!<\/iframe>)<[^<]*)*<\/iframe>/gi, '<pre class="iframe-embed-placeholder">Embedded iFrame</pre>');

        // sanitize HTML
        /* eslint-disable camelcase */
        escapedhtml = html_sanitize(escapedhtml, _cajaSanitizers.default.url, _cajaSanitizers.default.id);
        /* eslint-enable camelcase */

        return Ember.String.htmlSafe(escapedhtml);
    });
});
define('ghost-admin/helpers/gh-format-post-time', ['exports', 'moment'], function (exports, _moment) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Helper.extend({
        settings: Ember.inject.service(),

        compute([timeago], { draft, scheduled, published }) {
            (true && !('You must pass a time to the gh-format-post-time helper') && Ember.assert(timeago, 'You must pass a time to the gh-format-post-time helper'));


            if (draft) {
                // No special handling for drafts, just use moment.from
                return (0, _moment.default)(timeago).from(_moment.default.utc());
            }

            let timezone = this.get('settings.activeTimezone');
            let time = _moment.default.tz(timeago, timezone);
            let now = _moment.default.tz(_moment.default.utc(), timezone);

            // If not a draft and post was published <= 15 minutes ago
            // or scheduled to be published <= 15 minutes from now, use moment.from
            if (Math.abs(now.diff(time, 'minutes')) <= 15) {
                return time.from(now);
            }

            // If scheduled for or published on the same day, render the time + Today
            if (time.isSame(now, 'day')) {
                let formatted = time.format('HH:mm [Today]');
                return scheduled ? `at ${formatted}` : formatted;
            }

            // if published yesterday, render time + yesterday
            // This check comes before scheduled, because there are likely to be more published
            // posts than scheduled posts.
            if (published && time.isSame(now.clone().subtract(1, 'days').startOf('day'), 'day')) {
                return time.format('HH:mm [Yesterday]');
            }

            // if scheduled for tomorrow, render the time + Tomorrow
            if (scheduled && time.isSame(now.clone().add(1, 'days').startOf('day'), 'day')) {
                return time.format('[at] HH:mm [Tomorrow]');
            }

            // Else, render just the date if published, or the time & date if scheduled
            let format = scheduled ? '[at] HH:mm [on] DD MMM YYYY' : 'DD MMM YYYY';
            return time.format(format);
        }
    });
});
define('ghost-admin/helpers/gh-path', ['exports', 'ghost-admin/utils/ghost-paths'], function (exports, _ghostPaths) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    exports.default = Ember.Helper.helper(function (params) {
        let paths = (0, _ghostPaths.default)();

        var _params = _slicedToArray(params, 2);

        let path = _params[0],
            url = _params[1];

        let base;

        if (!path) {
            path = 'blog';
        }

        if (!/^(blog|admin|asset|api)$/.test(path)) {
            url = path;
            path = 'blog';
        }

        switch (path.toString()) {
            case 'blog':
                base = paths.blogRoot;
                break;
            case 'admin':
                base = paths.adminRoot;
                break;
            case 'asset':
                base = paths.assetRoot;
                break;
            case 'api':
                base = paths.apiRoot;
                break;
            default:
                base = paths.blogRoot;
                break;
        }

        // handle leading and trailing slashes

        base = base[base.length - 1] !== '/' ? `${base}/` : base;

        if (url && url.length > 0) {
            if (url[0] === '/') {
                url = url.substr(1);
            }

            base = base + url;
        }

        return Ember.String.htmlSafe(base);
    });
});
define('ghost-admin/helpers/gh-user-can-admin', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.ghUserCanAdmin = ghUserCanAdmin;


    // Handlebars Helper {{gh-user-can-admin}} group users by admin and owner using if, or group them author using unless
    // Usage: call helper as with aparameter of session.user
    // e.g - {{#if (gh-user-can-admin session.user)}} 'block content' {{/if}}
    // @param session.user

    function ghUserCanAdmin(params) {
        return !!(params[0].get('isOwner') || params[0].get('isAdmin'));
    }

    exports.default = Ember.Helper.helper(function (params) {
        return ghUserCanAdmin(params);
    });
});
define('ghost-admin/helpers/group-by', ['exports', 'ember-composable-helpers/helpers/group-by'], function (exports, _groupBy) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _groupBy.default;
    }
  });
  Object.defineProperty(exports, 'groupBy', {
    enumerable: true,
    get: function () {
      return _groupBy.groupBy;
    }
  });
});
define('ghost-admin/helpers/gt', ['exports', 'ember-truth-helpers/helpers/gt'], function (exports, _gt) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _gt.default;
    }
  });
  Object.defineProperty(exports, 'gt', {
    enumerable: true,
    get: function () {
      return _gt.gt;
    }
  });
});
define('ghost-admin/helpers/gte', ['exports', 'ember-truth-helpers/helpers/gte'], function (exports, _gte) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _gte.default;
    }
  });
  Object.defineProperty(exports, 'gte', {
    enumerable: true,
    get: function () {
      return _gte.gte;
    }
  });
});
define('ghost-admin/helpers/has-next', ['exports', 'ember-composable-helpers/helpers/has-next'], function (exports, _hasNext) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _hasNext.default;
    }
  });
  Object.defineProperty(exports, 'hasNext', {
    enumerable: true,
    get: function () {
      return _hasNext.hasNext;
    }
  });
});
define('ghost-admin/helpers/has-previous', ['exports', 'ember-composable-helpers/helpers/has-previous'], function (exports, _hasPrevious) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _hasPrevious.default;
    }
  });
  Object.defineProperty(exports, 'hasPrevious', {
    enumerable: true,
    get: function () {
      return _hasPrevious.hasPrevious;
    }
  });
});
define('ghost-admin/helpers/highlighted-text', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.highlightedText = highlightedText;
    function highlightedText([text, termToHighlight]) {
        // replace any non-word character with an escaped character
        let sanitisedTerm = termToHighlight.replace(new RegExp(/\W/ig), '\\$&');

        return Ember.String.htmlSafe(text.replace(new RegExp(sanitisedTerm, 'ig'), '<span class="highlight">$&</span>'));
    }

    exports.default = Ember.Helper.helper(highlightedText);
});
define('ghost-admin/helpers/html-safe', ['exports', 'ember-cli-string-helpers/helpers/html-safe'], function (exports, _htmlSafe) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _htmlSafe.default;
    }
  });
  Object.defineProperty(exports, 'htmlSafe', {
    enumerable: true,
    get: function () {
      return _htmlSafe.htmlSafe;
    }
  });
});
define('ghost-admin/helpers/humanize', ['exports', 'ember-cli-string-helpers/helpers/humanize'], function (exports, _humanize) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _humanize.default;
    }
  });
  Object.defineProperty(exports, 'humanize', {
    enumerable: true,
    get: function () {
      return _humanize.humanize;
    }
  });
});
define('ghost-admin/helpers/inc', ['exports', 'ember-composable-helpers/helpers/inc'], function (exports, _inc) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _inc.default;
    }
  });
  Object.defineProperty(exports, 'inc', {
    enumerable: true,
    get: function () {
      return _inc.inc;
    }
  });
});
define('ghost-admin/helpers/intersect', ['exports', 'ember-composable-helpers/helpers/intersect'], function (exports, _intersect) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _intersect.default;
    }
  });
  Object.defineProperty(exports, 'intersect', {
    enumerable: true,
    get: function () {
      return _intersect.intersect;
    }
  });
});
define('ghost-admin/helpers/invoke', ['exports', 'ember-composable-helpers/helpers/invoke'], function (exports, _invoke) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _invoke.default;
    }
  });
  Object.defineProperty(exports, 'invoke', {
    enumerable: true,
    get: function () {
      return _invoke.invoke;
    }
  });
});
define('ghost-admin/helpers/is-after', ['exports', 'ember-moment/helpers/is-after'], function (exports, _isAfter) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _isAfter.default;
    }
  });
});
define('ghost-admin/helpers/is-array', ['exports', 'ember-truth-helpers/helpers/is-array'], function (exports, _isArray) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _isArray.default;
    }
  });
  Object.defineProperty(exports, 'isArray', {
    enumerable: true,
    get: function () {
      return _isArray.isArray;
    }
  });
});
define('ghost-admin/helpers/is-before', ['exports', 'ember-moment/helpers/is-before'], function (exports, _isBefore) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _isBefore.default;
    }
  });
});
define('ghost-admin/helpers/is-between', ['exports', 'ember-moment/helpers/is-between'], function (exports, _isBetween) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _isBetween.default;
    }
  });
});
define('ghost-admin/helpers/is-empty', ['exports', 'ember-truth-helpers/helpers/is-empty'], function (exports, _isEmpty) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _isEmpty.default;
    }
  });
});
define('ghost-admin/helpers/is-equal', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.isEqual = isEqual;

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    function isEqual(params) {
        var _params = _slicedToArray(params, 2);

        let lhs = _params[0],
            rhs = _params[1];


        return lhs === rhs;
    }

    exports.default = Ember.Helper.helper(function (params) {
        return isEqual(params);
    });
});
define('ghost-admin/helpers/is-not', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.isNot = isNot;
    function isNot(params) {
        return !params;
    }

    exports.default = Ember.Helper.helper(function (params) {
        return isNot(params);
    });
});
define('ghost-admin/helpers/is-same-or-after', ['exports', 'ember-moment/helpers/is-same-or-after'], function (exports, _isSameOrAfter) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _isSameOrAfter.default;
    }
  });
});
define('ghost-admin/helpers/is-same-or-before', ['exports', 'ember-moment/helpers/is-same-or-before'], function (exports, _isSameOrBefore) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _isSameOrBefore.default;
    }
  });
});
define('ghost-admin/helpers/is-same', ['exports', 'ember-moment/helpers/is-same'], function (exports, _isSame) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _isSame.default;
    }
  });
});
define('ghost-admin/helpers/join', ['exports', 'ember-composable-helpers/helpers/join'], function (exports, _join) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _join.default;
    }
  });
  Object.defineProperty(exports, 'join', {
    enumerable: true,
    get: function () {
      return _join.join;
    }
  });
});
define('ghost-admin/helpers/kg-style', ['exports', 'ember-cli-ghost-spirit/helpers/kg-style'], function (exports, _kgStyle) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _kgStyle.default;
    }
  });
  Object.defineProperty(exports, 'kgStyle', {
    enumerable: true,
    get: function () {
      return _kgStyle.kgStyle;
    }
  });
});
define('ghost-admin/helpers/lf-lock-model', ['exports', 'liquid-fire/helpers/lf-lock-model'], function (exports, _lfLockModel) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _lfLockModel.default;
    }
  });
  Object.defineProperty(exports, 'lfLockModel', {
    enumerable: true,
    get: function () {
      return _lfLockModel.lfLockModel;
    }
  });
});
define('ghost-admin/helpers/lf-or', ['exports', 'liquid-fire/helpers/lf-or'], function (exports, _lfOr) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _lfOr.default;
    }
  });
  Object.defineProperty(exports, 'lfOr', {
    enumerable: true,
    get: function () {
      return _lfOr.lfOr;
    }
  });
});
define('ghost-admin/helpers/lowercase', ['exports', 'ember-cli-string-helpers/helpers/lowercase'], function (exports, _lowercase) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _lowercase.default;
    }
  });
  Object.defineProperty(exports, 'lowercase', {
    enumerable: true,
    get: function () {
      return _lowercase.lowercase;
    }
  });
});
define('ghost-admin/helpers/lt', ['exports', 'ember-truth-helpers/helpers/lt'], function (exports, _lt) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _lt.default;
    }
  });
  Object.defineProperty(exports, 'lt', {
    enumerable: true,
    get: function () {
      return _lt.lt;
    }
  });
});
define('ghost-admin/helpers/lte', ['exports', 'ember-truth-helpers/helpers/lte'], function (exports, _lte) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _lte.default;
    }
  });
  Object.defineProperty(exports, 'lte', {
    enumerable: true,
    get: function () {
      return _lte.lte;
    }
  });
});
define('ghost-admin/helpers/map-by', ['exports', 'ember-composable-helpers/helpers/map-by'], function (exports, _mapBy) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _mapBy.default;
    }
  });
  Object.defineProperty(exports, 'mapBy', {
    enumerable: true,
    get: function () {
      return _mapBy.mapBy;
    }
  });
});
define('ghost-admin/helpers/map', ['exports', 'ember-composable-helpers/helpers/map'], function (exports, _map) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _map.default;
    }
  });
  Object.defineProperty(exports, 'map', {
    enumerable: true,
    get: function () {
      return _map.map;
    }
  });
});
define('ghost-admin/helpers/moment-add', ['exports', 'ember-moment/helpers/moment-add'], function (exports, _momentAdd) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _momentAdd.default;
    }
  });
});
define('ghost-admin/helpers/moment-calendar', ['exports', 'ember-moment/helpers/moment-calendar'], function (exports, _momentCalendar) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _momentCalendar.default;
    }
  });
});
define('ghost-admin/helpers/moment-diff', ['exports', 'ember-moment/helpers/moment-diff'], function (exports, _momentDiff) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _momentDiff.default;
    }
  });
});
define('ghost-admin/helpers/moment-duration', ['exports', 'ember-moment/helpers/moment-duration'], function (exports, _momentDuration) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _momentDuration.default;
    }
  });
});
define('ghost-admin/helpers/moment-format', ['exports', 'ember-moment/helpers/moment-format'], function (exports, _momentFormat) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _momentFormat.default;
    }
  });
});
define('ghost-admin/helpers/moment-from-now', ['exports', 'ember-moment/helpers/moment-from-now'], function (exports, _momentFromNow) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _momentFromNow.default;
    }
  });
});
define('ghost-admin/helpers/moment-from', ['exports', 'ember-moment/helpers/moment-from'], function (exports, _momentFrom) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _momentFrom.default;
    }
  });
});
define('ghost-admin/helpers/moment-subtract', ['exports', 'ember-moment/helpers/moment-subtract'], function (exports, _momentSubtract) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _momentSubtract.default;
    }
  });
});
define('ghost-admin/helpers/moment-to-date', ['exports', 'ember-moment/helpers/moment-to-date'], function (exports, _momentToDate) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _momentToDate.default;
    }
  });
});
define('ghost-admin/helpers/moment-to-now', ['exports', 'ember-moment/helpers/moment-to-now'], function (exports, _momentToNow) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _momentToNow.default;
    }
  });
});
define('ghost-admin/helpers/moment-to', ['exports', 'ember-moment/helpers/moment-to'], function (exports, _momentTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _momentTo.default;
    }
  });
});
define('ghost-admin/helpers/moment-unix', ['exports', 'ember-moment/helpers/unix'], function (exports, _unix) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _unix.default;
    }
  });
});
define('ghost-admin/helpers/moment', ['exports', 'ember-moment/helpers/moment'], function (exports, _moment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _moment.default;
    }
  });
});
define('ghost-admin/helpers/next', ['exports', 'ember-composable-helpers/helpers/next'], function (exports, _next) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _next.default;
    }
  });
  Object.defineProperty(exports, 'next', {
    enumerable: true,
    get: function () {
      return _next.next;
    }
  });
});
define('ghost-admin/helpers/not-eq', ['exports', 'ember-truth-helpers/helpers/not-equal'], function (exports, _notEqual) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _notEqual.default;
    }
  });
  Object.defineProperty(exports, 'notEq', {
    enumerable: true,
    get: function () {
      return _notEqual.notEq;
    }
  });
});
define('ghost-admin/helpers/not', ['exports', 'ember-truth-helpers/helpers/not'], function (exports, _not) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _not.default;
    }
  });
  Object.defineProperty(exports, 'not', {
    enumerable: true,
    get: function () {
      return _not.not;
    }
  });
});
define('ghost-admin/helpers/now', ['exports', 'ember-moment/helpers/now'], function (exports, _now) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _now.default;
    }
  });
});
define('ghost-admin/helpers/object-at', ['exports', 'ember-composable-helpers/helpers/object-at'], function (exports, _objectAt) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _objectAt.default;
    }
  });
  Object.defineProperty(exports, 'objectAt', {
    enumerable: true,
    get: function () {
      return _objectAt.objectAt;
    }
  });
});
define('ghost-admin/helpers/one-way-select/contains', ['exports', 'ember-one-way-select/helpers/one-way-select/contains'], function (exports, _contains) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _contains.default;
    }
  });
  Object.defineProperty(exports, 'contains', {
    enumerable: true,
    get: function () {
      return _contains.contains;
    }
  });
});
define('ghost-admin/helpers/optional', ['exports', 'ember-composable-helpers/helpers/optional'], function (exports, _optional) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _optional.default;
    }
  });
  Object.defineProperty(exports, 'optional', {
    enumerable: true,
    get: function () {
      return _optional.optional;
    }
  });
});
define('ghost-admin/helpers/or', ['exports', 'ember-truth-helpers/helpers/or'], function (exports, _or) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _or.default;
    }
  });
  Object.defineProperty(exports, 'or', {
    enumerable: true,
    get: function () {
      return _or.or;
    }
  });
});
define('ghost-admin/helpers/perform', ['exports', 'ember-concurrency/helpers/perform'], function (exports, _perform) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _perform.default;
    }
  });
  Object.defineProperty(exports, 'perform', {
    enumerable: true,
    get: function () {
      return _perform.perform;
    }
  });
});
define('ghost-admin/helpers/pipe-action', ['exports', 'ember-composable-helpers/helpers/pipe-action'], function (exports, _pipeAction) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _pipeAction.default;
    }
  });
});
define('ghost-admin/helpers/pipe', ['exports', 'ember-composable-helpers/helpers/pipe'], function (exports, _pipe) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _pipe.default;
    }
  });
  Object.defineProperty(exports, 'pipe', {
    enumerable: true,
    get: function () {
      return _pipe.pipe;
    }
  });
});
define('ghost-admin/helpers/pluralize', ['exports', 'ember-inflector/lib/helpers/pluralize'], function (exports, _pluralize) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _pluralize.default;
});
define('ghost-admin/helpers/previous', ['exports', 'ember-composable-helpers/helpers/previous'], function (exports, _previous) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _previous.default;
    }
  });
  Object.defineProperty(exports, 'previous', {
    enumerable: true,
    get: function () {
      return _previous.previous;
    }
  });
});
define('ghost-admin/helpers/queue', ['exports', 'ember-composable-helpers/helpers/queue'], function (exports, _queue) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _queue.default;
    }
  });
  Object.defineProperty(exports, 'queue', {
    enumerable: true,
    get: function () {
      return _queue.queue;
    }
  });
});
define('ghost-admin/helpers/range', ['exports', 'ember-composable-helpers/helpers/range'], function (exports, _range) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _range.default;
    }
  });
  Object.defineProperty(exports, 'range', {
    enumerable: true,
    get: function () {
      return _range.range;
    }
  });
});
define('ghost-admin/helpers/reduce', ['exports', 'ember-composable-helpers/helpers/reduce'], function (exports, _reduce) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _reduce.default;
    }
  });
  Object.defineProperty(exports, 'reduce', {
    enumerable: true,
    get: function () {
      return _reduce.reduce;
    }
  });
});
define('ghost-admin/helpers/reject-by', ['exports', 'ember-composable-helpers/helpers/reject-by'], function (exports, _rejectBy) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _rejectBy.default;
    }
  });
  Object.defineProperty(exports, 'rejectBy', {
    enumerable: true,
    get: function () {
      return _rejectBy.rejectBy;
    }
  });
});
define('ghost-admin/helpers/repeat', ['exports', 'ember-composable-helpers/helpers/repeat'], function (exports, _repeat) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _repeat.default;
    }
  });
  Object.defineProperty(exports, 'repeat', {
    enumerable: true,
    get: function () {
      return _repeat.repeat;
    }
  });
});
define('ghost-admin/helpers/reverse', ['exports', 'ember-composable-helpers/helpers/reverse'], function (exports, _reverse) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _reverse.default;
    }
  });
  Object.defineProperty(exports, 'reverse', {
    enumerable: true,
    get: function () {
      return _reverse.reverse;
    }
  });
});
define('ghost-admin/helpers/route-action', ['exports', 'ember-route-action-helper/helpers/route-action'], function (exports, _routeAction) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _routeAction.default;
    }
  });
});
define('ghost-admin/helpers/sanitize-html', ['exports', 'koenig-editor/helpers/sanitize-html'], function (exports, _sanitizeHtml) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _sanitizeHtml.default;
    }
  });
  Object.defineProperty(exports, 'sanitizeHtml', {
    enumerable: true,
    get: function () {
      return _sanitizeHtml.sanitizeHtml;
    }
  });
});
define('ghost-admin/helpers/send', ['exports', 'ember-component-inbound-actions/helpers/send'], function (exports, _send) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _send.default;
    }
  });
});
define('ghost-admin/helpers/shuffle', ['exports', 'ember-composable-helpers/helpers/shuffle'], function (exports, _shuffle) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _shuffle.default;
    }
  });
  Object.defineProperty(exports, 'shuffle', {
    enumerable: true,
    get: function () {
      return _shuffle.shuffle;
    }
  });
});
define('ghost-admin/helpers/singularize', ['exports', 'ember-inflector/lib/helpers/singularize'], function (exports, _singularize) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _singularize.default;
});
define('ghost-admin/helpers/slice', ['exports', 'ember-composable-helpers/helpers/slice'], function (exports, _slice) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _slice.default;
    }
  });
  Object.defineProperty(exports, 'slice', {
    enumerable: true,
    get: function () {
      return _slice.slice;
    }
  });
});
define('ghost-admin/helpers/sort-by', ['exports', 'ember-composable-helpers/helpers/sort-by'], function (exports, _sortBy) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _sortBy.default;
    }
  });
  Object.defineProperty(exports, 'sortBy', {
    enumerable: true,
    get: function () {
      return _sortBy.sortBy;
    }
  });
});
define('ghost-admin/helpers/svg-jar', ['exports', 'ember-svg-jar/utils/make-helper', 'ember-svg-jar/utils/make-svg'], function (exports, _makeHelper, _makeSvg) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.svgJar = svgJar;


  function getInlineAsset(assetId) {
    try {
      /* eslint-disable global-require */
      return require(`ember-svg-jar/inlined/${assetId}`).default;
    } catch (err) {
      return null;
    }
  }

  function svgJar(assetId, svgAttrs) {
    return (0, _makeSvg.default)(assetId, svgAttrs, getInlineAsset);
  }

  exports.default = (0, _makeHelper.default)(svgJar);
});
define('ghost-admin/helpers/take', ['exports', 'ember-composable-helpers/helpers/take'], function (exports, _take) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _take.default;
    }
  });
  Object.defineProperty(exports, 'take', {
    enumerable: true,
    get: function () {
      return _take.take;
    }
  });
});
define('ghost-admin/helpers/task', ['exports', 'ember-concurrency/helpers/task'], function (exports, _task) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _task.default;
    }
  });
  Object.defineProperty(exports, 'task', {
    enumerable: true,
    get: function () {
      return _task.task;
    }
  });
});
define('ghost-admin/helpers/titleize', ['exports', 'ember-cli-string-helpers/helpers/titleize'], function (exports, _titleize) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _titleize.default;
    }
  });
  Object.defineProperty(exports, 'titleize', {
    enumerable: true,
    get: function () {
      return _titleize.titleize;
    }
  });
});
define('ghost-admin/helpers/toggle-action', ['exports', 'ember-composable-helpers/helpers/toggle-action'], function (exports, _toggleAction) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _toggleAction.default;
    }
  });
});
define('ghost-admin/helpers/toggle', ['exports', 'ember-composable-helpers/helpers/toggle'], function (exports, _toggle) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _toggle.default;
    }
  });
  Object.defineProperty(exports, 'toggle', {
    enumerable: true,
    get: function () {
      return _toggle.toggle;
    }
  });
});
define('ghost-admin/helpers/trim', ['exports', 'ember-cli-string-helpers/helpers/trim'], function (exports, _trim) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _trim.default;
    }
  });
  Object.defineProperty(exports, 'trim', {
    enumerable: true,
    get: function () {
      return _trim.trim;
    }
  });
});
define('ghost-admin/helpers/truncate', ['exports', 'ember-cli-string-helpers/helpers/truncate'], function (exports, _truncate) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _truncate.default;
    }
  });
  Object.defineProperty(exports, 'truncate', {
    enumerable: true,
    get: function () {
      return _truncate.truncate;
    }
  });
});
define('ghost-admin/helpers/ui-btn-span', ['exports', 'ember-cli-ghost-spirit/helpers/ui-btn-span'], function (exports, _uiBtnSpan) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _uiBtnSpan.default;
    }
  });
  Object.defineProperty(exports, 'uiBtnSpan', {
    enumerable: true,
    get: function () {
      return _uiBtnSpan.uiBtnSpan;
    }
  });
});
define('ghost-admin/helpers/ui-btn', ['exports', 'ember-cli-ghost-spirit/helpers/ui-btn'], function (exports, _uiBtn) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _uiBtn.default;
    }
  });
  Object.defineProperty(exports, 'uiBtn', {
    enumerable: true,
    get: function () {
      return _uiBtn.uiBtn;
    }
  });
});
define('ghost-admin/helpers/ui-text', ['exports', 'ember-cli-ghost-spirit/helpers/ui-text'], function (exports, _uiText) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _uiText.default;
    }
  });
  Object.defineProperty(exports, 'uiText', {
    enumerable: true,
    get: function () {
      return _uiText.uiText;
    }
  });
});
define('ghost-admin/helpers/underscore', ['exports', 'ember-cli-string-helpers/helpers/underscore'], function (exports, _underscore) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _underscore.default;
    }
  });
  Object.defineProperty(exports, 'underscore', {
    enumerable: true,
    get: function () {
      return _underscore.underscore;
    }
  });
});
define('ghost-admin/helpers/union', ['exports', 'ember-composable-helpers/helpers/union'], function (exports, _union) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _union.default;
    }
  });
  Object.defineProperty(exports, 'union', {
    enumerable: true,
    get: function () {
      return _union.union;
    }
  });
});
define('ghost-admin/helpers/unix', ['exports', 'ember-moment/helpers/unix'], function (exports, _unix) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _unix.default;
    }
  });
});
define('ghost-admin/helpers/uppercase', ['exports', 'ember-cli-string-helpers/helpers/uppercase'], function (exports, _uppercase) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _uppercase.default;
    }
  });
  Object.defineProperty(exports, 'uppercase', {
    enumerable: true,
    get: function () {
      return _uppercase.uppercase;
    }
  });
});
define('ghost-admin/helpers/utc', ['exports', 'ember-moment/helpers/utc'], function (exports, _utc) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _utc.default;
    }
  });
  Object.defineProperty(exports, 'utc', {
    enumerable: true,
    get: function () {
      return _utc.utc;
    }
  });
});
define('ghost-admin/helpers/w', ['exports', 'ember-cli-string-helpers/helpers/w'], function (exports, _w) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _w.default;
    }
  });
  Object.defineProperty(exports, 'w', {
    enumerable: true,
    get: function () {
      return _w.w;
    }
  });
});
define('ghost-admin/helpers/without', ['exports', 'ember-composable-helpers/helpers/without'], function (exports, _without) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _without.default;
    }
  });
  Object.defineProperty(exports, 'without', {
    enumerable: true,
    get: function () {
      return _without.without;
    }
  });
});
define('ghost-admin/helpers/xor', ['exports', 'ember-truth-helpers/helpers/xor'], function (exports, _xor) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _xor.default;
    }
  });
  Object.defineProperty(exports, 'xor', {
    enumerable: true,
    get: function () {
      return _xor.xor;
    }
  });
});
define('ghost-admin/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'ghost-admin/config/environment'], function (exports, _initializerFactory, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  let name, version;
  if (_environment.default.APP) {
    name = _environment.default.APP.name;
    version = _environment.default.APP.version;
  }

  exports.default = {
    name: 'App Version',
    initialize: (0, _initializerFactory.default)(name, version)
  };
});
define('ghost-admin/initializers/container-debug-adapter', ['exports', 'ember-resolver/resolvers/classic/container-debug-adapter'], function (exports, _containerDebugAdapter) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: 'container-debug-adapter',

    initialize() {
      let app = arguments[1] || arguments[0];

      app.register('container-debug-adapter:main', _containerDebugAdapter.default);
      app.inject('container-debug-adapter:main', 'namespace', 'application:main');
    }
  };
});
define("ghost-admin/initializers/coordinator-setup", ["exports", "ghost-admin/models/coordinator"], function (exports, _coordinator) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: "setup coordinator",

    initialize: function initialize() {
      let app = arguments[1] || arguments[0];
      app.register("drag:coordinator", _coordinator.default);
      app.inject("component", "coordinator", "drag:coordinator");
    }
  };
});
define('ghost-admin/initializers/debug', ['exports', '@html-next/vertical-collection/-debug'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: 'vertical-collection-debug',
    initialize() {}
  };
});
define('ghost-admin/initializers/ember-cli-mirage', ['exports', 'ghost-admin/config/environment', 'ghost-admin/mirage/config', 'ember-cli-mirage/get-rfc232-test-context', 'ember-cli-mirage/start-mirage'], function (exports, _environment, _config, _getRfc232TestContext, _startMirage) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.startMirage = startMirage;
  exports.default = {
    name: 'ember-cli-mirage',
    initialize(application) {
      if (_config.default) {
        application.register('mirage:base-config', _config.default, { instantiate: false });
      }
      if (_config.testConfig) {
        application.register('mirage:test-config', _config.testConfig, { instantiate: false });
      }

      _environment.default['ember-cli-mirage'] = _environment.default['ember-cli-mirage'] || {};
      if (_shouldUseMirage(_environment.default.environment, _environment.default['ember-cli-mirage'])) {
        startMirage(_environment.default);
      }
    }
  };
  function startMirage(env = _environment.default) {
    return (0, _startMirage.default)(null, { env, baseConfig: _config.default, testConfig: _config.testConfig });
  }

  function _shouldUseMirage(env, addonConfig) {
    if (typeof FastBoot !== 'undefined') {
      return false;
    }
    if ((0, _getRfc232TestContext.default)()) {
      return false;
    }
    let userDeclaredEnabled = typeof addonConfig.enabled !== 'undefined';
    let defaultEnabled = _defaultEnabled(env, addonConfig);

    return userDeclaredEnabled ? addonConfig.enabled : defaultEnabled;
  }

  /*
    Returns a boolean specifying the default behavior for whether
    to initialize Mirage.
  */
  function _defaultEnabled(env, addonConfig) {
    let usingInDev = env === 'development' && !addonConfig.usingProxy;
    let usingInTest = env === 'test';

    return usingInDev || usingInTest;
  }
});
define('ghost-admin/initializers/ember-concurrency', ['exports', 'ember-concurrency/initializers/ember-concurrency'], function (exports, _emberConcurrency) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberConcurrency.default;
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function () {
      return _emberConcurrency.initialize;
    }
  });
});
define('ghost-admin/initializers/ember-data', ['exports', 'ember-data/setup-container', 'ember-data'], function (exports, _setupContainer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: 'ember-data',
    initialize: _setupContainer.default
  };
});
define('ghost-admin/initializers/ember-simple-auth', ['exports', 'ember-simple-auth/configuration', 'ghost-admin/config/environment', 'ghost-admin/utils/ghost-paths', 'ember-simple-auth/initializers/setup-session', 'ember-simple-auth/initializers/setup-session-restoration', 'ember-simple-auth/initializers/setup-session-service'], function (exports, _configuration, _environment, _ghostPaths, _setupSession, _setupSessionRestoration, _setupSessionService) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = {
        name: 'ember-simple-auth',
        initialize(registry) {
            let config = _environment.default['ember-simple-auth'] || {};
            config.baseURL = (0, _ghostPaths.default)().adminRoot;
            _configuration.default.load(config);

            (0, _setupSession.default)(registry);
            (0, _setupSessionService.default)(registry);
            (0, _setupSessionRestoration.default)(registry);
        }
    };
});
define('ghost-admin/initializers/export-application-global', ['exports', 'ghost-admin/config/environment'], function (exports, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initialize = initialize;
  function initialize() {
    var application = arguments[1] || arguments[0];
    if (_environment.default.exportApplicationGlobal !== false) {
      var theGlobal;
      if (typeof window !== 'undefined') {
        theGlobal = window;
      } else if (typeof global !== 'undefined') {
        theGlobal = global;
      } else if (typeof self !== 'undefined') {
        theGlobal = self;
      } else {
        // no reasonable global, just bail
        return;
      }

      var value = _environment.default.exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = Ember.String.classify(_environment.default.modulePrefix);
      }

      if (!theGlobal[globalName]) {
        theGlobal[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete theGlobal[globalName];
          }
        });
      }
    }
  }

  exports.default = {
    name: 'export-application-global',

    initialize: initialize
  };
});
define('ghost-admin/initializers/hide-loading-screen', ['exports', 'ghost-admin/instance-initializers/hide-loading-screen'], function (exports, _hideLoadingScreen) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initialize = initialize;
  const VERSION = Ember.VERSION;


  const EMBER_VERSION_REGEX = /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:(?:\-(alpha|beta)\.([0-9]+)(?:\.([0-9]+))?)?)?(?:\+(canary))?(?:\.([0-9abcdef]+))?(?:\-([A-Za-z0-9\.\-]+))?(?:\+([A-Za-z0-9\.\-]+))?$/;

  /**
   * VERSION_INFO[i] is as follows:
   *
   * 0  complete version string
   * 1  major version
   * 2  minor version
   * 3  trivial version
   * 4  pre-release type (optional: "alpha" or "beta" or undefined for stable releases)
   * 5  pre-release version (optional)
   * 6  pre-release sub-version (optional)
   * 7  canary (optional: "canary", or undefined for stable releases)
   * 8  SHA (optional)
   *
   * @private
   */
  const VERSION_INFO = EMBER_VERSION_REGEX.exec(VERSION);
  const isPre111 = parseInt(VERSION_INFO[1], 10) < 2 && parseInt(VERSION_INFO[2], 10) < 12;

  function initialize() {
    if (isPre111) {
      var _arguments = Array.prototype.slice.call(arguments);

      let registry = _arguments[0],
          application = _arguments[1];

      _hideLoadingScreen.default.initialize(registry, application);
    }
  }

  exports.default = {
    name: 'hide-loading-screen',
    initialize
  };
});
define("ghost-admin/initializers/liquid-fire", ["exports", "liquid-fire/ember-internals", "liquid-fire/velocity-ext"], function (exports, _emberInternals) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  (0, _emberInternals.initialize)();

  exports.default = {
    name: 'liquid-fire',
    initialize: function initialize() {}
  };
});
define('ghost-admin/initializers/trailing-hash', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    let trailingHash = Ember.HashLocation.extend({
        formatURL() {
            let url = this._super(...arguments);

            if (url.indexOf('?') > 0) {
                return url.replace(/([^/])\?/, '$1/?');
            } else {
                return url.replace(/\/?$/, '/');
            }
        }
    });

    exports.default = {
        name: 'registerTrailingHashLocation',

        initialize(application) {
            application.register('location:trailing-hash', trailingHash);
        }
    };
});
define('ghost-admin/initializers/upgrade-status', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.initialize = initialize;
    function initialize(application) {
        application.inject('route', 'upgradeStatus', 'service:upgrade-status');
    }

    exports.default = {
        name: 'upgrade-status',
        initialize
    };
});
define('ghost-admin/initializers/user-agent', ['exports', 'ember-useragent/initializers/user-agent'], function (exports, _userAgent) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _userAgent.default;
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function () {
      return _userAgent.initialize;
    }
  });
});
define('ghost-admin/initializers/viewport-config', ['exports', 'ember-in-viewport/initializers/viewport-config'], function (exports, _viewportConfig) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _viewportConfig.default;
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function () {
      return _viewportConfig.initialize;
    }
  });
});
define('ghost-admin/instance-initializers/ember-cli-mirage-autostart', ['exports', 'ember-cli-mirage/instance-initializers/ember-cli-mirage-autostart'], function (exports, _emberCliMirageAutostart) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberCliMirageAutostart.default;
    }
  });
});
define("ghost-admin/instance-initializers/ember-data", ["exports", "ember-data/initialize-store-service"], function (exports, _initializeStoreService) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: "ember-data",
    initialize: _initializeStoreService.default
  };
});
define('ghost-admin/instance-initializers/ember-simple-auth', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: 'ember-simple-auth',

    initialize() {}
  };
});
define('ghost-admin/instance-initializers/hide-loading-screen', ['exports', 'ghost-admin/config/environment'], function (exports, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.initialize = initialize;


  const userConfig = _environment.default['ember-load'] || {};

  function initialize() {
    const instance = arguments[1] || arguments[0];
    const container = !!arguments[1] ? arguments[0] : instance.container;

    if (Ember.View) {
      let ApplicationView = container.lookupFactory ? container.lookupFactory('view:application') : instance.resolveRegistration('view:application');

      ApplicationView = ApplicationView.reopen({
        didInsertElement() {
          this._super(...arguments);

          var loadingIndicatorClass = userConfig.loadingIndicatorClass || 'ember-load-indicator';

          Ember.$(`.${loadingIndicatorClass}`).remove();
        }
      });
    }
  }

  exports.default = {
    name: 'hide-loading-screen-instance',
    initialize
  };
});
define('ghost-admin/koenig-editor/tests/addon.lint-test', [], function () {
  'use strict';

  describe('ESLint | addon', function () {

    it('addon/components/koenig-basic-html-input.js', function () {
      // test passed
    });

    it('addon/components/koenig-caption-input.js', function () {
      // test passed
    });

    it('addon/components/koenig-card-code.js', function () {
      // test passed
    });

    it('addon/components/koenig-card-embed.js', function () {
      // test passed
    });

    it('addon/components/koenig-card-gallery.js', function () {
      // test passed
    });

    it('addon/components/koenig-card-hr.js', function () {
      // test passed
    });

    it('addon/components/koenig-card-html.js', function () {
      // test passed
    });

    it('addon/components/koenig-card-image.js', function () {
      // test passed
    });

    it('addon/components/koenig-card-markdown.js', function () {
      // test passed
    });

    it('addon/components/koenig-card.js', function () {
      // test passed
    });

    it('addon/components/koenig-editor.js', function () {
      // test passed
    });

    it('addon/components/koenig-link-input.js', function () {
      // test passed
    });

    it('addon/components/koenig-link-toolbar.js', function () {
      // test passed
    });

    it('addon/components/koenig-menu-content.js', function () {
      // test passed
    });

    it('addon/components/koenig-plus-menu.js', function () {
      // test passed
    });

    it('addon/components/koenig-slash-menu.js', function () {
      // test passed
    });

    it('addon/components/koenig-toolbar.js', function () {
      // test passed
    });

    it('addon/helpers/clean-basic-html.js', function () {
      // test passed
    });

    it('addon/helpers/sanitize-html.js', function () {
      // test passed
    });

    it('addon/options/atoms.js', function () {
      // test passed
    });

    it('addon/options/basic-html-parser-plugins.js', function () {
      // test passed
    });

    it('addon/options/cards.js', function () {
      // test passed
    });

    it('addon/options/key-commands.js', function () {
      // test passed
    });

    it('addon/options/parser-plugins.js', function () {
      // test passed
    });

    it('addon/options/text-expansions.js', function () {
      // test passed
    });

    it('addon/utils/count-words.js', function () {
      // test passed
    });

    it('addon/utils/create-component-card.js', function () {
      // test passed
    });

    it('addon/utils/markup-utils.js', function () {
      // test passed
    });

    it('addon/utils/oembed.js', function () {
      // test passed
    });

    it('addon/utils/reading-time.js', function () {
      // test passed
    });
  });
});
define('ghost-admin/koenig-editor/tests/app.lint-test', [], function () {
  'use strict';

  describe('ESLint | app', function () {

    it('app/components/koenig-basic-html-input.js', function () {
      // test passed
    });

    it('app/components/koenig-caption-input.js', function () {
      // test passed
    });

    it('app/components/koenig-card-code.js', function () {
      // test passed
    });

    it('app/components/koenig-card-embed.js', function () {
      // test passed
    });

    it('app/components/koenig-card-gallery.js', function () {
      // test passed
    });

    it('app/components/koenig-card-hr.js', function () {
      // test passed
    });

    it('app/components/koenig-card-html.js', function () {
      // test passed
    });

    it('app/components/koenig-card-image.js', function () {
      // test passed
    });

    it('app/components/koenig-card-markdown.js', function () {
      // test passed
    });

    it('app/components/koenig-card.js', function () {
      // test passed
    });

    it('app/components/koenig-editor.js', function () {
      // test passed
    });

    it('app/components/koenig-link-input.js', function () {
      // test passed
    });

    it('app/components/koenig-link-toolbar.js', function () {
      // test passed
    });

    it('app/components/koenig-menu-content.js', function () {
      // test passed
    });

    it('app/components/koenig-plus-menu.js', function () {
      // test passed
    });

    it('app/components/koenig-slash-menu.js', function () {
      // test passed
    });

    it('app/components/koenig-toolbar.js', function () {
      // test passed
    });

    it('app/helpers/clean-basic-html.js', function () {
      // test passed
    });

    it('app/helpers/sanitize-html.js', function () {
      // test passed
    });
  });
});
define('ghost-admin/mirage-factories/post', ['exports', 'ember-infinity/mirage-factories/post'], function (exports, _post) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _post.default;
    }
  });
});
define('ghost-admin/mirage/config', ['exports', 'ghost-admin/mirage/config/authentication', 'ghost-admin/mirage/config/configuration', 'ghost-admin/mirage/config/invites', 'ghost-admin/mirage/config/posts', 'ghost-admin/mirage/config/roles', 'ghost-admin/mirage/config/settings', 'ghost-admin/mirage/config/slugs', 'ghost-admin/mirage/config/subscribers', 'ghost-admin/mirage/config/tags', 'ghost-admin/mirage/config/themes', 'ghost-admin/mirage/config/uploads', 'ghost-admin/mirage/config/users'], function (exports, _authentication, _configuration, _invites, _posts, _roles, _settings, _slugs, _subscribers, _tags, _themes, _uploads, _users) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function () {
        // this.urlPrefix = '';    // make this `http://localhost:8080`, for example, if your API is on a different server
        this.namespace = '/ghost/api/v0.1'; // make this `api`, for example, if your API is namespaced
        this.timing = 400; // delay for each request, automatically set to 0 during testing

        // Mock endpoints here to override real API requests during development, eg...
        // this.put('/posts/:id/', versionMismatchResponse);
        // mockTags(this);
        // this.loadFixtures('settings');

        // keep this line, it allows all other API requests to hit the real server
        this.passthrough();

        // add any external domains to make sure those get passed through too
        this.passthrough('https://count.ghost.org/');
        this.passthrough('http://www.gravatar.com/**');
    };

    exports.testConfig = testConfig;


    // Mock all endpoints here as there is no real API during testing
    function testConfig() {
        this.passthrough('/write-coverage'); // For code coverage
        // this.urlPrefix = '';    // make this `http://localhost:8080`, for example, if your API is on a different server
        this.namespace = '/ghost/api/v0.1'; // make this `api`, for example, if your API is namespaced
        // this.timing = 400;      // delay for each request, automatically set to 0 during testing
        // this.logging = true;

        (0, _authentication.default)(this);
        (0, _configuration.default)(this);
        (0, _invites.default)(this);
        (0, _posts.default)(this);
        (0, _roles.default)(this);
        (0, _settings.default)(this);
        (0, _slugs.default)(this);
        (0, _subscribers.default)(this);
        (0, _tags.default)(this);
        (0, _themes.default)(this);
        (0, _uploads.default)(this);
        (0, _users.default)(this);

        /* Notifications -------------------------------------------------------- */

        this.get('/notifications/');

        /* Apps - Slack Test Notification --------------------------------------- */

        this.post('/slack/test', function () {
            return {};
        });

        /* External sites ------------------------------------------------------- */

        let downloadCount = 0;
        this.get('https://count.ghost.org/', function () {
            downloadCount += 1;
            return {
                count: downloadCount
            };
        });

        this.head('http://www.gravatar.com/avatar/:md5', function () {
            return '';
        }, 200);

        this.get('http://www.gravatar.com/avatar/:md5', function () {
            return '';
        }, 200);
    }

    // import {versionMismatchResponse} from 'utils';
});
define('ghost-admin/mirage/config/authentication', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = mockAuthentication;
    function mockAuthentication(server) {
        server.post('/authentication/token', function () {
            // Password sign-in
            return {
                access_token: 'MirageAccessToken',
                expires_in: 172800,
                refresh_token: 'MirageRefreshToken',
                token_type: 'Bearer'
            };
        });

        server.post('/authentication/passwordreset', function (schema, request) {
            var _JSON$parse = JSON.parse(request.requestBody);

            let passwordreset = _JSON$parse.passwordreset;

            // eslint-disable-next-line ember-suave/prefer-destructuring
            let email = passwordreset[0].email;

            if (email === 'unknown@example.com') {
                return new _emberCliMirage.Response(404, {}, {
                    errors: [{
                        message: 'There is no user with that email address.',
                        errorType: 'NotFoundError'
                    }]
                });
            } else {
                return {
                    passwordreset: [{ message: 'Check your email for further instructions.' }]
                };
            }
        });

        server.get('/authentication/invitation/', function (schema, request) {
            let email = request.queryParams.email;

            let invite = schema.invites.findBy({ email });
            let user = schema.users.find(invite.createdBy);
            let valid = !!invite;
            let invitedBy = user && user.name;

            return {
                invitation: [{
                    valid,
                    invitedBy
                }]
            };
        });

        /* Setup ---------------------------------------------------------------- */

        server.post('/authentication/setup', function ({ roles, users }) {
            let attrs = this.normalizedRequestAttrs();
            let role = roles.findBy({ name: 'Owner' });

            // create owner role unless already exists
            if (!role) {
                role = roles.create({ name: 'Owner' });
            }
            attrs.roles = [role];

            if (!Ember.isBlank(attrs.email)) {
                attrs.slug = attrs.email.split('@')[0].dasherize();
            }

            // NOTE: server does not use the user factory to fill in blank fields
            return users.create(attrs);
        });

        server.get('/authentication/setup/', function () {
            return {
                setup: [{ status: true }]
            };
        });
    } /* eslint-disable camelcase */
});
define('ghost-admin/mirage/config/configuration', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = mockConfiguration;
    function mockConfiguration(server) {
        server.get('/configuration/', function ({ db }) {
            if (Ember.isEmpty(db.configurations)) {
                server.loadFixtures('configurations');
            }

            return {
                configuration: [db.configurations.find(1)]
            };
        });

        server.get('/configuration/timezones/', function ({ db }) {
            if (Ember.isEmpty(db.timezones)) {
                server.loadFixtures('timezones');
            }

            return {
                configuration: [{
                    timezones: db.timezones
                }]
            };
        });

        server.get('/configuration/private/', function ({ db }) {
            if (Ember.isEmpty(db.private)) {
                server.loadFixtures('private');
            }

            return {
                configuration: [db.private]
            };
        });
    }
});
define('ghost-admin/mirage/config/invites', ['exports', 'moment', 'ember-cli-mirage', 'ghost-admin/mirage/utils'], function (exports, _moment, _emberCliMirage, _utils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = mockInvites;
    function mockInvites(server) {
        server.get('/invites/', (0, _utils.paginatedResponse)('invites'));

        server.get('/invites/:id', function (schema, request) {
            let id = request.params.id;

            let invite = schema.invites.find(id);

            return invite || new _emberCliMirage.Response(404, {}, {
                errors: [{
                    errorType: 'NotFoundError',
                    message: 'Invite not found.'
                }]
            });
        });

        server.post('/invites/', function ({ invites }) {
            let attrs = this.normalizedRequestAttrs();
            let oldInvite = invites.findBy({ email: attrs.email });

            if (oldInvite) {
                oldInvite.destroy();
            }

            /* eslint-disable camelcase */
            attrs.token = `${invites.all().models.length}-token`;
            attrs.expires = _moment.default.utc().add(1, 'day').valueOf();
            attrs.createdAt = _moment.default.utc().format();
            attrs.createdBy = 1;
            attrs.updatedAt = _moment.default.utc().format();
            attrs.updatedBy = 1;
            attrs.status = 'sent';
            /* eslint-enable camelcase */

            return invites.create(attrs);
        });

        server.del('/invites/:id/');
    }
});
define('ghost-admin/mirage/config/posts', ['exports', 'moment', 'ember-cli-mirage', 'ghost-admin/mirage/utils'], function (exports, _moment, _emberCliMirage, _utils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = mockPosts;

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    function normalizeBooleanParams(arr) {
        if (!Ember.isArray(arr)) {
            return arr;
        }

        return arr.map(i => {
            if (i === 'true') {
                return true;
            } else if (i === 'false') {
                return false;
            } else {
                return i;
            }
        });
    }

    // TODO: use GQL to parse filter string?
    function extractFilterParam(param, filter) {
        let filterRegex = new RegExp(`${param}:(.*?)(?:\\+|$)`);
        let match;

        var _ref = filter.match(filterRegex) || [],
            _ref2 = _slicedToArray(_ref, 2);

        let result = _ref2[1];

        if (result.startsWith('[')) {
            match = result.replace(/^\[|\]$/g, '').split(',');
        } else if (result) {
            match = [result];
        }

        return normalizeBooleanParams(match);
    }

    function mockPosts(server) {
        server.post('/posts', function ({ posts, users }) {
            let attrs = this.normalizedRequestAttrs();
            let authors = [];

            // NOTE: this is necessary so that ember-cli-mirage has a valid user
            // schema object rather than a plain object
            // TODO: should ember-cli-mirage be handling this automatically?
            attrs.authors.forEach(author => {
                authors.push(users.find(author.id));
            });

            attrs.authors = authors;

            if (Ember.isBlank(attrs.slug) && !Ember.isBlank(attrs.title)) {
                attrs.slug = Ember.String.dasherize(attrs.title);
            }

            return posts.create(attrs);
        });

        // TODO: handle authors filter
        server.get('/posts/', function ({ posts }, { queryParams }) {
            let filter = queryParams.filter,
                page = queryParams.page,
                limit = queryParams.limit;


            page = +page || 1;
            limit = +limit || 15;

            let statusFilter = extractFilterParam('status', filter);
            let pageFilter = extractFilterParam('page', filter);

            let collection = posts.all().filter(post => {
                let matchesStatus = true;
                let matchesPage = true;

                if (!Ember.isEmpty(statusFilter)) {
                    matchesStatus = statusFilter.includes(post.status);
                }

                if (!Ember.isEmpty(pageFilter)) {
                    matchesPage = pageFilter.includes(post.page);
                }

                return matchesStatus && matchesPage;
            });

            return (0, _utils.paginateModelCollection)('posts', collection, page, limit);
        });

        server.get('/posts/:id/', function ({ posts }, { params }) {
            let id = params.id;

            let post = posts.find(id);

            return post || new _emberCliMirage.Response(404, {}, {
                errors: [{
                    errorType: 'NotFoundError',
                    message: 'Post not found.'
                }]
            });
        });

        server.put('/posts/:id/', function ({ posts, users }, { params }) {
            let attrs = this.normalizedRequestAttrs();
            let post = posts.find(params.id);
            let authors = [];

            // NOTE: this is necessary so that ember-cli-mirage has a valid user
            // schema object rather than a plain object
            // TODO: should ember-cli-mirage be handling this automatically?
            attrs.authors.forEach(author => {
                authors.push(users.find(author.id));
            });

            attrs.authors = authors;

            attrs.updatedAt = _moment.default.utc().toDate();

            return post.update(attrs);
        });

        server.del('/posts/:id/');
    }
});
define('ghost-admin/mirage/config/roles', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = mockRoles;
    function mockRoles(server) {
        server.get('/roles/', function ({ roles }, { queryParams }) {
            if (queryParams.permissions === 'assign') {
                return roles.find([1, 2, 3]);
            }

            return roles.all();
        });
    }
});
define('ghost-admin/mirage/config/settings', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = mockSettings;
    function mockSettings(server) {
        server.get('/settings/', function ({ db }, { queryParams }) {
            let type = queryParams.type;

            let filters = type.split(',');
            let settings = [];

            if (!db.settings.length) {
                server.loadFixtures('settings');
            }

            filters.forEach(type => {
                settings.pushObjects(db.settings.where({ type }));
            });

            return {
                settings,
                meta: { filters: { type } }
            };
        });

        server.put('/settings/', function ({ db }, { requestBody }) {
            let newSettings = JSON.parse(requestBody).settings;

            newSettings.forEach(newSetting => {
                let key = newSetting.key;


                if (db.settings.where({ key }).length > 0) {
                    db.settings.update({ key }, newSetting);
                } else {
                    newSetting.type = newSetting.type || 'blog';
                    db.settings.insert(newSetting);
                }
            });

            return {
                meta: {},
                settings: db.settings
            };
        });
    }
});
define('ghost-admin/mirage/config/slugs', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = mockSlugs;
    function mockSlugs(server) {
        server.get('/slugs/post/:slug/', function (schema, request) {
            return {
                slugs: [{ slug: Ember.String.dasherize(decodeURIComponent(request.params.slug)) }]
            };
        });

        server.get('/slugs/user/:slug/', function (schema, request) {
            return {
                slugs: [{ slug: Ember.String.dasherize(decodeURIComponent(request.params.slug)) }]
            };
        });
    }
});
define('ghost-admin/mirage/config/subscribers', ['exports', 'ember-cli-mirage', 'ghost-admin/mirage/utils'], function (exports, _emberCliMirage, _utils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = mockSubscribers;
    /* eslint-disable camelcase */
    function mockSubscribers(server) {
        server.get('/subscribers/', (0, _utils.paginatedResponse)('subscribers'));

        server.post('/subscribers/', function ({ subscribers }) {
            let attrs = this.normalizedRequestAttrs();
            let subscriber = subscribers.findBy({ email: attrs.email });

            if (subscriber) {
                return new _emberCliMirage.Response(422, {}, {
                    errors: [{
                        errorType: 'ValidationError',
                        message: 'Email already exists.',
                        property: 'email'
                    }]
                });
            } else {
                attrs.createdAt = new Date();
                attrs.createdBy = 0;

                return subscribers.create(attrs);
            }
        });

        server.put('/subscribers/:id/');

        server.post('/subscribers/csv/', function () {
            // NB: we get a raw FormData object with no way to inspect it in Chrome
            // until version 50 adds the additional read methods
            // https://developer.mozilla.org/en-US/docs/Web/API/FormData#Browser_compatibility

            server.createList('subscriber', 50);

            return {
                meta: {
                    stats: {
                        imported: 50,
                        duplicates: 3,
                        invalid: 2
                    }
                }
            };
        });

        server.del('/subscribers/:id/');
    }
});
define('ghost-admin/mirage/config/tags', ['exports', 'ghost-admin/mirage/utils'], function (exports, _utils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = mockTags;
    function mockTags(server) {
        server.post('/tags/', function ({ tags }) {
            let attrs = this.normalizedRequestAttrs();

            if (Ember.isBlank(attrs.slug) && !Ember.isBlank(attrs.name)) {
                attrs.slug = Ember.String.dasherize(attrs.name);
            }

            // NOTE: this does not use the tag factory to fill in blank fields
            return tags.create(attrs);
        });

        server.get('/tags/', (0, _utils.paginatedResponse)('tags'));

        server.get('/tags/slug/:slug/', function ({ tags }, { params: { slug } }) {
            // TODO: remove post_count unless requested?
            return tags.findBy({ slug });
        });

        server.put('/tags/:id/');

        server.del('/tags/:id/');
    }
});
define('ghost-admin/mirage/config/themes', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = mockThemes;


    let themeCount = 1;

    function mockThemes(server) {
        server.get('/themes');

        server.post('/themes/upload/', function ({ themes }) {
            // pretender/mirage doesn't currently process FormData so we can't use
            // any info passed in through the request
            let theme = {
                name: `test-${themeCount}`,
                package: {
                    name: `Test ${themeCount}`,
                    version: '0.1'
                }
            };

            themeCount += 1;

            theme = themes.create(theme);

            return { themes: [theme] };
        });

        server.del('/themes/:theme/', function ({ themes }, { params }) {
            themes.findBy({ name: params.theme }).destroy();

            return new _emberCliMirage.Response(204, {}, null);
        });

        server.put('/themes/:theme/activate/', function ({ themes }, { params }) {
            themes.all().update('active', false);
            let theme = themes.findBy({ name: params.theme }).update({ active: true });

            return { themes: [theme] };
        });
    }
});
define('ghost-admin/mirage/config/uploads', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = mockUploads;

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    const fileUploadResponse = function fileUploadResponse(db, { requestBody }) {
        var _requestBody$getAll = requestBody.getAll('uploadimage'),
            _requestBody$getAll2 = _slicedToArray(_requestBody$getAll, 1);

        let file = _requestBody$getAll2[0];

        let now = new Date();
        let year = now.getFullYear();
        let month = `${now.getMonth()}`;

        if (month.length === 1) {
            month = `0${month}`;
        }

        return `"/content/images/${year}/${month}/${file.name}"`;
    };

    function mockUploads(server) {
        server.post('/uploads/', fileUploadResponse, 200, { timing: 100 });
        server.post('/uploads/icon/', fileUploadResponse, 200, { timing: 100 });
    }
});
define('ghost-admin/mirage/config/users', ['exports', 'ember-cli-mirage', 'ghost-admin/mirage/utils'], function (exports, _emberCliMirage, _utils) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = mockUsers;
    function mockUsers(server) {
        // /users/me = Always return the user with ID=1
        server.get('/users/me/', function ({ users }) {
            let user = users.find(1);

            if (user) {
                return user;
            } else {
                return new _emberCliMirage.Response(404, {}, { errors: [{ message: 'Not found', errorType: 'NotFoundError' }] });
            }
        });

        server.get('/users/', function ({ users }, { queryParams }) {
            let page = +queryParams.page || 1;

            // NOTE: this is naive and only set up to work with queries that are
            // actually used - if you use a different filter in the app, add it here!
            let collection = users.where(function (user) {
                let statusMatch = true;

                if (queryParams.filter === 'status:-inactive') {
                    statusMatch = user.status !== 'inactive';
                } else if (queryParams.filter === 'status:inactive') {
                    statusMatch = user.status === 'inactive';
                } else if (queryParams.status && queryParams.status !== 'all') {
                    statusMatch = user.status === queryParams.status;
                }

                return statusMatch;
            });

            return (0, _utils.paginateModelCollection)('users', collection, page, queryParams.limit);
        });

        server.get('/users/slug/:slug/', function ({ users }, { params, queryParams }) {
            let user = users.findBy({ slug: params.slug });
            user.postCount = queryParams.include.match(/count\.posts/);
            return user;
        });

        server.get('/users/:id', function ({ users }, { params, queryParams }) {
            let user = users.find(params.id);
            user.postCount = queryParams.include.match(/count\.posts/);
            return user;
        });

        server.put('/users/:id/', function ({ users }, { params }) {
            let id = params.id;


            if (id === 'password') {
                return {
                    password: [{ message: 'Password changed successfully.' }]
                };
            } else {
                let attrs = this.normalizedRequestAttrs();

                // TODO: why is our custom serializer causing .update to throw
                // children.update is not a function?
                // https://github.com/samselikoff/ember-cli-mirage/issues/964
                delete attrs.roles;

                return users.find(id).update(attrs);
            }
        });

        server.del('/users/:id/');
    }
});
define('ghost-admin/mirage/factories/invite', ['exports', 'moment', 'ember-cli-mirage'], function (exports, _moment, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberCliMirage.Factory.extend({
        token(i) {
            return `${i}-token`;
        },
        email(i) {
            return `invited-user-${i}@example.com`;
        },
        expires() {
            return _moment.default.utc().add(1, 'day').valueOf();
        },
        createdAt() {
            return _moment.default.utc().format();
        },
        createdBy() {
            return 1;
        },
        updatedAt() {
            return _moment.default.utc().format();
        },
        updatedBy() {
            return 1;
        },
        status() {
            return 'sent';
        }
    });
});
define('ghost-admin/mirage/factories/notification', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberCliMirage.Factory.extend({
        dismissible: true,
        message: 'This is an alert',
        status: 'alert',
        type: 'error'
    });
});
define('ghost-admin/mirage/factories/post', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberCliMirage.Factory.extend({
        codeinjectionFoot: null,
        codeinjectionHead: null,
        createdAt: '2015-09-11T09:44:29.871Z',
        createdBy: 1,
        customExcerpt: null,
        customTemplate: null,
        description(i) {
            return `Title for post ${i}.`;
        },
        featured: false,
        featureImage(i) {
            return `/content/images/2015/10/post-${i}.jpg`;
        },
        html(i) {
            return `<p>HTML for post ${i}.</p>`;
        },
        locale: null,
        metaDescription(i) {
            return `Meta description for post ${i}.`;
        },
        metaTitle(i) {
            return `Meta Title for post ${i}`;
        },
        ogDescription: null,
        ogImage: null,
        ogTitle: null,
        page: false,
        plaintext(i) {
            return `Plaintext for post ${i}.`;
        },
        publishedAt: '2015-12-19T16:25:07.000Z',
        publishedBy: 1,
        status(i) {
            return _emberCliMirage.faker.list.cycle('draft', 'published', 'scheduled')(i);
        },
        title(i) {
            return `Post ${i}`;
        },
        twitterDescription: null,
        twitterImage: null,
        twitterTitle: null,
        updatedAt: '2015-10-19T16:25:07.756Z',
        updatedBy: 1,
        uuid(i) {
            return `post-${i}`;
        },

        authors() {
            return [];
        },
        tags() {
            return [];
        },

        afterCreate(post, server) {
            if (Ember.isEmpty(post.authors)) {
                let user = server.schema.users.find(1);

                if (!user) {
                    let role = server.schema.roles.find({ name: 'Administrator' }) || server.create('role', { name: 'Administrator' });
                    user = server.create('user', { roles: [role] });
                }

                post.authors = [user];
                post.save();
            }
        }
    });
});
define('ghost-admin/mirage/factories/role', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberCliMirage.Factory.extend({
        createdAt: '2013-11-25T14:48:11.000Z',
        createdBy: 1,
        description(i) {
            return `Role ${i}`;
        },
        name: '',
        updatedAt: '2013-11-25T14:48:11.000Z',
        updatedBy: 1
    });
});
define('ghost-admin/mirage/factories/subscriber', ['exports', 'moment', 'ember-cli-mirage'], function (exports, _moment, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    let randomDate = function randomDate(start = (0, _moment.default)().subtract(30, 'days').toDate(), end = new Date()) {
        return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
    };

    let statuses = ['pending', 'subscribed'];

    exports.default = _emberCliMirage.Factory.extend({
        name() {
            return `${_emberCliMirage.faker.name.firstName()} ${_emberCliMirage.faker.name.lastName()}`;
        },
        email: _emberCliMirage.faker.internet.email,
        status() {
            return statuses[Math.floor(Math.random() * statuses.length)];
        },
        createdAt() {
            return randomDate();
        },
        updatedAt: null,
        createdBy: 0,
        updatedBy: null,
        unsubscribedAt: null
    });
});
define('ghost-admin/mirage/factories/tag', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberCliMirage.Factory.extend({
        createdAt: '2015-09-11T09:44:29.871Z',
        createdBy: 1,
        description(i) {
            return `Description for tag ${i}.`;
        },
        visibility: 'public',
        featureImage(i) {
            return `/content/images/2015/10/tag-${i}.jpg`;
        },
        metaDescription(i) {
            return `Meta description for tag ${i}.`;
        },
        metaTitle(i) {
            return `Meta Title for tag ${i}`;
        },
        name(i) {
            return `Tag ${i}`;
        },
        parent: null,
        slug(i) {
            return `tag-${i}`;
        },
        updatedAt: '2015-10-19T16:25:07.756Z',
        updatedBy: 1,
        count() {
            return {
                posts: 1
            };
        }
    });
});
define('ghost-admin/mirage/factories/user', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberCliMirage.Factory.extend({
        accessibility: null,
        bio: null,
        coverImage: null,
        createdAt: '2015-09-02T13:41:50.000Z',
        createdBy: null,
        email(i) {
            return `user-${i}@example.com`;
        },
        profileImage: '//www.gravatar.com/avatar/3ae045bc198a157401827c8455cd7c99?s=250&d=mm&r=x',
        lastLogin: '2015-11-02T16:12:05.000Z',
        location: null,
        metaDescription: null,
        metaTitle: null,
        name(i) {
            return `User ${i}`;
        },
        slug(i) {
            return `user-${i}`;
        },
        status: 'active',
        tour: null,
        updatedAt: '2015-11-02T16:12:05.000Z',
        updatedBy: '1',
        website: 'http://example.com',

        posts() {
            return [];
        },
        roles() {
            return [];
        }
    });
});
define('ghost-admin/mirage/fixtures/configurations', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = [{
        blogTitle: 'Test Blog',
        blogUrl: `${window.location.origin}/`,
        clientId: 'ghost-admin',
        clientSecret: '1234ClientSecret',
        fileStorage: 'true',
        internalTags: 'false',
        publicAPI: 'false',
        useGravatar: 'true'
    }];
});
define('ghost-admin/mirage/fixtures/private', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = [{
        unsplashAPI: ''
    }];
});
define('ghost-admin/mirage/fixtures/roles', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = [{
        id: 1,
        name: 'Administrator',
        description: 'Administrators',
        created_at: '2015-11-13T16:01:29.131Z',
        created_by: 1,
        updated_at: '2015-11-13T16:01:29.131Z',
        updated_by: 1
    }, {
        id: 2,
        name: 'Editor',
        description: 'Editors',
        created_at: '2015-11-13T16:01:29.131Z',
        created_by: 1,
        updated_at: '2015-11-13T16:01:29.131Z',
        updated_by: 1
    }, {
        id: 3,
        name: 'Author',
        description: 'Authors',
        created_at: '2015-11-13T16:01:29.131Z',
        created_by: 1,
        updated_at: '2015-11-13T16:01:29.131Z',
        updated_by: 1
    }, {
        id: 4,
        name: 'Owner',
        description: 'Blog Owner',
        created_at: '2015-11-13T16:01:29.132Z',
        created_by: 1,
        updated_at: '2015-11-13T16:01:29.132Z',
        updated_by: 1
    }, {
        id: 5,
        name: 'Contributor',
        description: 'Contributors',
        created_at: '2015-11-13T16:01:29.132Z',
        created_by: 1,
        updated_at: '2015-11-13T16:01:29.132Z',
        updated_by: 1
    }];
});
define('ghost-admin/mirage/fixtures/settings', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = [{
        id: 1,
        created_at: '2015-09-11T09:44:30.805Z',
        created_by: 1,
        key: 'title',
        type: 'blog',
        updated_at: '2015-10-04T16:26:05.195Z',
        updated_by: 1,
        value: 'Test Blog'
    }, {
        id: 2,
        created_at: '2015-09-11T09:44:30.806Z',
        created_by: 1,
        key: 'description',
        type: 'blog',
        updated_at: '2015-10-04T16:26:05.198Z',
        updated_by: 1,
        value: 'Thoughts, stories and ideas.'
    }, {
        id: 3,
        key: 'logo',
        value: '/content/images/2013/Nov/logo.png',
        type: 'blog',
        created_at: '2013-11-25T14:48:11.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.273Z',
        updated_by: 1
    }, {
        id: 4,
        key: 'cover_image',
        value: '/content/images/2014/Feb/cover.jpg',
        type: 'blog',
        created_at: '2013-11-25T14:48:11.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.276Z',
        updated_by: 1
    }, {
        id: 5,
        key: 'default_lang',
        value: 'en_US',
        type: 'blog',
        created_at: '2013-11-25T14:48:11.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.278Z',
        updated_by: 1
    }, {
        id: 7,
        key: 'force_i18n',
        value: 'true',
        type: 'blog',
        created_at: '2013-11-25T14:48:11.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.280Z',
        updated_by: 1
    }, {
        id: 10,
        created_at: '2015-09-11T09:44:30.809Z',
        created_by: 1,
        key: 'ghost_head',
        type: 'blog',
        updated_at: '2015-09-23T13:32:49.858Z',
        updated_by: 1,
        value: ''
    }, {
        id: 11,
        created_at: '2015-09-11T09:44:30.809Z',
        created_by: 1,
        key: 'ghost_foot',
        type: 'blog',
        updated_at: '2015-09-23T13:32:49.858Z',
        updated_by: 1,
        value: ''
    }, {
        id: 12,
        key: 'labs',
        value: '{"subscribers":true}',
        type: 'blog',
        created_at: '2015-01-12T18:29:01.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.288Z',
        updated_by: 1
    }, {
        id: 13,
        created_at: '2015-09-11T09:44:30.810Z',
        created_by: 1,
        key: 'navigation',
        type: 'blog',
        updated_at: '2015-09-23T13:32:49.868Z',
        updated_by: 1,
        value: JSON.stringify([{ label: 'Home', url: '/' }, { label: 'About', url: '/about' }])
    }, {
        id: 14,
        created_at: '2015-09-11T09:44:30.810Z',
        created_by: 1,
        key: 'is_private',
        type: 'blog',
        updated_at: '2015-09-23T13:32:49.868Z',
        updated_by: 1,
        value: false
    }, {
        id: 15,
        created_at: '2015-09-11T09:44:30.810Z',
        created_by: 1,
        key: 'password',
        type: 'blog',
        updated_at: '2015-09-23T13:32:49.868Z',
        updated_by: 1,
        value: ''
    }, {
        id: 16,
        created_at: '2016-05-05T15:04:03.115Z',
        created_by: 1,
        key: 'slack',
        type: 'blog',
        updated_at: '2016-05-05T18:33:09.168Z',
        updated_by: 1,
        value: '[{"url":""}]'
    }, {
        id: 17,
        created_at: '2016-05-05T15:40:12.133Z',
        created_by: 1,
        key: 'facebook',
        type: 'blog',
        updated_at: '2016-05-08T15:20:25.953Z',
        updated_by: 1,
        value: 'test'
    }, {
        id: 18,
        created_at: '2016-05-05T15:40:12.134Z',
        created_by: 1,
        key: 'twitter',
        type: 'blog',
        updated_at: '2016-05-08T15:20:25.954Z',
        updated_by: 1,
        value: '@test'
    }, {
        id: 19,
        created_at: '2015-09-11T09:44:30.810Z',
        created_by: 1,
        key: 'active_timezone',
        type: 'blog',
        updated_at: '2015-09-23T13:32:49.868Z',
        updated_by: 1,
        value: 'Etc/UTC'
    }, {
        id: 21,
        created_at: '2017-01-09T08:40:59.000Z',
        created_by: 1,
        key: 'amp',
        type: 'blog',
        updated_at: '2017-01-09T08:49:42.991Z',
        updated_by: 1,
        value: 'true'
    }, {
        id: 22,
        key: 'icon',
        value: '/content/images/2014/Feb/favicon.ico',
        type: 'blog',
        created_at: '2013-11-25T14:48:11.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.276Z',
        updated_by: 1
    }];
});
define('ghost-admin/mirage/fixtures/themes', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = [{
        name: 'casper',
        package: {
            name: 'Blog',
            version: '1.0'
        },
        active: true
    }, {
        name: 'foo',
        package: {
            name: 'Foo',
            version: '0.1'
        }
    }, {
        name: 'bar'
    }];
});
define('ghost-admin/mirage/fixtures/timezones', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = [{
        name: 'Pacific/Pago_Pago',
        label: '(GMT -11:00) Midway Island, Samoa'
    }, {
        name: 'Pacific/Honolulu',
        label: '(GMT -10:00) Hawaii'
    }, {
        name: 'America/Anchorage',
        label: '(GMT -9:00) Alaska'
    }, {
        name: 'America/Tijuana',
        label: '(GMT -8:00) Chihuahua, La Paz, Mazatlan'
    }, {
        name: 'America/Los_Angeles',
        label: '(GMT -8:00) Pacific Time (US & Canada); Tijuana'
    }, {
        name: 'America/Phoenix',
        label: '(GMT -7:00) Arizona'
    }, {
        name: 'America/Denver',
        label: '(GMT -7:00) Mountain Time (US & Canada)'
    }, {
        name: 'America/Costa_Rica',
        label: '(GMT -6:00) Central America'
    }, {
        name: 'America/Chicago',
        label: '(GMT -6:00) Central Time (US & Canada)'
    }, {
        name: 'America/Mexico_City',
        label: '(GMT -6:00) Guadalajara, Mexico City, Monterrey'
    }, {
        name: 'America/Regina',
        label: '(GMT -6:00) Saskatchewan'
    }, {
        name: 'America/Bogota',
        label: '(GMT -5:00) Bogota, Lima, Quito'
    }, {
        name: 'America/New_York',
        label: '(GMT -5:00) Eastern Time (US & Canada)'
    }, {
        name: 'America/Fort_Wayne',
        label: '(GMT -5:00) Indiana (East)'
    }, {
        name: 'America/Caracas',
        label: '(GMT -4:00) Caracas, La Paz'
    }, {
        name: 'America/Halifax',
        label: '(GMT -4:00) Atlantic Time (Canada); Brasilia, Greenland'
    }, {
        name: 'America/Santiago',
        label: '(GMT -4:00) Santiago'
    }, {
        name: 'America/St_Johns',
        label: '(GMT -3:30) Newfoundland'
    }, {
        name: 'America/Argentina/Buenos_Aires',
        label: '(GMT -3:00) Buenos Aires, Georgetown'
    }, {
        name: 'America/Noronha',
        label: '(GMT -2:00) Fernando de Noronha'
    }, {
        name: 'Atlantic/Azores',
        label: '(GMT -1:00) Azores'
    }, {
        name: 'Atlantic/Cape_Verde',
        label: '(GMT -1:00) Cape Verde Is.'
    }, {
        name: 'Etc/UTC',
        label: '(GMT) UTC'
    }, {
        name: 'Africa/Casablanca',
        label: '(GMT +0:00) Casablanca, Monrovia'
    }, {
        name: 'Europe/Dublin',
        label: '(GMT +0:00) Dublin, Edinburgh, London'
    }, {
        name: 'Europe/Amsterdam',
        label: '(GMT +1:00) Amsterdam, Berlin, Rome, Stockholm, Vienna'
    }, {
        name: 'Europe/Prague',
        label: '(GMT +1:00) Belgrade, Bratislava, Budapest, Prague'
    }, {
        name: 'Europe/Paris',
        label: '(GMT +1:00) Brussels, Copenhagen, Madrid, Paris'
    }, {
        name: 'Europe/Warsaw',
        label: '(GMT +1:00) Sarajevo, Skopje, Warsaw, Zagreb'
    }, {
        name: 'Africa/Lagos',
        label: '(GMT +1:00) West Central Africa'
    }, {
        name: 'Europe/Istanbul',
        label: '(GMT +2:00) Athens, Beirut, Bucharest, Istanbul'
    }, {
        name: 'Africa/Cairo',
        label: '(GMT +2:00) Cairo, Egypt'
    }, {
        name: 'Africa/Maputo',
        label: '(GMT +2:00) Harare'
    }, {
        name: 'Europe/Kiev',
        label: '(GMT +2:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius'
    }, {
        name: 'Asia/Jerusalem',
        label: '(GMT +2:00) Jerusalem'
    }, {
        name: 'Africa/Johannesburg',
        label: '(GMT +2:00) Pretoria'
    }, {
        name: 'Asia/Baghdad',
        label: '(GMT +3:00) Baghdad'
    }, {
        name: 'Asia/Riyadh',
        label: '(GMT +3:00) Kuwait, Nairobi, Riyadh'
    }, {
        name: 'Europe/Moscow',
        label: '(GMT +3:00) Moscow, St. Petersburg, Volgograd'
    }, {
        name: 'Asia/Tehran',
        label: '(GMT +3:30) Tehran'
    }, {
        name: 'Asia/Dubai',
        label: '(GMT +4:00) Abu Dhabi, Muscat'
    }, {
        name: 'Asia/Baku',
        label: '(GMT +4:00) Baku, Tbilisi, Yerevan'
    }, {
        name: 'Asia/Kabul',
        label: '(GMT +4:30) Kabul'
    }, {
        name: 'Asia/Karachi',
        label: '(GMT +5:00) Islamabad, Karachi, Tashkent'
    }, {
        name: 'Asia/Yekaterinburg',
        label: '(GMT +5:00) Yekaterinburg'
    }, {
        name: 'Asia/Kolkata',
        label: '(GMT +5:30) Chennai, Calcutta, Mumbai, New Delhi'
    }, {
        name: 'Asia/Kathmandu',
        label: '(GMT +5:45) Katmandu'
    }, {
        name: 'Asia/Almaty',
        label: '(GMT +6:00) Almaty, Novosibirsk'
    }, {
        name: 'Asia/Dhaka',
        label: '(GMT +6:00) Astana, Dhaka, Sri Jayawardenepura'
    }, {
        name: 'Asia/Rangoon',
        label: '(GMT +6:30) Rangoon'
    }, {
        name: 'Asia/Bangkok',
        label: '(GMT +7:00) Bangkok, Hanoi, Jakarta'
    }, {
        name: 'Asia/Krasnoyarsk',
        label: '(GMT +7:00) Krasnoyarsk'
    }, {
        name: 'Asia/Hong_Kong',
        label: '(GMT +8:00) Beijing, Chongqing, Hong Kong, Urumqi'
    }, {
        name: 'Asia/Irkutsk',
        label: '(GMT +8:00) Irkutsk, Ulaan Bataar'
    }, {
        name: 'Asia/Singapore',
        label: '(GMT +8:00) Kuala Lumpur, Perth, Singapore, Taipei'
    }, {
        name: 'Asia/Tokyo',
        label: '(GMT +9:00) Osaka, Sapporo, Tokyo'
    }, {
        name: 'Asia/Seoul',
        label: '(GMT +9:00) Seoul'
    }, {
        name: 'Asia/Yakutsk',
        label: '(GMT +9:00) Yakutsk'
    }, {
        name: 'Australia/Adelaide',
        label: '(GMT +9:30) Adelaide'
    }, {
        name: 'Australia/Darwin',
        label: '(GMT +9:30) Darwin'
    }, {
        name: 'Australia/Brisbane',
        label: '(GMT +10:00) Brisbane, Guam, Port Moresby'
    }, {
        name: 'Australia/Sydney',
        label: '(GMT +10:00) Canberra, Hobart, Melbourne, Sydney, Vladivostok'
    }, {
        name: 'Asia/Magadan',
        label: '(GMT +11:00) Magadan, Soloman Is., New Caledonia'
    }, {
        name: 'Pacific/Auckland',
        label: '(GMT +12:00) Auckland, Wellington'
    }, {
        name: 'Pacific/Fiji',
        label: '(GMT +12:00) Fiji, Kamchatka, Marshall Is.'
    }, {
        name: 'Pacific/Kwajalein',
        label: '(GMT +12:00) International Date Line West'
    }];
});
define('ghost-admin/mirage/models/invite', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberCliMirage.Model.extend({
        role: (0, _emberCliMirage.belongsTo)()
    });
});
define('ghost-admin/mirage/models/notification', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _emberCliMirage.Model.extend({});
});
define('ghost-admin/mirage/models/post', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberCliMirage.Model.extend({
        tags: (0, _emberCliMirage.hasMany)(),
        authors: (0, _emberCliMirage.hasMany)('user')
    });
});
define('ghost-admin/mirage/models/role', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _emberCliMirage.Model.extend({});
});
define('ghost-admin/mirage/models/subscriber', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _emberCliMirage.Model.extend({});
});
define('ghost-admin/mirage/models/tag', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberCliMirage.Model.extend({
        posts: (0, _emberCliMirage.hasMany)()
    });
});
define('ghost-admin/mirage/models/theme', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _emberCliMirage.Model.extend({});
});
define('ghost-admin/mirage/models/user', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _emberCliMirage.Model.extend({
        // used by the serializer to determine whether
        // or not to include the post count
        postCount: false,

        roles: (0, _emberCliMirage.hasMany)(),
        posts: (0, _emberCliMirage.hasMany)()
    });
});
define('ghost-admin/mirage/scenarios/default', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function (server) {
        // Seed your development database using your factories. This
        // data will not be loaded in your tests.

        // server.createList('contact', 10);

        server.createList('subscriber', 125);
        server.createList('tag', 100);
    };
});
define('ghost-admin/mirage/serializers/application', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/utils/inflector'], function (exports, _emberCliMirage, _inflector) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    exports.default = _emberCliMirage.RestSerializer.extend({
        keyForAttribute(attr) {
            return Ember.String.underscore(attr);
        },

        serialize(object, request) {
            // Ember expects pluralized responses for the post, user, and invite models,
            // and this shortcut will ensure that those models are pluralized
            if (this.isModel(object) && ['post', 'user', 'invite'].includes(object.modelName)) {
                object = new _emberCliMirage.Collection(object.modelName, [object]);
            }

            let json = _emberCliMirage.RestSerializer.prototype.serialize.call(this, object, request);

            if (this.isCollection(object) && object.meta) {
                json.meta = object.meta;
            }

            return json;
        },

        // POST and PUT request send data in pluralized attributes for all models,
        // so we extract it here - this allows #normalizedRequestAttrs to work
        // in route functions
        normalize(body, modelName) {
            // sometimes mirage doesn't include a modelName, so we extrapolate it from
            // the first element of Object.keys
            modelName = (0, _inflector.pluralize)(modelName) || Object.keys(body)[0];

            var _ref = body[modelName] || [{}],
                _ref2 = _slicedToArray(_ref, 1);

            let attributes = _ref2[0];

            return { data: { attributes } };
        }
    });
});
define('ghost-admin/mirage/serializers/post', ['exports', 'ghost-admin/mirage/serializers/application'], function (exports, _application) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _application.default.extend({
        embed: true,

        include(request) {
            let includes = [];

            if (request.queryParams.include && request.queryParams.include.indexOf('tags') >= 0) {
                includes.push('tags');
            }

            if (request.queryParams.include && request.queryParams.include.indexOf('authors') >= 0) {
                includes.push('authors');
            }

            return includes;
        }
    });
});
define('ghost-admin/mirage/serializers/user', ['exports', 'ghost-admin/mirage/serializers/application', 'ember-cli-mirage'], function (exports, _application, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _application.default.extend({
        embed: true,

        include(request) {
            if (request.queryParams.include && request.queryParams.include.indexOf('roles') >= 0) {
                return ['roles'];
            }

            return [];
        },

        serialize(object, request) {
            if (this.isCollection(object)) {
                return _application.default.prototype.serialize.call(this, object, request);
            }

            var _RestSerializer$proto = _emberCliMirage.RestSerializer.prototype.serialize.call(this, object, request);

            let user = _RestSerializer$proto.user;


            if (object.postCount) {
                let posts = object.posts.models.length;

                user.count = { posts };
            }

            return { users: [user] };
        }
    });
});
define('ghost-admin/mirage/utils', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.paginatedResponse = paginatedResponse;
    exports.paginateModelCollection = paginateModelCollection;
    exports.maintenanceResponse = maintenanceResponse;
    exports.versionMismatchResponse = versionMismatchResponse;
    function paginatedResponse(modelName) {
        return function (schema, request) {
            let page = +request.queryParams.page || 1;
            let limit = +request.queryParams.limit || 15;
            let collection = schema[modelName].all();

            return paginateModelCollection(modelName, collection, page, limit);
        };
    } /* eslint-disable max-statements-per-line */
    function paginateModelCollection(modelName, collection, page, limit) {
        let pages, next, prev, models;

        if (limit === 'all') {
            pages = 1;
        } else {
            limit = +limit;

            let start = (page - 1) * limit;
            let end = start + limit;

            pages = Math.ceil(collection.models.length / limit);
            models = collection.models.slice(start, end);

            if (start > 0) {
                prev = page - 1;
            }

            if (end < collection.models.length) {
                next = page + 1;
            }
        }

        collection.meta = {
            pagination: {
                page,
                limit,
                pages,
                total: collection.models.length,
                next: next || null,
                prev: prev || null
            }
        };

        if (models) {
            collection.models = models;
        }

        return collection;
    }

    function maintenanceResponse() {
        return new _emberCliMirage.Response(503, {}, {
            errors: [{
                errorType: 'Maintenance'
            }]
        });
    }

    function versionMismatchResponse() {
        return new _emberCliMirage.Response(400, {}, {
            errors: [{
                errorType: 'VersionMismatchError'
            }]
        });
    }
});
define('ghost-admin/mixins/body-event-listener', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    function K() {
        return this;
    }

    // Code modified from Addepar/ember-widgets
    // https://github.com/Addepar/ember-widgets/blob/master/src/mixins.coffee#L39

    exports.default = Ember.Mixin.create({
        bodyElementSelector: 'html',
        bodyClick: K,

        init() {
            this._super(...arguments);

            return Ember.run.next(this, this._setupDocumentHandlers);
        },

        willDestroy() {
            this._super(...arguments);

            return this._removeDocumentHandlers();
        },

        _setupDocumentHandlers() {
            if (this._clickHandler) {
                return;
            }

            this._clickHandler = event => this.bodyClick(event);

            return Ember.$(this.get('bodyElementSelector')).on('click', this._clickHandler);
        },

        _removeDocumentHandlers() {
            Ember.$(this.get('bodyElementSelector')).off('click', this._clickHandler);
            this._clickHandler = null;
        },

        // http://stackoverflow.com/questions/152975/how-to-detect-a-click-outside-an-element
        click(event) {
            return event.stopPropagation();
        }
    });
});
define('ghost-admin/mixins/current-user-settings', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Mixin.create({
        transitionAuthor() {
            return user => {
                if (user.get('isAuthorOrContributor')) {
                    return this.transitionTo('team.user', user);
                }

                return user;
            };
        },

        transitionEditor() {
            return user => {
                if (user.get('isEditor')) {
                    return this.transitionTo('team');
                }

                return user;
            };
        }
    });
});
define('ghost-admin/mixins/dropdown-mixin', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Mixin.create(Ember.Evented, {
        classNameBindings: ['isOpen:open:closed'],
        isOpen: false,

        click(event) {
            this._super(event);

            return event.stopPropagation();
        }
    });
});
define('ghost-admin/mixins/pagination', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Mixin.create({
        notifications: Ember.inject.service(),

        paginationModel: null,
        paginationSettings: null,

        // add a hook so that routes/controllers can do something with the meta data
        paginationMeta: Ember.computed({
            get() {
                return this._paginationMeta;
            },
            set(key, value) {
                if (this.didReceivePaginationMeta) {
                    this.didReceivePaginationMeta(value);
                }
                this._paginationMeta = value;
                return value;
            }
        }),

        init() {
            // NOTE: errors in Ember 3.0 because this.paginationSettings.isDescriptor
            // no longer exists as CPs will be available directly with no getter.
            // Commented out for now as this whole mixin will soon disappear
            //
            // don't merge defaults if paginationSettings is a CP
            // if (!this.paginationSettings.isDescriptor) {
            //     let paginationSettings = this.get('paginationSettings');
            //     let settings = assign({}, defaultPaginationSettings, paginationSettings);
            //
            //     this.set('paginationSettings', settings);
            // }

            this.set('paginationMeta', {});

            this._super(...arguments);
        },

        reportLoadError(error) {
            this.get('notifications').showAPIError(error, { key: 'pagination.load.failed' });
        },

        loadFirstPage(transition) {
            let paginationSettings = this.get('paginationSettings');
            let modelName = this.get('paginationModel');

            this.set('paginationSettings.page', 1);

            this.set('isLoading', true);

            return this.get('store').query(modelName, paginationSettings).then(results => {
                this.set('paginationMeta', results.meta);
                return results;
            }).catch(error => {
                // if we have a transition we're executing in a route hook so we
                // want to throw in order to trigger the global error handler
                if (transition) {
                    throw error;
                } else {
                    this.reportLoadError(error);
                }
            }).finally(() => {
                this.set('isLoading', false);
            });
        },

        actions: {
            loadFirstPage() {
                return this.loadFirstPage();
            },

            /**
             * Loads the next paginated page of posts into the ember-data store. Will cause the posts list UI to update.
             * @return
             */
            loadNextPage() {
                let store = this.get('store');
                let modelName = this.get('paginationModel');
                let metadata = this.get('paginationMeta');
                let nextPage = metadata.pagination && metadata.pagination.next;
                let paginationSettings = this.get('paginationSettings');

                if (nextPage && !this.get('isLoading')) {
                    this.set('isLoading', true);
                    this.set('paginationSettings.page', nextPage);

                    return store.query(modelName, paginationSettings).then(results => {
                        this.set('paginationMeta', results.meta);
                        return results;
                    }).catch(error => {
                        this.reportLoadError(error);
                    }).finally(() => {
                        this.set('isLoading', false);
                    });
                } else {
                    return Ember.RSVP.resolve([]);
                }
            },

            resetPagination() {
                this.set('paginationSettings.page', 1);
            }
        }
    });
});
define('ghost-admin/mixins/settings-menu-component', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Mixin.create({
        showSettingsMenu: false,

        isViewingSubview: Ember.computed('showSettingsMenu', {
            get() {
                return false;
            },
            set(key, value) {
                // Not viewing a subview if we can't even see the PSM
                if (!this.get('showSettingsMenu')) {
                    return false;
                }
                return value;
            }
        }),

        actions: {
            showSubview() {
                this.set('isViewingSubview', true);
            },

            closeSubview() {
                this.set('isViewingSubview', false);
            }
        }
    });
});
define('ghost-admin/mixins/shortcuts-route', ['exports', 'ghost-admin/mixins/shortcuts'], function (exports, _shortcuts) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Mixin.create(_shortcuts.default, {
        activate() {
            this._super(...arguments);
            this.registerShortcuts();
        },

        deactivate() {
            this._super(...arguments);
            this.removeShortcuts();
        }
    });
});
define('ghost-admin/mixins/shortcuts', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    // Configure KeyMaster to respond to all shortcuts,
    // even inside of
    // input, textarea, and select.
    key.filter = function () {
        return true;
    }; /* global key */


    key.setScope('default');
    /**
     * Only routes can implement shortcuts.
     * If you need to trigger actions on the controller,
     * simply call them with `this.get('controller').send('action')`.
     *
     * To implement shortcuts, add this mixin to your `extend()`,
     * and implement a `shortcuts` hash.
     * In this hash, keys are shortcut combinations and values are route action names.
     *  (see [keymaster docs](https://github.com/madrobby/keymaster/blob/master/README.markdown)),
     *
     * ```javascript
     * shortcuts: {
     *     'ctrl+s, command+s': 'save'
     * }
     * ```
     * For more complex actions, shortcuts can instead have their value
     * be an object like {action, options}
     * ```javascript
     * shortcuts: {
     *      'ctrl+k': {action: 'markdownShortcut', options: 'createLink'}
     * }
     * ```
     * You can set the scope of your shortcut by passing a scope property.
     * ```javascript
     * shortcuts : {
     *   'enter': {action : 'confirmModal', scope: 'modal'}
     * }
     * ```
     * If you don't specify a scope, we use a default scope called "default".
     * To have all your shortcut work in all scopes, give it the scope "all".
     * Find out more at the keymaster docs
     */
    exports.default = Ember.Mixin.create({

        registerShortcuts() {
            let shortcuts = this.get('shortcuts');

            Object.keys(shortcuts).forEach(shortcut => {
                let scope = shortcuts[shortcut].scope || 'default';
                let action = shortcuts[shortcut];
                let options;

                if (Ember.typeOf(action) !== 'string') {
                    options = action.options;
                    action = action.action;
                }

                key(shortcut, scope, event => {
                    // stop things like ctrl+s from actually opening a save dialogue
                    event.preventDefault();
                    Ember.run(this, function () {
                        this.send(action, options);
                    });
                });
            });
        },

        removeShortcuts() {
            let shortcuts = this.get('shortcuts');

            Object.keys(shortcuts).forEach(shortcut => {
                let scope = shortcuts[shortcut].scope || 'default';
                key.unbind(shortcut, scope);
            });
        },

        willDestroy() {
            this._super(...arguments);
            this.removeShortcuts();
        }
    });
});
define('ghost-admin/mixins/slug-url', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Mixin.create({
        buildURL(_modelName, _id, _snapshot, _requestType, query) {
            let url = this._super(...arguments);

            if (query && !Ember.isBlank(query.slug)) {
                url += `slug/${query.slug}/`;
                delete query.slug;
            }

            return url;
        }
    });
});
define('ghost-admin/mixins/style-body', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Mixin.create({
        activate() {
            let cssClasses = this.get('classNames');

            this._super(...arguments);

            if (cssClasses) {
                Ember.run.schedule('afterRender', null, function () {
                    cssClasses.forEach(curClass => {
                        Ember.$('body').addClass(curClass);
                    });
                });
            }
        },

        deactivate() {
            let cssClasses = this.get('classNames');

            this._super(...arguments);

            Ember.run.schedule('afterRender', null, function () {
                cssClasses.forEach(curClass => {
                    Ember.$('body').removeClass(curClass);
                });
            });
        }
    });
});
define('ghost-admin/mixins/text-input', ['exports', 'npm:current-device'], function (exports, _npmCurrentDevice) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    const keyCodes = {
        13: 'Enter',
        9: 'Tab'
    };

    exports.default = Ember.Mixin.create({
        attributeBindings: ['autofocus'],

        selectOnClick: false,
        shouldFocus: false,
        stopEnterKeyDownPropagation: false,

        autofocus: Ember.computed(function () {
            if (this.get('shouldFocus')) {
                return _npmCurrentDevice.default.ios() ? false : 'autofocus';
            }

            return false;
        }),

        didInsertElement() {
            this._super(...arguments);
            this._focus();
        },

        click(event) {
            if (this.get('selectOnClick')) {
                event.currentTarget.select();
            }
        },

        keyDown(event) {
            // stop event propagation when pressing "enter"
            // most useful in the case when undesired (global) keyboard shortcuts
            // are getting triggered while interacting with this particular input element.
            if (event.keyCode === 13 && this.get('stopEnterKeyDownPropagation')) {
                event.stopPropagation();

                return true;
            }

            // prevent default TAB behaviour if we have a keyEvent for it
            if (event.keyCode === 9 && typeof this.get('keyEvents.Tab') === 'function') {
                event.preventDefault();
            }

            this._super(...arguments);
        },

        keyPress(event) {
            // prevent default ENTER behaviour if we have a keyEvent for it
            if (event.keyCode === 13 && typeof this.get('keyEvents.Enter') === 'function') {
                event.preventDefault();
            }

            this._super(...arguments);
        },

        keyUp(event) {
            if (event.keyCode) {
                let methodName = this._getMethodFromKeyCode(event.keyCode);
                let method = this.get(`keyEvents.${methodName}`);
                if (method) {
                    method(event.target.value);
                }
            }
        },

        _focus() {
            // Until mobile safari has better support
            // for focusing, we just ignore it
            if (this.get('shouldFocus') && !_npmCurrentDevice.default.ios()) {
                this.element.focus();
            }
        },

        _getMethodFromKeyCode(keyCode) {
            let methodName = keyCodes[keyCode.toString()];
            return methodName;
        }
    });
});
define('ghost-admin/mixins/unauthenticated-route-mixin', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    exports.default = Ember.Mixin.create({

        ajax: Ember.inject.service(),
        ghostPaths: Ember.inject.service(),
        session: Ember.inject.service(),

        routeIfAlreadyAuthenticated: 'posts',

        beforeModel() {
            let authUrl = this.get('ghostPaths.url').api('authentication', 'setup');

            // check the state of the setup process via the API
            return this.get('ajax').request(authUrl).then(result => {
                var _result$setup = _slicedToArray(result.setup, 1);

                let setup = _result$setup[0];


                if (setup.status !== true) {
                    this.transitionTo('setup');
                } else {
                    // NOTE: this is the same as ESA's UnauthenticatedRouteMixin,
                    // adding that mixin to this and calling _super wasn't calling
                    // the ESA mixin's beforeModel method
                    if (this.get('session').get('isAuthenticated')) {
                        let routeIfAlreadyAuthenticated = this.get('routeIfAlreadyAuthenticated');

                        return this.transitionTo(routeIfAlreadyAuthenticated);
                    } else {
                        return this._super(...arguments);
                    }
                }
            });
        }
    });
});
define('ghost-admin/mixins/validation-engine', ['exports', 'ember-data', 'ghost-admin/validators/invite-user', 'ember-data/model', 'ghost-admin/validators/nav-item', 'ghost-admin/validators/post', 'ghost-admin/validators/reset', 'ghost-admin/validators/setting', 'ghost-admin/validators/setup', 'ghost-admin/validators/signin', 'ghost-admin/validators/signup', 'ghost-admin/validators/slack-integration', 'ghost-admin/validators/subscriber', 'ghost-admin/validators/tag-settings', 'ghost-admin/validators/user'], function (exports, _emberData, _inviteUser, _model, _navItem, _post, _reset, _setting, _setup, _signin, _signup, _slackIntegration, _subscriber, _tagSettings, _user) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    const Errors = _emberData.default.Errors;
    exports.default = Ember.Mixin.create({
        // these validators can be passed a model to validate when the class that
        // mixes in the ValidationEngine declares a validationType equal to a key on this object.
        // the model is either passed in via `this.validate({ model: object })`
        // or by calling `this.validate()` without the model property.
        // in that case the model will be the class that the ValidationEngine
        // was mixed into, i.e. the controller or Ember Data model.
        validators: {
            inviteUser: _inviteUser.default,
            navItem: _navItem.default,
            post: _post.default,
            reset: _reset.default,
            setting: _setting.default,
            setup: _setup.default,
            signin: _signin.default,
            signup: _signup.default,
            slackIntegration: _slackIntegration.default,
            subscriber: _subscriber.default,
            tag: _tagSettings.default,
            user: _user.default
        },

        // This adds the Errors object to the validation engine, and shouldn't affect
        // ember-data models because they essentially use the same thing
        errors: null,

        // Store whether a property has been validated yet, so that we know whether or not
        // to show error / success validation for a field
        hasValidated: null,

        init() {
            this._super(...arguments);
            this.set('errors', Errors.create());
            this.set('hasValidated', Ember.A());
        },

        /**
        * Passes the model to the validator specified by validationType.
        * Returns a promise that will resolve if validation succeeds, and reject if not.
        * Some options can be specified:
        *
        * `model: Object` - you can specify the model to be validated, rather than pass the default value of `this`,
        *                   the class that mixes in this mixin.
        *
        * `property: String` - you can specify a specific property to validate. If
        * 					   no property is specified, the entire model will be
        * 					   validated
        */
        validate(opts) {
            let model = this;
            let hasValidated, type, validator;

            opts = opts || {};

            if (opts.model) {
                model = opts.model;
            } else if (this instanceof _model.default) {
                model = this;
            } else if (this.get('model')) {
                model = this.get('model');
            }

            type = this.get('validationType') || model.get('validationType');
            validator = this.get(`validators.${type}`) || model.get(`validators.${type}`);
            hasValidated = this.get('hasValidated');

            opts.validationType = type;

            return new Ember.RSVP.Promise((resolve, reject) => {
                let passed;

                if (!type || !validator) {
                    return reject([`The validator specified, "${type}", did not exist!`]);
                }

                if (opts.property) {
                    // If property isn't in `hasValidated`, add it to mark that this field can show a validation result
                    hasValidated.addObject(opts.property);
                    model.get('errors').remove(opts.property);
                } else {
                    model.get('errors').clear();
                }

                passed = validator.check(model, opts.property);

                return passed ? resolve() : reject();
            });
        },

        /**
        * The primary goal of this method is to override the `save` method on Ember Data models.
        * This allows us to run validation before actually trying to save the model to the server.
        * You can supply options to be passed into the `validate` method, since the ED `save` method takes no options.
        */
        save(options) {
            let _super = this._super;


            options = options || {};
            options.wasSave = true;

            // model.destroyRecord() calls model.save() behind the scenes.
            // in that case, we don't need validation checks or error propagation,
            // because the model itself is being destroyed.
            if (this.get('isDeleted')) {
                return this._super(...arguments);
            }

            // If validation fails, reject with validation errors.
            // If save to the server fails, reject with server response.
            return this.validate(options).then(() => {
                if (typeof this.beforeSave === 'function') {
                    this.beforeSave();
                }
                return _super.call(this, options);
            }).catch(result => {
                // server save failed or validator type doesn't exist
                if (result && !Ember.isArray(result)) {
                    throw result;
                }

                return Ember.RSVP.reject(result);
            });
        },

        actions: {
            validate(property) {
                this.validate({ property });
            }
        }
    });
});
define('ghost-admin/mixins/validation-state', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Mixin.create({

        errors: null,
        property: '',
        hasValidated: Ember.A(),

        hasError: false,

        setHasError() {
            let property = this.get('property');
            let errors = this.get('errors');
            let hasValidated = this.get('hasValidated');

            // if we aren't looking at a specific property we always want an error class
            if (!property && errors && !errors.get('isEmpty')) {
                this.set('hasError', true);
                return;
            }

            // If we haven't yet validated this field, there is no validation class needed
            if (!hasValidated || !hasValidated.includes(property)) {
                this.set('hasError', false);
                return;
            }

            if (errors && !Ember.isEmpty(errors.errorsFor(property))) {
                this.set('hasError', true);
                return;
            }

            this.set('hasError', false);
        },

        // eslint-disable-next-line ghost/ember/no-observers
        hasErrorObserver: Ember.observer('errors.[]', 'property', 'hasValidated.[]', function () {
            Ember.run.once(this, 'setHasError');
            // this.setHasError();
        }).on('init')

    });
});
define('ghost-admin/models/coordinator', ['exports', 'ghost-admin/models/obj-hash'], function (exports, _objHash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Object.extend(Ember.Evented, {
    objectMap: Ember.computed(function () {
      return _objHash.default.create();
    }),

    getObject: function getObject(id, ops) {
      ops = ops || {};
      var payload = this.get('objectMap').getObj(id);

      if (payload.ops.source) {
        payload.ops.source.sendAction('action', payload.obj);
      }

      if (payload.ops.target) {
        payload.ops.target.sendAction('action', payload.obj);
      }

      this.trigger("objectMoved", { obj: payload.obj, source: payload.ops.source, target: ops.target });

      return payload.obj;
    },

    setObject: function setObject(obj, ops) {
      ops = ops || {};
      return this.get('objectMap').add({ obj: obj, ops: ops });
    }
  });
});
define('ghost-admin/models/invite', ['exports', 'ember-data/model', 'ember-data/attr', 'ember-data/relationships'], function (exports, _model, _attr, _relationships) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _model.default.extend({
        token: (0, _attr.default)('string'),
        email: (0, _attr.default)('string'),
        expires: (0, _attr.default)('number'),
        createdAtUTC: (0, _attr.default)('moment-utc'),
        createdBy: (0, _attr.default)('number'),
        updatedAtUTC: (0, _attr.default)('moment-utc'),
        updatedBy: (0, _attr.default)('number'),
        status: (0, _attr.default)('string'),
        role: (0, _relationships.belongsTo)('role', { async: false }),

        ajax: Ember.inject.service(),
        ghostPaths: Ember.inject.service(),

        resend() {
            let fullInviteData = this.toJSON();

            let inviteData = {
                email: fullInviteData.email,
                role_id: fullInviteData.role
            };

            let inviteUrl = this.get('ghostPaths.url').api('invites');

            return this.get('ajax').post(inviteUrl, {
                data: JSON.stringify({ invites: [inviteData] }),
                contentType: 'application/json'
            });
        }
    });
});
define('ghost-admin/models/navigation-item', ['exports', 'ghost-admin/mixins/validation-engine'], function (exports, _validationEngine) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Object.extend(_validationEngine.default, {
        label: '',
        url: '',
        isNew: false,

        validationType: 'navItem',

        isComplete: Ember.computed('label', 'url', function () {
            var _getProperties = this.getProperties('label', 'url');

            let label = _getProperties.label,
                url = _getProperties.url;


            return !Ember.isBlank(label) && !Ember.isBlank(url);
        }),

        isBlank: Ember.computed('label', 'url', function () {
            var _getProperties2 = this.getProperties('label', 'url');

            let label = _getProperties2.label,
                url = _getProperties2.url;


            return Ember.isBlank(label) && Ember.isBlank(url);
        })
    });
});
define('ghost-admin/models/notification', ['exports', 'ember-data/model', 'ember-data/attr'], function (exports, _model, _attr) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _model.default.extend({
        custom: (0, _attr.default)('boolean'),
        dismissible: (0, _attr.default)('boolean'),
        key: (0, _attr.default)('string'),
        message: (0, _attr.default)('string'),
        status: (0, _attr.default)('string'),
        type: (0, _attr.default)('string')
    });
});
define('ghost-admin/models/obj-hash', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Object.extend({
    contentLength: 0,
    length: Ember.computed.alias('contentLength'),

    init: function init() {
      this._super();
      this.content = {};
    },

    add: function add(obj) {
      var id = this.generateId();
      this.get('content')[id] = obj;
      this.incrementProperty("contentLength");
      return id;
    },

    getObj: function getObj(key) {
      var res = this.get('content')[key];
      if (!res) {
        throw "no obj for key " + key;
      }
      return res;
    },

    generateId: function generateId() {
      var num = Math.random() * 1000000000000.0;
      num = parseInt(num);
      num = "" + num;
      return num;
    },

    keys: function keys() {
      var res = [];
      for (var key in this.get('content')) {
        res.push(key);
      }
      return Ember.A(res);
    }

  });
});
define('ghost-admin/models/post', ['exports', 'ember-data/model', 'ghost-admin/mixins/validation-engine', 'ember-data/attr', 'ghost-admin/utils/bound-one-way', 'moment', 'ember-data/relationships'], function (exports, _model, _validationEngine, _attr, _boundOneWay, _moment, _relationships) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    const Comparable = Ember.Comparable;


    function statusCompare(postA, postB) {
        let status1 = postA.get('status');
        let status2 = postB.get('status');

        // if any of those is empty
        if (!status1 && !status2) {
            return 0;
        }

        if (!status1 && status2) {
            return -1;
        }

        if (!status2 && status1) {
            return 1;
        }

        // We have to make sure, that scheduled posts will be listed first
        // after that, draft and published will be sorted alphabetically and don't need
        // any manual comparison.

        if (status1 === 'scheduled' && (status2 === 'draft' || status2 === 'published')) {
            return -1;
        }

        if (status2 === 'scheduled' && (status1 === 'draft' || status1 === 'published')) {
            return 1;
        }

        return Ember.compare(status1.valueOf(), status2.valueOf());
    }

    function publishedAtCompare(postA, postB) {
        let published1 = postA.get('publishedAtUTC');
        let published2 = postB.get('publishedAtUTC');

        if (!published1 && !published2) {
            return 0;
        }

        if (!published1 && published2) {
            return -1;
        }

        if (!published2 && published1) {
            return 1;
        }

        return Ember.compare(published1.valueOf(), published2.valueOf());
    }

    exports.default = _model.default.extend(Comparable, _validationEngine.default, {
        config: Ember.inject.service(),
        feature: Ember.inject.service(),
        ghostPaths: Ember.inject.service(),
        clock: Ember.inject.service(),
        settings: Ember.inject.service(),

        validationType: 'post',

        createdAtUTC: (0, _attr.default)('moment-utc'),
        customExcerpt: (0, _attr.default)('string'),
        featured: (0, _attr.default)('boolean', { defaultValue: false }),
        featureImage: (0, _attr.default)('string'),
        codeinjectionFoot: (0, _attr.default)('string', { defaultValue: '' }),
        codeinjectionHead: (0, _attr.default)('string', { defaultValue: '' }),
        customTemplate: (0, _attr.default)('string'),
        ogImage: (0, _attr.default)('string'),
        ogTitle: (0, _attr.default)('string'),
        ogDescription: (0, _attr.default)('string'),
        twitterImage: (0, _attr.default)('string'),
        twitterTitle: (0, _attr.default)('string'),
        twitterDescription: (0, _attr.default)('string'),
        html: (0, _attr.default)('string'),
        locale: (0, _attr.default)('string'),
        metaDescription: (0, _attr.default)('string'),
        metaTitle: (0, _attr.default)('string'),
        mobiledoc: (0, _attr.default)('json-string'),
        page: (0, _attr.default)('boolean', { defaultValue: false }),
        plaintext: (0, _attr.default)('string'),
        publishedAtUTC: (0, _attr.default)('moment-utc'),
        slug: (0, _attr.default)('string'),
        status: (0, _attr.default)('string', { defaultValue: 'draft' }),
        title: (0, _attr.default)('string', { defaultValue: '' }),
        updatedAtUTC: (0, _attr.default)('moment-utc'),
        updatedBy: (0, _attr.default)('number'),
        url: (0, _attr.default)('string'),
        uuid: (0, _attr.default)('string'),

        authors: (0, _relationships.hasMany)('user', {
            embedded: 'always',
            async: false
        }),
        createdBy: (0, _relationships.belongsTo)('user', { async: true }),
        publishedBy: (0, _relationships.belongsTo)('user', { async: true }),
        tags: (0, _relationships.hasMany)('tag', {
            embedded: 'always',
            async: false
        }),

        primaryAuthor: Ember.computed('authors.[]', function () {
            return this.get('authors.firstObject');
        }),

        scratch: null,
        titleScratch: null,

        // HACK: used for validation so that date/time can be validated based on
        // eventual status rather than current status
        statusScratch: null,

        // For use by date/time pickers - will be validated then converted to UTC
        // on save. Updated by an observer whenever publishedAtUTC changes.
        // Everything that revolves around publishedAtUTC only cares about the saved
        // value so this should be almost entirely internal
        publishedAtBlogDate: '',
        publishedAtBlogTime: '',

        customExcerptScratch: (0, _boundOneWay.default)('customExcerpt'),
        codeinjectionFootScratch: (0, _boundOneWay.default)('codeinjectionFoot'),
        codeinjectionHeadScratch: (0, _boundOneWay.default)('codeinjectionHead'),
        metaDescriptionScratch: (0, _boundOneWay.default)('metaDescription'),
        metaTitleScratch: (0, _boundOneWay.default)('metaTitle'),
        ogDescriptionScratch: (0, _boundOneWay.default)('ogDescription'),
        ogTitleScratch: (0, _boundOneWay.default)('ogTitle'),
        twitterDescriptionScratch: (0, _boundOneWay.default)('twitterDescription'),
        twitterTitleScratch: (0, _boundOneWay.default)('twitterTitle'),

        isPublished: Ember.computed.equal('status', 'published'),
        isDraft: Ember.computed.equal('status', 'draft'),
        internalTags: Ember.computed.filterBy('tags', 'isInternal', true),
        isScheduled: Ember.computed.equal('status', 'scheduled'),

        absoluteUrl: Ember.computed('url', 'ghostPaths.url', 'config.blogUrl', function () {
            let blogUrl = this.get('config.blogUrl');
            let postUrl = this.get('url');
            return this.get('ghostPaths.url').join(blogUrl, postUrl);
        }),

        previewUrl: Ember.computed('uuid', 'ghostPaths.url', 'config.blogUrl', function () {
            let blogUrl = this.get('config.blogUrl');
            let uuid = this.get('uuid');
            // routeKeywords.preview: 'p'
            let previewKeyword = 'p';
            // New posts don't have a preview
            if (!uuid) {
                return '';
            }
            return this.get('ghostPaths.url').join(blogUrl, previewKeyword, uuid);
        }),

        // check every second to see if we're past the scheduled time
        // will only re-compute if this property is being observed elsewhere
        pastScheduledTime: Ember.computed('isScheduled', 'publishedAtUTC', 'clock.second', function () {
            if (this.get('isScheduled')) {
                let now = _moment.default.utc();
                let publishedAtUTC = this.get('publishedAtUTC') || now;
                let pastScheduledTime = publishedAtUTC.diff(now, 'hours', true) < 0;

                // force a recompute
                this.get('clock.second');

                return pastScheduledTime;
            } else {
                return false;
            }
        }),

        publishedAtBlogTZ: Ember.computed('publishedAtBlogDate', 'publishedAtBlogTime', 'settings.activeTimezone', {
            get() {
                return this._getPublishedAtBlogTZ();
            },
            set(key, value) {
                let momentValue = value ? (0, _moment.default)(value) : null;
                this._setPublishedAtBlogStrings(momentValue);
                return this._getPublishedAtBlogTZ();
            }
        }),

        _getPublishedAtBlogTZ() {
            let publishedAtUTC = this.get('publishedAtUTC');
            let publishedAtBlogDate = this.get('publishedAtBlogDate');
            let publishedAtBlogTime = this.get('publishedAtBlogTime');
            let blogTimezone = this.get('settings.activeTimezone');

            if (!publishedAtUTC && Ember.isBlank(publishedAtBlogDate) && Ember.isBlank(publishedAtBlogTime)) {
                return null;
            }

            if (publishedAtBlogDate && publishedAtBlogTime) {
                let publishedAtBlog = _moment.default.tz(`${publishedAtBlogDate} ${publishedAtBlogTime}`, blogTimezone);

                /**
                 * Note:
                 * If you create a post and publish it, we send seconds to the database.
                 * If you edit the post afterwards, ember would send the date without seconds, because
                 * the `publishedAtUTC` is based on `publishedAtBlogTime`, which is only in seconds.
                 * The date time picker doesn't use seconds.
                 *
                 * This condition prevents the case:
                 *   - you edit a post, but you don't change the published_at time
                 *   - we keep the original date with seconds
                 *
                 * See https://github.com/TryGhost/Ghost/issues/8603#issuecomment-309538395.
                 */
                if (publishedAtUTC && publishedAtBlog.diff(publishedAtUTC.clone().startOf('minutes')) === 0) {
                    return publishedAtUTC;
                }

                return publishedAtBlog;
            } else {
                return _moment.default.tz(this.get('publishedAtUTC'), blogTimezone);
            }
        },

        // TODO: is there a better way to handle this?
        // eslint-disable-next-line ghost/ember/no-observers
        _setPublishedAtBlogTZ: Ember.observer('publishedAtUTC', 'settings.activeTimezone', function () {
            let publishedAtUTC = this.get('publishedAtUTC');
            this._setPublishedAtBlogStrings(publishedAtUTC);
        }).on('init'),

        _setPublishedAtBlogStrings(momentDate) {
            if (momentDate) {
                let blogTimezone = this.get('settings.activeTimezone');
                let publishedAtBlog = _moment.default.tz(momentDate, blogTimezone);

                this.set('publishedAtBlogDate', publishedAtBlog.format('YYYY-MM-DD'));
                this.set('publishedAtBlogTime', publishedAtBlog.format('HH:mm'));
            } else {
                this.set('publishedAtBlogDate', '');
                this.set('publishedAtBlogTime', '');
            }
        },

        // remove client-generated tags, which have `id: null`.
        // Ember Data won't recognize/update them automatically
        // when returned from the server with ids.
        // https://github.com/emberjs/data/issues/1829
        updateTags() {
            let tags = this.get('tags');
            let oldTags = tags.filterBy('id', null);

            tags.removeObjects(oldTags);
            oldTags.invoke('deleteRecord');
        },

        isAuthoredByUser(user) {
            return this.get('authors').includes(user);
        },

        // a custom sort function is needed in order to sort the posts list the same way the server would:
        //     status: scheduled, draft, published
        //     publishedAt: DESC
        //     updatedAt: DESC
        //     id: DESC
        compare(postA, postB) {
            let updated1 = postA.get('updatedAtUTC');
            let updated2 = postB.get('updatedAtUTC');
            let idResult, publishedAtResult, statusResult, updatedAtResult;

            // when `updatedAt` is undefined, the model is still
            // being written to with the results from the server
            if (postA.get('isNew') || !updated1) {
                return -1;
            }

            if (postB.get('isNew') || !updated2) {
                return 1;
            }

            // TODO: revisit the ID sorting because we no longer have auto-incrementing IDs
            idResult = Ember.compare(postA.get('id'), postB.get('id'));
            statusResult = statusCompare(postA, postB);
            updatedAtResult = Ember.compare(updated1.valueOf(), updated2.valueOf());
            publishedAtResult = publishedAtCompare(postA, postB);

            if (statusResult === 0) {
                if (publishedAtResult === 0) {
                    if (updatedAtResult === 0) {
                        // This should be DESC
                        return idResult * -1;
                    }
                    // This should be DESC
                    return updatedAtResult * -1;
                }
                // This should be DESC
                return publishedAtResult * -1;
            }

            return statusResult;
        },

        // this is a hook added by the ValidationEngine mixin and is called after
        // successful validation and before this.save()
        //
        // the publishedAtBlog{Date/Time} strings are set separately so they can be
        // validated, grab that time if it exists and set the publishedAtUTC
        beforeSave() {
            let publishedAtBlogTZ = this.get('publishedAtBlogTZ');
            let publishedAtUTC = publishedAtBlogTZ ? publishedAtBlogTZ.utc() : null;
            this.set('publishedAtUTC', publishedAtUTC);
        }
    });
});
define('ghost-admin/models/role', ['exports', 'ember-data/model', 'ember-data/attr'], function (exports, _model, _attr) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _model.default.extend({
        name: (0, _attr.default)('string'),
        description: (0, _attr.default)('string'),
        createdAtUTC: (0, _attr.default)('moment-utc'),
        updatedAtUTC: (0, _attr.default)('moment-utc'),
        createdBy: (0, _attr.default)('number'),
        updatedBy: (0, _attr.default)('number'),

        lowerCaseName: Ember.computed('name', function () {
            return this.get('name').toLocaleLowerCase();
        })
    });
});
define('ghost-admin/models/setting', ['exports', 'ember-data/model', 'ghost-admin/mixins/validation-engine', 'ember-data/attr'], function (exports, _model, _validationEngine, _attr) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _model.default.extend(_validationEngine.default, {
        validationType: 'setting',

        title: (0, _attr.default)('string'),
        description: (0, _attr.default)('string'),
        logo: (0, _attr.default)('string'),
        coverImage: (0, _attr.default)('string'),
        icon: (0, _attr.default)('string'),
        defaultLocale: (0, _attr.default)('string'),
        forceI18n: (0, _attr.default)('boolean'),
        activeTimezone: (0, _attr.default)('string', { defaultValue: 'Etc/UTC' }),
        ghostHead: (0, _attr.default)('string'),
        ghostFoot: (0, _attr.default)('string'),
        facebook: (0, _attr.default)('facebook-url-user'),
        twitter: (0, _attr.default)('twitter-url-user'),
        labs: (0, _attr.default)('string'),
        navigation: (0, _attr.default)('navigation-settings'),
        isPrivate: (0, _attr.default)('boolean'),
        publicHash: (0, _attr.default)('string'),
        password: (0, _attr.default)('string'),
        slack: (0, _attr.default)('slack-settings'),
        amp: (0, _attr.default)('boolean'),
        unsplash: (0, _attr.default)('unsplash-settings', {
            defaultValue() {
                return { isActive: true };
            }
        })
    });
});
define('ghost-admin/models/slack-integration', ['exports', 'ghost-admin/mixins/validation-engine'], function (exports, _validationEngine) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Object.extend(_validationEngine.default, {
        // values entered here will act as defaults
        url: '',

        validationType: 'slackIntegration',

        isActive: Ember.computed('url', function () {
            let url = this.get('url');
            return !Ember.isBlank(url);
        })
    });
});
define('ghost-admin/models/subscriber', ['exports', 'ember-data/model', 'ghost-admin/mixins/validation-engine', 'ember-data/attr', 'ember-data/relationships'], function (exports, _model, _validationEngine, _attr, _relationships) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _model.default.extend(_validationEngine.default, {
        validationType: 'subscriber',

        name: (0, _attr.default)('string'),
        email: (0, _attr.default)('string'),
        status: (0, _attr.default)('string'),
        subscribedUrl: (0, _attr.default)('string'),
        subscribedReferrer: (0, _attr.default)('string'),
        unsubscribedUrl: (0, _attr.default)('string'),
        unsubscribedAtUTC: (0, _attr.default)('moment-utc'),
        createdAtUTC: (0, _attr.default)('moment-utc'),
        updatedAtUTC: (0, _attr.default)('moment-utc'),
        createdBy: (0, _attr.default)('number'),
        updatedBy: (0, _attr.default)('number'),

        post: (0, _relationships.belongsTo)('post')
    });
});
define('ghost-admin/models/tag', ['exports', 'ember-data/model', 'ghost-admin/mixins/validation-engine', 'ember-data/attr'], function (exports, _model, _validationEngine, _attr) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _model.default.extend(_validationEngine.default, {
        validationType: 'tag',

        name: (0, _attr.default)('string'),
        slug: (0, _attr.default)('string'),
        description: (0, _attr.default)('string'),
        parent: (0, _attr.default)('string'), // unused
        metaTitle: (0, _attr.default)('string'),
        metaDescription: (0, _attr.default)('string'),
        featureImage: (0, _attr.default)('string'),
        visibility: (0, _attr.default)('string', { defaultValue: 'public' }),
        createdAtUTC: (0, _attr.default)('moment-utc'),
        updatedAtUTC: (0, _attr.default)('moment-utc'),
        createdBy: (0, _attr.default)('number'),
        updatedBy: (0, _attr.default)('number'),
        count: (0, _attr.default)('raw'),

        isInternal: Ember.computed.equal('visibility', 'internal'),
        isPublic: Ember.computed.equal('visibility', 'public'),

        feature: Ember.inject.service(),

        updateVisibility() {
            let internalRegex = /^#.?/;
            this.set('visibility', internalRegex.test(this.get('name')) ? 'internal' : 'public');
        },

        save() {
            if (this.get('changedAttributes.name') && !this.get('isDeleted')) {
                this.updateVisibility();
            }
            return this._super(...arguments);
        }
    });
});
define('ghost-admin/models/theme', ['exports', 'ember-data/model', 'ember-data/attr'], function (exports, _model, _attr) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _model.default.extend({
        active: (0, _attr.default)('boolean'),
        errors: (0, _attr.default)('raw'),
        name: (0, _attr.default)('string'),
        package: (0, _attr.default)('raw'),
        templates: (0, _attr.default)('raw', { defaultValue: () => [] }),
        warnings: (0, _attr.default)('raw'),

        customTemplates: Ember.computed('templates.[]', function () {
            let templates = this.get('templates') || [];

            return templates.filter(function (template) {
                return Ember.isBlank(template.slug);
            });
        }),

        slugTemplates: Ember.computed('templates.[]', function () {
            let templates = this.get('templates') || [];

            return templates.filter(function (template) {
                return !Ember.isBlank(template.slug);
            });
        }),

        activate() {
            let adapter = this.store.adapterFor(this.constructor.modelName);

            return adapter.activate(this).then(() => {
                // the server only gives us the newly active theme back so we need
                // to manually mark other themes as inactive in the store
                let activeThemes = this.store.peekAll('theme').filterBy('active', true);

                activeThemes.forEach(theme => {
                    if (theme !== this) {
                        // store.push is necessary to avoid dirty records that cause
                        // problems when we get new data back in subsequent requests
                        this.store.push({ data: {
                                id: theme.id,
                                type: 'theme',
                                attributes: { active: false }
                            } });
                    }
                });

                return this;
            });
        }
    });
});
define('ghost-admin/models/unsplash-integration', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Object.extend({
        isActive: false
    });
});
define('ghost-admin/models/user', ['exports', 'ember-data/model', 'ghost-admin/mixins/validation-engine', 'ember-data/attr', 'ember-data/relationships', 'ember-concurrency'], function (exports, _model, _validationEngine, _attr, _relationships, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _model.default.extend(_validationEngine.default, {
        validationType: 'user',

        name: (0, _attr.default)('string'),
        slug: (0, _attr.default)('string'),
        email: (0, _attr.default)('string'),
        profileImage: (0, _attr.default)('string'),
        coverImage: (0, _attr.default)('string'),
        bio: (0, _attr.default)('string'),
        website: (0, _attr.default)('string'),
        location: (0, _attr.default)('string'),
        accessibility: (0, _attr.default)('string'),
        status: (0, _attr.default)('string'),
        locale: (0, _attr.default)('string'),
        metaTitle: (0, _attr.default)('string'),
        metaDescription: (0, _attr.default)('string'),
        lastLoginUTC: (0, _attr.default)('moment-utc'),
        createdAtUTC: (0, _attr.default)('moment-utc'),
        createdBy: (0, _attr.default)('number'),
        updatedAtUTC: (0, _attr.default)('moment-utc'),
        updatedBy: (0, _attr.default)('number'),
        roles: (0, _relationships.hasMany)('role', {
            embedded: 'always',
            async: false
        }),
        count: (0, _attr.default)('raw'),
        facebook: (0, _attr.default)('facebook-url-user'),
        twitter: (0, _attr.default)('twitter-url-user'),
        tour: (0, _attr.default)('json-string'),

        ghostPaths: Ember.inject.service(),
        ajax: Ember.inject.service(),
        session: Ember.inject.service(),
        notifications: Ember.inject.service(),
        config: Ember.inject.service(),

        // TODO: Once client-side permissions are in place,
        // remove the hard role check.
        isContributor: Ember.computed.equal('role.name', 'Contributor'),
        isAuthor: Ember.computed.equal('role.name', 'Author'),
        isEditor: Ember.computed.equal('role.name', 'Editor'),
        isAdmin: Ember.computed.equal('role.name', 'Administrator'),
        isOwner: Ember.computed.equal('role.name', 'Owner'),

        // This is used in enough places that it's useful to throw it here
        isAuthorOrContributor: Ember.computed.or('isAuthor', 'isContributor'),

        isLoggedIn: Ember.computed('id', 'session.user.id', function () {
            return this.get('id') === this.get('session.user.id');
        }),

        isActive: Ember.computed('status', function () {
            // TODO: review "locked" as an "active" status
            return ['active', 'warn-1', 'warn-2', 'warn-3', 'warn-4', 'locked'].indexOf(this.get('status')) > -1;
        }),

        isSuspended: Ember.computed.equal('status', 'inactive'),
        isLocked: Ember.computed.equal('status', 'locked'),

        role: Ember.computed('roles', {
            get() {
                return this.get('roles.firstObject');
            },
            set(key, value) {
                // Only one role per user, so remove any old data.
                this.get('roles').clear();
                this.get('roles').pushObject(value);

                return value;
            }
        }),

        profileImageUrl: Ember.computed('ghostPaths.assetRoot', 'profileImage', function () {
            // keep path separate so asset rewriting correctly picks it up
            let defaultImage = '/img/user-image.png';
            let defaultPath = this.ghostPaths.assetRoot.replace(/\/$/, '') + defaultImage;
            return this.profileImage || defaultPath;
        }),

        coverImageUrl: Ember.computed('ghostPaths.assetRoot', 'coverImage', function () {
            // keep path separate so asset rewriting correctly picks it up
            let defaultImage = '/img/user-cover.png';
            let defaultPath = this.ghostPaths.assetRoot.replace(/\/$/, '') + defaultImage;
            return this.coverImage || defaultPath;
        }),

        saveNewPassword: (0, _emberConcurrency.task)(function* () {
            let validation = this.get('isLoggedIn') ? 'ownPasswordChange' : 'passwordChange';

            try {
                yield this.validate({ property: validation });
            } catch (e) {
                // validation error, don't do anything
                return;
            }

            try {
                let url = this.get('ghostPaths.url').api('users', 'password');

                yield this.get('ajax').put(url, {
                    data: {
                        password: [{
                            user_id: this.get('id'),
                            oldPassword: this.get('password'),
                            newPassword: this.get('newPassword'),
                            ne2Password: this.get('ne2Password')
                        }]
                    }
                });

                this.setProperties({
                    password: '',
                    newPassword: '',
                    ne2Password: ''
                });

                this.get('notifications').showNotification('Password updated.', { type: 'success', key: 'user.change-password.success' });

                // clear errors manually for ne2password because validation
                // engine only clears the "validated proeprty"
                // TODO: clean up once we have a better validations library
                this.get('errors').remove('ne2Password');

                return true;
            } catch (error) {
                this.get('notifications').showAPIError(error, { key: 'user.change-password' });
            }
        }).drop()
    });
});
define('ghost-admin/resolver', ['exports', 'ember-resolver'], function (exports, _emberResolver) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _emberResolver.default;
});
define('ghost-admin/router', ['exports', 'ghost-admin/config/environment', 'ghost-admin/utils/document-title', 'ghost-admin/utils/ghost-paths'], function (exports, _environment, _documentTitle, _ghostPaths) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    const Router = Ember.Router.extend({
        location: _environment.default.locationType, // use HTML5 History API instead of hash-tag based URLs
        rootURL: (0, _ghostPaths.default)().adminRoot, // admin interface lives under sub-directory /ghost

        notifications: Ember.inject.service(),

        displayDelayedNotifications: Ember.on('didTransition', function () {
            this.get('notifications').displayDelayed();
        })
    });

    (0, _documentTitle.default)();

    Router.map(function () {
        this.route('setup', function () {
            this.route('one');
            this.route('two');
            this.route('three');
        });

        this.route('signin');
        this.route('signout');
        this.route('signup', { path: '/signup/:token' });
        this.route('reset', { path: '/reset/:token' });
        this.route('about', { path: '/about' });

        this.route('posts', { path: '/' }, function () {});

        this.route('editor', function () {
            this.route('new', { path: '' });
            this.route('edit', { path: ':post_id' });
        });

        this.route('team', { path: '/team' }, function () {
            this.route('user', { path: ':user_slug' });
        });

        this.route('settings.general', { path: '/settings/general' });
        this.route('settings.tags', { path: '/settings/tags' }, function () {
            this.route('tag', { path: ':tag_slug' });
            this.route('new');
        });
        this.route('settings.labs', { path: '/settings/labs' });
        this.route('settings.code-injection', { path: '/settings/code-injection' });
        this.route('settings.design', { path: '/settings/design' }, function () {
            this.route('uploadtheme');
        });
        this.route('settings.apps', { path: '/settings/apps' }, function () {
            this.route('slack', { path: 'slack' });
            this.route('amp', { path: 'amp' });
            this.route('unsplash', { path: 'unsplash' });
            this.route('zapier', { path: 'zapier' });
        });

        this.route('subscribers', function () {
            this.route('new');
            this.route('import');
        });

        this.route('error404', { path: '/*path' });
    });

    exports.default = Router;
});
define('ghost-admin/routes/about', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/style-body'], function (exports, _authenticated, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    exports.default = _authenticated.default.extend(_styleBody.default, {
        ghostPaths: Ember.inject.service(),
        ajax: Ember.inject.service(),

        titleToken: 'About',

        classNames: ['view-about'],

        cachedConfig: false,

        model() {
            let cachedConfig = this.get('cachedConfig');
            let configUrl = this.get('ghostPaths.url').api('configuration', 'about');

            if (cachedConfig) {
                return cachedConfig;
            }

            return this.get('ajax').request(configUrl).then(configurationResponse => {
                var _configurationRespons = _slicedToArray(configurationResponse.configuration, 1);

                let cachedConfig = _configurationRespons[0];


                this.set('cachedConfig', cachedConfig);

                return cachedConfig;
            });
        }
    });
});
define('ghost-admin/routes/application', ['exports', 'ember-simple-auth/mixins/application-route-mixin', 'ember-simple-auth/configuration', 'ghost-admin/mixins/shortcuts-route', 'ghost-admin/utils/ctrl-or-cmd', 'moment', 'ghost-admin/utils/window-proxy', 'ember-ajax/errors', 'ghost-admin/services/ajax'], function (exports, _applicationRouteMixin, _configuration, _shortcutsRoute, _ctrlOrCmd, _moment, _windowProxy, _errors, _ajax) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    function K() {
        return this;
    }

    let shortcuts = {};

    shortcuts.esc = { action: 'closeMenus', scope: 'default' };
    shortcuts[`${_ctrlOrCmd.default}+s`] = { action: 'save', scope: 'all' };

    exports.default = Ember.Route.extend(_applicationRouteMixin.default, _shortcutsRoute.default, {
        ajax: Ember.inject.service(),
        config: Ember.inject.service(),
        feature: Ember.inject.service(),
        ghostPaths: Ember.inject.service(),
        notifications: Ember.inject.service(),
        router: Ember.inject.service(),
        settings: Ember.inject.service(),
        tour: Ember.inject.service(),
        ui: Ember.inject.service(),

        shortcuts,

        routeAfterAuthentication: 'posts',

        beforeModel() {
            return this.get('config').fetch();
        },

        afterModel(model, transition) {
            this._super(...arguments);

            if (this.get('session.isAuthenticated')) {
                this.set('appLoadTransition', transition);
                transition.send('loadServerNotifications');
                transition.send('checkForOutdatedDesktopApp');

                // trigger a background token refresh to enable "infinite" sessions
                // NOTE: we only do this if the last refresh was > 1 day ago to avoid
                // potential issues with multiple tabs and concurrent admin loads/refreshes.
                // see https://github.com/TryGhost/Ghost/issues/8616
                let session = this.get('session.session');
                let expiresIn = session.get('authenticated.expires_in') * 1000;
                let expiresAt = session.get('authenticated.expires_at');
                let lastRefresh = (0, _moment.default)(expiresAt - expiresIn);
                let oneDayAgo = (0, _moment.default)().subtract(1, 'day');

                if (lastRefresh.isBefore(oneDayAgo)) {
                    let authenticator = session._lookupAuthenticator(session.authenticator);
                    if (authenticator && authenticator.onOnline) {
                        authenticator.onOnline();
                    }
                }

                let featurePromise = this.get('feature').fetch();
                let settingsPromise = this.get('settings').fetch();
                let privateConfigPromise = this.get('config').fetchPrivate();
                let tourPromise = this.get('tour').fetchViewed();

                // return the feature/settings load promises so that we block until
                // they are loaded to enable synchronous access everywhere
                return Ember.RSVP.all([featurePromise, settingsPromise, privateConfigPromise, tourPromise]).then(results => {
                    this._appLoaded = true;
                    return results;
                });
            }

            this._appLoaded = true;
        },

        actions: {
            closeMenus() {
                this.get('ui').closeMenus();
            },

            didTransition() {
                this.set('appLoadTransition', null);
                this.send('closeMenus');
            },

            signedIn() {
                this.get('notifications').clearAll();
                this.send('loadServerNotifications', true);
            },

            // this is only called by the `signout` route at present.
            // it's separate to the normal ESA session invalidadition because it will
            // actually send the token revocation requests whereas we have to avoid
            // those most of the time because they will fail if we have invalid tokens
            logout() {
                let session = this.get('session');
                // revoke keys on the server
                if (session.get('isAuthenticated')) {
                    let auth = session.get('data.authenticated');
                    let revokeEndpoint = `${this.get('ghostPaths.apiRoot')}/authentication/revoke`;
                    let authenticator = session.get('session')._lookupAuthenticator(session.get('session.authenticator'));
                    let requests = [];
                    ['refresh_token', 'access_token'].forEach(tokenType => {
                        let data = {
                            token_type_hint: tokenType,
                            token: auth[tokenType]
                        };
                        authenticator.makeRequest(revokeEndpoint, data);
                    });
                    Ember.RSVP.all(requests).finally(() => {
                        // remove local keys and refresh
                        session.invalidate();
                    });
                } else {
                    // remove local keys and refresh
                    session.invalidate();
                }
            },

            authorizationFailed() {
                _windowProxy.default.replaceLocation(_configuration.default.baseURL);
            },

            loadServerNotifications(isDelayed) {
                if (this.get('session.isAuthenticated')) {
                    this.get('session.user').then(user => {
                        if (!user.get('isAuthorOrContributor') && !user.get('isEditor')) {
                            this.store.findAll('notification', { reload: true }).then(serverNotifications => {
                                serverNotifications.forEach(notification => {
                                    if (notification.get('top') || notification.get('custom')) {
                                        this.get('notifications').handleNotification(notification, isDelayed);
                                    } else {
                                        this.get('upgradeStatus').handleUpgradeNotification(notification);
                                    }
                                });
                            });
                        }
                    });
                }
            },

            checkForOutdatedDesktopApp() {
                // Check if the user is running an older version of Ghost Desktop
                // that needs to be manually updated
                // (yes, the desktop team is deeply ashamed of these lines 😢)
                let ua = navigator && navigator.userAgent ? navigator.userAgent : null;

                if (ua && ua.includes && ua.includes('ghost-desktop')) {
                    let updateCheck = /ghost-desktop\/0\.((5\.0)|((4|2)\.0)|((3\.)(0|1)))/;
                    let link = '<a href="https://dev.ghost.org/ghost-desktop-manual-update" target="_blank">click here</a>';
                    let msg = `Your version of Ghost Desktop needs to be manually updated. Please ${link} to get started.`;

                    if (updateCheck.test(ua)) {
                        this.get('notifications').showAlert(Ember.String.htmlSafe(msg), {
                            type: 'warn',
                            key: 'desktop.manual.upgrade'
                        });
                    }
                }
            },

            // noop default for unhandled save (used from shortcuts)
            save: K,

            error(error, transition) {
                // unauthoirized errors are already handled in the ajax service
                if ((0, _errors.isUnauthorizedError)(error)) {
                    return false;
                }

                if ((0, _errors.isNotFoundError)(error)) {
                    if (transition) {
                        transition.abort();
                    }

                    let routeInfo = transition.handlerInfos[transition.handlerInfos.length - 1];
                    let router = this.get('router');
                    let params = [];

                    for (let key of Object.keys(routeInfo.params)) {
                        params.push(routeInfo.params[key]);
                    }

                    let url = router.urlFor(routeInfo.name, ...params).replace(/^#\//, '').replace(/^\//, '').replace(/^ghost\//, '');

                    return this.replaceWith('error404', url);
                }

                if ((0, _ajax.isVersionMismatchError)(error)) {
                    if (transition) {
                        transition.abort();
                    }

                    this.get('upgradeStatus').requireUpgrade();

                    if (this._appLoaded) {
                        return false;
                    }
                }

                if ((0, _ajax.isMaintenanceError)(error)) {
                    if (transition) {
                        transition.abort();
                    }

                    this.get('upgradeStatus').maintenanceAlert();

                    if (this._appLoaded) {
                        return false;
                    }
                }

                if ((0, _errors.isAjaxError)(error) || error && error.payload && Ember.isArray(error.payload.errors)) {
                    this.get('notifications').showAPIError(error);
                    // don't show the 500 page if we weren't navigating
                    if (!transition) {
                        return false;
                    }
                }

                // fallback to 500 error page
                return true;
            }
        },

        title(tokens) {
            return `${tokens.join(' - ')} - ${this.get('config.blogTitle')}`;
        },

        sessionAuthenticated() {
            if (this.get('session.skipAuthSuccessHandler')) {
                return;
            }

            // standard ESA post-sign-in redirect
            this._super(...arguments);

            // trigger post-sign-in background behaviour
            this.get('session.user').then(user => {
                this.send('signedIn', user);
            });
        },

        sessionInvalidated() {
            let transition = this.get('appLoadTransition');

            if (transition) {
                transition.send('authorizationFailed');
            } else {
                Ember.run.scheduleOnce('routerTransitions', this, function () {
                    this.send('authorizationFailed');
                });
            }
        }
    });
});
define('ghost-admin/routes/authenticated', ['exports', 'ember-simple-auth/mixins/authenticated-route-mixin'], function (exports, _authenticatedRouteMixin) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Route.extend(_authenticatedRouteMixin.default, {
        authenticationRoute: 'signin'
    });
});
define('ghost-admin/routes/editor', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/shortcuts-route', 'ghost-admin/utils/ctrl-or-cmd'], function (exports, _authenticated, _shortcutsRoute, _ctrlOrCmd) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    let generalShortcuts = {};
    generalShortcuts[`${_ctrlOrCmd.default}+shift+p`] = 'publish';

    exports.default = _authenticated.default.extend(_shortcutsRoute.default, {
        feature: Ember.inject.service(),
        notifications: Ember.inject.service(),
        userAgent: Ember.inject.service(),
        ui: Ember.inject.service(),

        classNames: ['editor'],
        shortcuts: generalShortcuts,
        titleToken: 'Editor',

        activate() {
            this._super(...arguments);
            this.ui.set('isFullScreen', true);
        },

        setupController() {
            this._super(...arguments);

            // edge has known issues
            if (this.userAgent.browser.isEdge) {
                this.notifications.showAlert(Ember.String.htmlSafe('Microsoft Edge is not currently supported. Please switch to <a href="https://ghost.org/downloads/" target="_blank" rel="noopener">Ghost Desktop</a> or a recent version of Chrome/Firefox/Safari.'), { type: 'info', key: 'koenig.browserSupport' });
            }

            // mobile browsers are not currently supported
            if (this.userAgent.device.isMobile || this.userAgent.device.isTablet) {
                this.notifications.showAlert(Ember.String.htmlSafe('Mobile editing is not currently supported. Please use a desktop browser or <a href="https://ghost.org/downloads/" target="_blank" rel="noopener">Ghost Desktop</a>.'), { type: 'info', key: 'koenig.browserSupport' });
            }
        },

        deactivate() {
            this._super(...arguments);
            this.ui.set('isFullScreen', false);
        },

        actions: {
            save() {
                this._blurAndScheduleAction(function () {
                    this.get('controller').send('save');
                });
            },

            publish() {
                this._blurAndScheduleAction(function () {
                    this.get('controller').send('setSaveType', 'publish');
                    this.get('controller').send('save');
                });
            },

            authorizationFailed() {
                this.get('controller').send('toggleReAuthenticateModal');
            },

            redirectToContentScreen() {
                this.transitionTo('posts');
            },

            willTransition(transition) {
                // exit early if an upgrade is required because our extended route
                // class will abort the transition and show an error
                if (this.get('upgradeStatus.isRequired')) {
                    return this._super(...arguments);
                }

                this.get('controller').willTransition(transition);
            }
        },

        _blurAndScheduleAction(func) {
            let selectedElement = Ember.$(document.activeElement);

            // TODO: we should trigger a blur for textareas as well as text inputs
            if (selectedElement.is('input[type="text"]')) {
                selectedElement.trigger('focusout');
            }

            // wait for actions triggered by the focusout to finish before saving
            Ember.run.scheduleOnce('actions', this, func);
        }
    });
});
define('ghost-admin/routes/editor/edit', ['exports', 'ghost-admin/routes/authenticated'], function (exports, _authenticated) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend({
        beforeModel(transition) {
            this._super(...arguments);

            // if the transition is not new->edit, reset the post on the controller
            // so that the editor view is cleared before showing the loading state
            if (transition.urlMethod !== 'replace') {
                let editor = this.controllerFor('editor');
                editor.set('post', null);
                editor.reset();
            }
        },

        model(params) {
            let query = {
                id: params.post_id,
                status: 'all',
                filter: 'page:[true,false]',
                formats: 'mobiledoc,plaintext'
            };

            return this.store.query('post', query).then(records => records.get('firstObject'));
        },

        // the API will return a post even if the logged in user doesn't have
        // permission to edit it (all posts are public) so we need to do our
        // own permissions check and redirect if necessary
        afterModel(post) {
            this._super(...arguments);

            return this.get('session.user').then(user => {
                if (user.get('isAuthorOrContributor') && !post.isAuthoredByUser(user)) {
                    return this.replaceWith('posts.index');
                }

                // If the post is not a draft and user is contributor, redirect to index
                if (user.get('isContributor') && !post.get('isDraft')) {
                    return this.replaceWith('posts.index');
                }
            });
        },

        // there's no specific controller for this route, instead all editor
        // handling is done on the editor route/controler
        setupController(controller, post) {
            let editor = this.controllerFor('editor');
            editor.setPost(post);
        }
    });
});
define('ghost-admin/routes/editor/new', ['exports', 'ghost-admin/routes/authenticated'], function (exports, _authenticated) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend({
        model() {
            return this.get('session.user').then(user => this.store.createRecord('post', { authors: [user] }));
        },

        // there's no specific controller for this route, instead all editor
        // handling is done on the editor route/controler
        setupController(controller, newPost) {
            let editor = this.controllerFor('editor');
            editor.setPost(newPost);
        }
    });
});
define('ghost-admin/routes/error404', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Route.extend({
        controllerName: 'error',
        templateName: 'error',
        titleToken: 'Error',

        model() {
            return {
                status: 404
            };
        }
    });
});
define('ghost-admin/routes/posts', ['exports', 'ghost-admin/routes/authenticated'], function (exports, _authenticated) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend({
        infinity: Ember.inject.service(),

        queryParams: {
            type: {
                refreshModel: true,
                replace: true
            },
            author: {
                refreshModel: true,
                replace: true
            },
            tag: {
                refreshModel: true,
                replace: true
            },
            order: {
                refreshModel: true,
                replace: true
            }
        },

        titleToken: 'Content',

        perPage: 30,

        _type: null,

        model(params) {
            return this.get('session.user').then(user => {
                let queryParams = {};
                let filterParams = { tag: params.tag };
                let paginationParams = {
                    perPageParam: 'limit',
                    totalPagesParam: 'meta.pagination.pages'
                };

                Ember.assign(filterParams, this._getTypeFilters(params.type));

                if (params.type === 'featured') {
                    filterParams.featured = true;
                }

                if (user.get('isAuthor')) {
                    // authors can only view their own posts
                    filterParams.authors = user.get('slug');
                } else if (user.get('isContributor')) {
                    // Contributors can only view their own draft posts
                    filterParams.authors = user.get('slug');
                    filterParams.status = 'draft';
                } else if (params.author) {
                    filterParams.authors = params.author;
                }

                let filter = this._filterString(filterParams);
                if (!Ember.isBlank(filter)) {
                    queryParams.filter = filter;
                }

                if (!Ember.isBlank(params.order)) {
                    queryParams.order = params.order;
                }

                queryParams.formats = 'mobiledoc,plaintext';

                let perPage = this.get('perPage');
                let paginationSettings = Ember.assign({ perPage, startingPage: 1 }, paginationParams, queryParams);

                return this.infinity.model('post', paginationSettings);
            });
        },

        // trigger a background load of all tags and authors for use in the filter dropdowns
        setupController(controller) {
            this._super(...arguments);

            if (!controller._hasLoadedTags) {
                this.get('store').query('tag', { limit: 'all' }).then(() => {
                    controller._hasLoadedTags = true;
                });
            }

            this.get('session.user').then(user => {
                if (!user.get('isAuthorOrContributor') && !controller._hasLoadedAuthors) {
                    this.get('store').query('user', { limit: 'all' }).then(() => {
                        controller._hasLoadedAuthors = true;
                    });
                }
            });
        },

        actions: {
            willTransition() {
                if (this.get('controller')) {
                    this.resetController();
                }
            },

            queryParamsDidChange() {
                // scroll back to the top
                Ember.$('.content-list').scrollTop(0);

                this._super(...arguments);
            }
        },

        _getTypeFilters(type) {
            let status = '[draft,scheduled,published]';
            let page = '[true,false]';

            switch (type) {
                case 'draft':
                    status = 'draft';
                    page = false;
                    break;
                case 'published':
                    status = 'published';
                    page = false;
                    break;
                case 'scheduled':
                    status = 'scheduled';
                    page = false;
                    break;
                case 'page':
                    page = true;
                    break;
            }

            return {
                status,
                page
            };
        },

        _filterString(filter) {
            return Object.keys(filter).map(key => {
                let value = filter[key];

                if (!Ember.isBlank(value)) {
                    return `${key}:${filter[key]}`;
                }
            }).compact().join('+');
        }
    });
});
define('ghost-admin/routes/reset', ['exports', 'ghost-admin/mixins/unauthenticated-route-mixin', 'ghost-admin/mixins/style-body'], function (exports, _unauthenticatedRouteMixin, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Route.extend(_styleBody.default, _unauthenticatedRouteMixin.default, {
        notifications: Ember.inject.service(),
        session: Ember.inject.service(),

        classNames: ['ghost-reset'],

        beforeModel() {
            if (this.get('session.isAuthenticated')) {
                this.get('notifications').showAlert('You can\'t reset your password while you\'re signed in.', { type: 'warn', delayed: true, key: 'password.reset.signed-in' });
            }

            this._super(...arguments);
        },

        setupController(controller, params) {
            controller.token = params.token;
        },

        // Clear out any sensitive information
        deactivate() {
            this._super(...arguments);
            this.controller.clearData();
        }
    });
});
define('ghost-admin/routes/settings/apps', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'ghost-admin/mixins/style-body'], function (exports, _authenticated, _currentUserSettings, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend(_styleBody.default, _currentUserSettings.default, {
        settings: Ember.inject.service(),

        titleToken: 'Settings - Apps',
        classNames: ['settings-view-apps'],

        beforeModel() {
            this._super(...arguments);
            return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());
        },

        // we don't want to set the model property but we do want to ensure we have
        // up-to-date settings so pause via afterModel
        afterModel() {
            return this.get('settings').reload();
        }
    });
});
define('ghost-admin/routes/settings/apps/amp', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/style-body'], function (exports, _authenticated, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend(_styleBody.default, {
        titleToken: 'AMP',

        classNames: ['settings-view-apps-amp'],

        actions: {
            save() {
                this.get('controller').send('save');
            },

            willTransition(transition) {
                let controller = this.get('controller');
                let settings = controller.get('settings');
                let modelIsDirty = settings.get('hasDirtyAttributes');

                if (modelIsDirty) {
                    transition.abort();
                    controller.send('toggleLeaveSettingsModal', transition);
                    return;
                }
            }
        }

    });
});
define('ghost-admin/routes/settings/apps/slack', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/style-body'], function (exports, _authenticated, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend(_styleBody.default, {
        settings: Ember.inject.service(),

        titleToken: 'Slack',

        classNames: ['settings-view-apps-slack'],

        afterModel() {
            return this.get('settings').reload();
        },

        actions: {
            save() {
                this.get('controller').send('save');
            },

            willTransition(transition) {
                let controller = this.get('controller');
                let settings = this.get('settings');
                let modelIsDirty = settings.get('hasDirtyAttributes');

                if (modelIsDirty) {
                    transition.abort();
                    controller.send('toggleLeaveSettingsModal', transition);
                    return;
                }
            }
        }
    });
});
define('ghost-admin/routes/settings/apps/unsplash', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/models/unsplash-integration', 'ghost-admin/mixins/style-body'], function (exports, _authenticated, _unsplashIntegration, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend(_styleBody.default, {
        config: Ember.inject.service(),
        settings: Ember.inject.service(),

        titleToken: 'Unsplash',
        classNames: ['settings-view-apps-unsplash'],

        beforeModel() {
            let settings = this.get('settings');

            if (settings.get('unsplash')) {
                return;
            }

            // server doesn't have any unsplash settings by default but it can provide
            // overrides via config:
            // - isActive: use as default but allow settings override
            // - applicationId: total override, no field is shown if present
            let unsplash = _unsplashIntegration.default.create({
                isActive: true
            });

            settings.set('unsplash', unsplash);

            return unsplash;
        },

        actions: {
            save() {
                this.get('controller').send('save');
            },

            willTransition(transition) {
                let controller = this.get('controller');
                let modelIsDirty = controller.get('dirtyAttributes');

                if (modelIsDirty) {
                    transition.abort();
                    controller.send('toggleLeaveSettingsModal', transition);
                    return;
                }
            }
        }
    });
});
define('ghost-admin/routes/settings/apps/zapier', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Route.extend({});
});
define('ghost-admin/routes/settings/code-injection', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'ghost-admin/mixins/style-body'], function (exports, _authenticated, _currentUserSettings, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend(_styleBody.default, _currentUserSettings.default, {
        settings: Ember.inject.service(),

        titleToken: 'Settings - Code injection',
        classNames: ['settings-view-code'],

        beforeModel() {
            this._super(...arguments);
            return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());
        },

        model() {
            return this.get('settings').reload();
        },

        actions: {
            save() {
                this.get('controller').send('save');
            },

            willTransition(transition) {
                let controller = this.get('controller');
                let settings = this.get('settings');
                let modelIsDirty = settings.get('hasDirtyAttributes');

                if (modelIsDirty) {
                    transition.abort();
                    controller.send('toggleLeaveSettingsModal', transition);
                    return;
                }
            }
        }
    });
});
define('ghost-admin/routes/settings/design', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'ghost-admin/mixins/style-body'], function (exports, _authenticated, _currentUserSettings, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend(_styleBody.default, _currentUserSettings.default, {
        settings: Ember.inject.service(),

        titleToken: 'Settings - Design',
        classNames: ['settings-view-design'],

        beforeModel() {
            this._super(...arguments);
            return this.get('session.user').then(this.transitionAuthor());
        },

        model() {
            return Ember.RSVP.hash({
                settings: this.get('settings').reload(),
                themes: this.get('store').findAll('theme')
            });
        },

        setupController(controller) {
            // reset the leave setting transition
            controller.set('leaveSettingsTransition', null);
            controller.set('themes', this.get('store').peekAll('theme'));
            this.get('controller').send('reset');
        },

        actions: {
            save() {
                // since shortcuts are run on the route, we have to signal to the components
                // on the page that we're about to save.
                Ember.$('.page-actions .gh-btn-blue').focus();

                this.get('controller').send('save');
            },

            willTransition(transition) {
                let controller = this.get('controller');
                let modelIsDirty = controller.get('dirtyAttributes');

                if (modelIsDirty) {
                    transition.abort();
                    controller.send('toggleLeaveSettingsModal', transition);
                    return;
                }
            },

            activateTheme(theme) {
                return this.get('controller').send('activateTheme', theme);
            }
        }
    });
});
define('ghost-admin/routes/settings/design/uploadtheme', ['exports', 'ghost-admin/routes/authenticated'], function (exports, _authenticated) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend({

        model() {
            return this.get('store').findAll('theme');
        },

        setupController(controller, model) {
            controller.set('themes', model);
        },

        actions: {
            cancel() {
                this.transitionTo('settings.design');
            }
        }
    });
});
define('ghost-admin/routes/settings/general', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'ghost-admin/mixins/style-body'], function (exports, _authenticated, _currentUserSettings, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend(_styleBody.default, _currentUserSettings.default, {
        config: Ember.inject.service(),
        settings: Ember.inject.service(),

        titleToken: 'Settings - General',
        classNames: ['settings-view-general'],

        beforeModel() {
            this._super(...arguments);
            return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());
        },

        model() {
            return Ember.RSVP.hash({
                settings: this.get('settings').reload(),
                availableTimezones: this.get('config.availableTimezones')
            });
        },

        setupController(controller, models) {
            // reset the leave setting transition
            controller.set('leaveSettingsTransition', null);
            controller.set('availableTimezones', models.availableTimezones);
        },

        actions: {
            save() {
                return this.get('controller').send('save');
            },

            reloadSettings() {
                return this.get('settings').reload();
            },

            willTransition(transition) {
                let controller = this.get('controller');
                let settings = this.get('settings');
                let settingsIsDirty = settings.get('hasDirtyAttributes');

                if (settingsIsDirty) {
                    transition.abort();
                    controller.send('toggleLeaveSettingsModal', transition);
                    return;
                }
            }

        }
    });
});
define('ghost-admin/routes/settings/labs', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'ghost-admin/mixins/style-body'], function (exports, _authenticated, _currentUserSettings, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend(_styleBody.default, _currentUserSettings.default, {
        settings: Ember.inject.service(),

        titleToken: 'Settings - Labs',
        classNames: ['settings'],

        beforeModel() {
            this._super(...arguments);
            return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());
        },

        model() {
            return this.get('settings').reload();
        },

        resetController(controller, isExiting) {
            if (isExiting) {
                controller.reset();
            }
        }
    });
});
define('ghost-admin/routes/settings/tags', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'ghost-admin/mixins/shortcuts-route'], function (exports, _authenticated, _currentUserSettings, _shortcutsRoute) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend(_currentUserSettings.default, _shortcutsRoute.default, {

        titleToken: 'Settings - Tags',

        shortcuts: null,

        init() {
            this._super(...arguments);
            this.shortcuts = {
                'up, k': 'moveUp',
                'down, j': 'moveDown',
                left: 'focusList',
                right: 'focusContent',
                c: 'newTag'
            };
        },

        // authors aren't allowed to manage tags
        beforeModel() {
            this._super(...arguments);

            return this.get('session.user').then(this.transitionAuthor());
        },

        // set model to a live array so all tags are shown and created/deleted tags
        // are automatically added/removed. Also load all tags in the background,
        // pausing to show the loading spinner if no tags have been loaded yet
        model() {
            let promise = this.store.query('tag', { limit: 'all', include: 'count.posts' });
            let tags = this.store.peekAll('tag');

            if (this.store.peekAll('tag').get('length') === 0) {
                return promise.then(() => tags);
            } else {
                return tags;
            }
        },

        deactivate() {
            this._super(...arguments);
            this.send('resetShortcutsScope');
        },

        actions: {
            moveUp() {
                if (this.controller.get('tagContentFocused')) {
                    this.scrollContent(-1);
                } else {
                    this.stepThroughTags(-1);
                }
            },

            moveDown() {
                if (this.controller.get('tagContentFocused')) {
                    this.scrollContent(1);
                } else {
                    this.stepThroughTags(1);
                }
            },

            focusList() {
                this.set('controller.keyboardFocus', 'tagList');
            },

            focusContent() {
                this.set('controller.keyboardFocus', 'tagContent');
            },

            newTag() {
                this.transitionTo('settings.tags.new');
            },

            resetShortcutsScope() {
                key.setScope('default');
            }
        },

        stepThroughTags(step) {
            let currentTag = this.modelFor('settings.tags.tag');
            let tags = this.get('controller.sortedTags');
            let length = tags.get('length');

            if (currentTag && length) {
                let newPosition = tags.indexOf(currentTag) + step;

                if (newPosition >= length) {
                    return;
                } else if (newPosition < 0) {
                    return;
                }

                this.transitionTo('settings.tags.tag', tags.objectAt(newPosition));
            }
        },

        scrollContent(amount) {
            let content = Ember.$('.tag-settings-pane');
            let scrolled = content.scrollTop();

            content.scrollTop(scrolled + 50 * amount);
        }
    });
});
define('ghost-admin/routes/settings/tags/index', ['exports', 'ghost-admin/routes/authenticated'], function (exports, _authenticated) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend({
        mediaQueries: Ember.inject.service(),

        beforeModel() {
            let firstTag = this.modelFor('settings.tags').get('firstObject');

            this._super(...arguments);

            if (firstTag && !this.get('mediaQueries.maxWidth600')) {
                this.transitionTo('settings.tags.tag', firstTag);
            }
        }
    });
});
define('ghost-admin/routes/settings/tags/new', ['exports', 'ghost-admin/routes/authenticated'], function (exports, _authenticated) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend({

        controllerName: 'settings.tags.tag',

        model() {
            return this.store.createRecord('tag');
        },

        renderTemplate() {
            this.render('settings.tags.tag');
        },

        // reset the model so that mobile screens react to an empty selectedTag
        deactivate() {
            this._super(...arguments);
            this.set('controller.model', null);
        }

    });
});
define('ghost-admin/routes/settings/tags/tag', ['exports', 'ghost-admin/routes/authenticated'], function (exports, _authenticated) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend({

        model(params) {
            return this.store.queryRecord('tag', { slug: params.tag_slug });
        },

        serialize(model) {
            return { tag_slug: model.get('slug') };
        },

        setupController(controller, model) {
            this._super(...arguments);
            this.controllerFor('settings.tags').scrollTagIntoView(model);
        },

        // reset the model so that mobile screens react to an empty selectedTag
        deactivate() {
            this._super(...arguments);
            this.set('controller.model', null);
        }
    });
});
define('ghost-admin/routes/setup', ['exports', 'ghost-admin/mixins/style-body'], function (exports, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    exports.default = Ember.Route.extend(_styleBody.default, {
        ghostPaths: Ember.inject.service(),
        session: Ember.inject.service(),
        ajax: Ember.inject.service(),
        config: Ember.inject.service(),

        titleToken: 'Setup',

        classNames: ['ghost-setup'],

        // use the beforeModel hook to check to see whether or not setup has been
        // previously completed.  If it has, stop the transition into the setup page.
        beforeModel() {
            this._super(...arguments);

            if (this.get('session.isAuthenticated')) {
                return this.transitionTo('posts');
            }

            let authUrl = this.get('ghostPaths.url').api('authentication', 'setup');

            // check the state of the setup process via the API
            return this.get('ajax').request(authUrl).then(result => {
                var _result$setup = _slicedToArray(result.setup, 1);

                let setup = _result$setup[0];


                if (setup.status) {
                    return this.transitionTo('signin');
                } else {
                    let controller = this.controllerFor('setup/two');
                    if (setup.title) {
                        controller.set('blogTitle', setup.title.replace(/&apos;/gim, '\''));
                    }

                    if (setup.name) {
                        controller.set('name', setup.name.replace(/&apos;/gim, '\''));
                    }

                    if (setup.email) {
                        controller.set('email', setup.email);
                    }
                }
            });
        },

        deactivate() {
            this._super(...arguments);
            this.controllerFor('setup/two').set('password', '');
        }
    });
});
define('ghost-admin/routes/setup/index', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Route.extend({
        beforeModel() {
            this._super(...arguments);
            this.transitionTo('setup.one');
        }
    });
});
define('ghost-admin/routes/setup/three', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Route.extend({
        beforeModel() {
            this._super(...arguments);
            if (!this.controllerFor('setup.two').get('blogCreated')) {
                this.transitionTo('setup.two');
            }
        }
    });
});
define('ghost-admin/routes/signin', ['exports', 'ember-data', 'ghost-admin/mixins/unauthenticated-route-mixin', 'ghost-admin/mixins/style-body'], function (exports, _emberData, _unauthenticatedRouteMixin, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    const Errors = _emberData.default.Errors;


    const defaultModel = function defaultModel() {
        return Ember.Object.create({
            identification: '',
            password: '',
            errors: Errors.create()
        });
    };

    exports.default = Ember.Route.extend(_unauthenticatedRouteMixin.default, _styleBody.default, {
        titleToken: 'Sign In',

        classNames: ['ghost-login'],

        model() {
            return defaultModel();
        },

        // the deactivate hook is called after a route has been exited.
        deactivate() {
            let controller = this.controllerFor('signin');

            this._super(...arguments);

            // clear the properties that hold the credentials when we're no longer on the signin screen
            controller.set('signin', defaultModel());
        }
    });
});
define('ghost-admin/routes/signout', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/style-body'], function (exports, _authenticated, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    const canInvoke = Ember.canInvoke;
    exports.default = _authenticated.default.extend(_styleBody.default, {
        notifications: Ember.inject.service(),

        titleToken: 'Sign Out',

        classNames: ['ghost-signout'],

        afterModel(model, transition) {
            this.get('notifications').clearAll();
            if (canInvoke(transition, 'send')) {
                transition.send('logout');
            } else {
                this.send('logout');
            }
        }
    });
});
define('ghost-admin/routes/signup', ['exports', 'ember-data', 'ghost-admin/mixins/unauthenticated-route-mixin', 'ghost-admin/mixins/style-body'], function (exports, _emberData, _unauthenticatedRouteMixin, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    const Promise = Ember.RSVP.Promise;
    const Errors = _emberData.default.Errors;
    exports.default = Ember.Route.extend(_styleBody.default, _unauthenticatedRouteMixin.default, {
        ghostPaths: Ember.inject.service(),
        notifications: Ember.inject.service(),
        session: Ember.inject.service(),
        ajax: Ember.inject.service(),
        config: Ember.inject.service(),

        classNames: ['ghost-signup'],

        beforeModel() {
            if (this.get('session.isAuthenticated')) {
                this.get('notifications').showAlert('You need to sign out to register as a new user.', { type: 'warn', delayed: true, key: 'signup.create.already-authenticated' });
            }

            this._super(...arguments);
        },

        model(params) {
            let signupDetails = Ember.Object.create();
            let re = /^(?:[A-Za-z0-9_-]{4})*(?:[A-Za-z0-9_-]{2}|[A-Za-z0-9_-]{3})?$/;
            let email, tokenText;

            return new Promise(resolve => {
                if (!re.test(params.token)) {
                    this.get('notifications').showAlert('Invalid token.', { type: 'error', delayed: true, key: 'signup.create.invalid-token' });

                    return resolve(this.transitionTo('signin'));
                }

                tokenText = atob(params.token);
                email = tokenText.split('|')[1];

                signupDetails.set('email', email);
                signupDetails.set('token', params.token);
                signupDetails.set('errors', Errors.create());

                let authUrl = this.get('ghostPaths.url').api('authentication', 'invitation');

                return this.get('ajax').request(authUrl, {
                    dataType: 'json',
                    data: {
                        email
                    }
                }).then(response => {
                    if (response && response.invitation && response.invitation[0].valid === false) {
                        this.get('notifications').showAlert('The invitation does not exist or is no longer valid.', { type: 'warn', delayed: true, key: 'signup.create.invalid-invitation' });

                        return resolve(this.transitionTo('signin'));
                    }

                    signupDetails.set('invitedBy', response.invitation[0].invitedBy);

                    // set blogTitle, so password validation has access to it
                    signupDetails.set('blogTitle', this.get('config.blogTitle'));

                    resolve(signupDetails);
                }).catch(() => {
                    resolve(signupDetails);
                });
            });
        },

        deactivate() {
            this._super(...arguments);

            // clear the properties that hold the sensitive data from the controller
            this.controllerFor('signup').get('signupDetails').setProperties({ email: '', password: '', token: '' });
        }
    });
});
define('ghost-admin/routes/subscribers', ['exports', 'ghost-admin/routes/authenticated'], function (exports, _authenticated) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend({
        feature: Ember.inject.service(),

        titleToken: 'Subscribers',

        // redirect if subscribers is disabled or user isn't owner/admin
        beforeModel() {
            this._super(...arguments);
            let promises = {
                user: this.get('session.user'),
                subscribers: this.get('feature.subscribers')
            };

            return Ember.RSVP.hash(promises).then(hash => {
                let user = hash.user,
                    subscribers = hash.subscribers;


                if (!subscribers || !(user.get('isOwner') || user.get('isAdmin'))) {
                    return this.transitionTo('posts');
                }
            });
        },

        setupController(controller) {
            this._super(...arguments);
            controller.initializeTable();
            controller.send('loadFirstPage');
        },

        resetController(controller, isExiting) {
            this._super(...arguments);
            if (isExiting) {
                controller.set('order', 'created_at');
                controller.set('direction', 'desc');
            }
        },

        actions: {
            addSubscriber(subscriber) {
                this.get('controller').send('addSubscriber', subscriber);
            },

            reset() {
                this.get('controller').send('reset');
            }
        }
    });
});
define('ghost-admin/routes/subscribers/import', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Route.extend({
        actions: {
            cancel() {
                this.transitionTo('subscribers');
            }
        }
    });
});
define('ghost-admin/routes/subscribers/new', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Route.extend({
        model() {
            return this.get('store').createRecord('subscriber');
        },

        setupController(controller, model) {
            controller.set('subscriber', model);
        },

        deactivate() {
            let subscriber = this.controller.get('subscriber');

            this._super(...arguments);

            if (subscriber.get('isNew')) {
                this.rollbackModel();
            }
        },

        actions: {
            save() {
                let subscriber = this.controller.get('subscriber');
                return subscriber.save().then(saved => {
                    this.send('addSubscriber', saved);
                    return saved;
                });
            },

            cancel() {
                this.rollbackModel();
                this.transitionTo('subscribers');
            }
        },

        rollbackModel() {
            let subscriber = this.controller.get('subscriber');
            subscriber.rollbackAttributes();
        }
    });
});
define('ghost-admin/routes/team/index', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'ghost-admin/mixins/style-body'], function (exports, _authenticated, _currentUserSettings, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend(_styleBody.default, _currentUserSettings.default, {
        infinity: Ember.inject.service(),

        titleToken: 'Team',
        classNames: ['view-team'],

        modelPath: 'controller.activeUsers',
        perPage: 15,

        model() {
            return this.get('session.user').then(user => {
                let modelPath = this.get('modelPath');
                let perPage = this.get('perPage');

                let modelPromises = {
                    activeUsers: this.infinity.model('user', {
                        modelPath,
                        perPage,
                        filter: 'status:-inactive',
                        startingPage: 1,
                        perPageParam: 'limit',
                        totalPagesParam: 'meta.pagination.pages'
                    })
                };

                // authors do not have permission to hit the invites or suspended users endpoint
                if (!user.get('isAuthorOrContributor')) {
                    modelPromises.invites = this.store.query('invite', { limit: 'all' }).then(() => this.store.peekAll('invite'));

                    // fetch suspended users separately so that infinite scroll still works
                    modelPromises.suspendedUsers = this.store.query('user', { limit: 'all', filter: 'status:inactive' });
                }

                // we need to load the roles into ember cache
                // invites return role_id only and we do not offer a /role/:id endpoint
                modelPromises.roles = this.get('store').query('role', {});

                return Ember.RSVP.hash(modelPromises);
            });
        },

        setupController(controller, models) {
            controller.setProperties(models);
        },

        actions: {
            reload() {
                this.refresh();
            }
        }
    });
});
define('ghost-admin/routes/team/user', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'ghost-admin/mixins/style-body'], function (exports, _authenticated, _currentUserSettings, _styleBody) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _authenticated.default.extend(_styleBody.default, _currentUserSettings.default, {
        titleToken: 'Team - User',

        classNames: ['team-view-user'],

        model(params) {
            return this.store.queryRecord('user', { slug: params.user_slug, include: 'count.posts' });
        },

        afterModel(user) {
            this._super(...arguments);

            return this.get('session.user').then(currentUser => {
                let isOwnProfile = user.get('id') === currentUser.get('id');
                let isAuthorOrContributor = currentUser.get('isAuthorOrContributor');
                let isEditor = currentUser.get('isEditor');

                if (isAuthorOrContributor && !isOwnProfile) {
                    this.transitionTo('team.user', currentUser);
                } else if (isEditor && !isOwnProfile && !user.get('isAuthorOrContributor')) {
                    this.transitionTo('team');
                }
            });
        },

        serialize(model) {
            return { user_slug: model.get('slug') };
        },

        actions: {
            didTransition() {
                this.modelFor('team.user').get('errors').clear();
            },

            save() {
                this.get('controller.save').perform();
            },

            willTransition(transition) {
                let controller = this.get('controller');
                let user = controller.get('user');
                let dirtyAttributes = controller.get('dirtyAttributes');
                let modelIsDirty = user.get('hasDirtyAttributes');

                // always reset the password properties on the user model when leaving
                if (user) {
                    user.set('password', '');
                    user.set('newPassword', '');
                    user.set('ne2Password', '');
                }

                if (modelIsDirty || dirtyAttributes) {
                    transition.abort();
                    controller.send('toggleLeaveSettingsModal', transition);
                    return;
                }
            }
        }
    });
});
define('ghost-admin/serializers/application', ['exports', 'ember-data/serializers/rest', 'ember-inflector'], function (exports, _rest, _emberInflector) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _rest.default.extend({
        serialize() /*snapshot, options*/{
            let json = this._super(...arguments);

            // don't send attributes that are updated automatically on the server
            delete json.created_by;
            delete json.updated_by;

            return json;
        },

        serializeIntoHash(hash, type, record, options) {
            // Our API expects an id on the posted object
            options = options || {};
            options.includeId = true;

            // We have a plural root in the API
            let root = (0, _emberInflector.pluralize)(type.modelName);
            let data = this.serialize(record, options);

            hash[root] = [data];
        },

        keyForAttribute(attr) {
            return Ember.String.decamelize(attr);
        }
    });
});
define('ghost-admin/serializers/invite', ['exports', 'ghost-admin/serializers/application'], function (exports, _application) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _application.default.extend({
        attrs: {
            role: { key: 'role_id' },
            createdAtUTC: { key: 'created_at' },
            updatedAtUTC: { key: 'updated_at' }
        }
    });
});
define('ghost-admin/serializers/notification', ['exports', 'ghost-admin/serializers/application'], function (exports, _application) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _application.default.extend({
        attrs: {
            key: { key: 'location' }
        }
    });
});
define('ghost-admin/serializers/post', ['exports', 'ghost-admin/serializers/application', 'ember-data/serializers/embedded-records-mixin', 'ember-inflector'], function (exports, _application, _embeddedRecordsMixin, _emberInflector) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _application.default.extend(_embeddedRecordsMixin.default, {
        // settings for the EmbeddedRecordsMixin.
        attrs: {
            authors: { embedded: 'always' },
            tags: { embedded: 'always' },
            publishedAtUTC: { key: 'published_at' },
            createdAtUTC: { key: 'created_at' },
            updatedAtUTC: { key: 'updated_at' }
        },

        normalizeSingleResponse(store, primaryModelClass, payload) {
            let root = this.keyForAttribute(primaryModelClass.modelName);
            let pluralizedRoot = (0, _emberInflector.pluralize)(primaryModelClass.modelName);

            if (payload[pluralizedRoot]) {
                payload[root] = payload[pluralizedRoot][0];
                delete payload[pluralizedRoot];
            }

            return this._super(...arguments);
        },

        normalizeArrayResponse() {
            return this._super(...arguments);
        },

        serialize() /*snapshot, options*/{
            let json = this._super(...arguments);

            // Properties that exist on the model but we don't want sent in the payload
            delete json.uuid;
            // Server-side-generated fields
            // TODO: remove once the API has protection against overriding auto generation
            delete json.html;
            delete json.plaintext;
            // Inserted locally as a convenience.
            delete json.author_id;
            // Read-only virtual property.
            delete json.url;
            // Deprecated property (replaced with data.authors)
            delete json.author;

            return json;
        }
    });
});
define('ghost-admin/serializers/role', ['exports', 'ghost-admin/serializers/application'], function (exports, _application) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _application.default.extend({
        attrs: {
            createdAtUTC: { key: 'created_at' },
            updatedAtUTC: { key: 'updated_at' }
        }
    });
});
define('ghost-admin/serializers/setting', ['exports', 'ghost-admin/serializers/application', 'ember-inflector'], function (exports, _application, _emberInflector) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _application.default.extend({
        serializeIntoHash(hash, type, record, options) {
            // Settings API does not want ids
            options = options || {};
            options.includeId = false;

            let root = (0, _emberInflector.pluralize)(type.modelName);
            let data = this.serialize(record, options);
            let payload = [];

            delete data.id;

            Object.keys(data).forEach(k => {
                payload.push({ key: k, value: data[k] });
            });

            hash[root] = payload;
        },

        normalizeArrayResponse(store, primaryModelClass, _payload, id, requestType) {
            let payload = { settings: [this._extractObjectFromArrayPayload(_payload)] };
            return this._super(store, primaryModelClass, payload, id, requestType);
        },

        normalizeSingleResponse(store, primaryModelClass, _payload, id, requestType) {
            let payload = { setting: this._extractObjectFromArrayPayload(_payload) };
            return this._super(store, primaryModelClass, payload, id, requestType);
        },

        _extractObjectFromArrayPayload(_payload) {
            let payload = { id: '0' };

            _payload.settings.forEach(setting => {
                payload[setting.key] = setting.value;
            });

            return payload;
        }
    });
});
define('ghost-admin/serializers/subscriber', ['exports', 'ghost-admin/serializers/application'], function (exports, _application) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _application.default.extend({
        attrs: {
            unsubscribedAtUTC: { key: 'unsubscribed_at' },
            createdAtUTC: { key: 'created_at' },
            updatedAtUTC: { key: 'updated_at' }
        }
    });
});
define('ghost-admin/serializers/tag', ['exports', 'ghost-admin/serializers/application', 'ember-inflector'], function (exports, _application, _emberInflector) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _application.default.extend({
        attrs: {
            createdAtUTC: { key: 'created_at' },
            updatedAtUTC: { key: 'updated_at' }
        },

        serialize() /*snapshot, options*/{
            let json = this._super(...arguments);

            // Properties that exist on the model but we don't want sent in the payload
            delete json.count;

            return json;
        },

        // if we use `queryRecord` ensure we grab the first record to avoid
        // DS.SERIALIZER.REST.QUERYRECORD-ARRAY-RESPONSE deprecations
        normalizeResponse(store, primaryModelClass, payload, id, requestType) {
            if (requestType === 'queryRecord') {
                let singular = primaryModelClass.modelName;
                let plural = (0, _emberInflector.pluralize)(singular);

                if (payload[plural]) {
                    payload[singular] = payload[plural][0];
                    delete payload[plural];
                }
            }
            return this._super(...arguments);
        }
    });
});
define('ghost-admin/serializers/theme', ['exports', 'ghost-admin/serializers/application'], function (exports, _application) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _application.default.extend({
        primaryKey: 'name'
    });
});
define('ghost-admin/serializers/user', ['exports', 'ghost-admin/serializers/application', 'ember-data/serializers/embedded-records-mixin', 'ember-inflector'], function (exports, _application, _embeddedRecordsMixin, _emberInflector) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _application.default.extend(_embeddedRecordsMixin.default, {
        attrs: {
            roles: { embedded: 'always' },
            lastLoginUTC: { key: 'last_seen' },
            createdAtUTC: { key: 'created_at' },
            updatedAtUTC: { key: 'updated_at' }
        },

        extractSingle(store, primaryType, payload) {
            let root = this.keyForAttribute(primaryType.modelName);
            let pluralizedRoot = (0, _emberInflector.pluralize)(primaryType.modelName);

            payload[root] = payload[pluralizedRoot][0];
            delete payload[pluralizedRoot];

            return this._super(...arguments);
        },

        normalizeSingleResponse(store, primaryModelClass, payload) {
            let root = this.keyForAttribute(primaryModelClass.modelName);
            let pluralizedRoot = (0, _emberInflector.pluralize)(primaryModelClass.modelName);

            if (payload[pluralizedRoot]) {
                payload[root] = payload[pluralizedRoot][0];
                delete payload[pluralizedRoot];
            }

            return this._super(...arguments);
        }
    });
});
define('ghost-admin/services/-in-viewport', ['exports', 'ember-in-viewport/services/-in-viewport'], function (exports, _inViewport) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _inViewport.default;
    }
  });
});
define('ghost-admin/services/ajax', ['exports', 'ember-ajax/services/ajax', 'ghost-admin/config/environment', 'ember-ajax/errors'], function (exports, _ajax, _environment, _errors) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.VersionMismatchError = VersionMismatchError;
    exports.isVersionMismatchError = isVersionMismatchError;
    exports.ServerUnreachableError = ServerUnreachableError;
    exports.isServerUnreachableError = isServerUnreachableError;
    exports.RequestEntityTooLargeError = RequestEntityTooLargeError;
    exports.isRequestEntityTooLargeError = isRequestEntityTooLargeError;
    exports.UnsupportedMediaTypeError = UnsupportedMediaTypeError;
    exports.isUnsupportedMediaTypeError = isUnsupportedMediaTypeError;
    exports.MaintenanceError = MaintenanceError;
    exports.isMaintenanceError = isMaintenanceError;
    exports.ThemeValidationError = ThemeValidationError;
    exports.isThemeValidationError = isThemeValidationError;


    const JSON_CONTENT_TYPE = 'application/json';
    const GHOST_REQUEST = /\/ghost\/api\//;
    const TOKEN_REQUEST = /authentication\/(?:token|ghost|revoke)/;

    function isJSONContentType(header) {
        if (!header || Ember.isNone(header)) {
            return false;
        }
        return header.indexOf(JSON_CONTENT_TYPE) === 0;
    }

    /* Version mismatch error */

    function VersionMismatchError(payload) {
        _errors.AjaxError.call(this, payload, 'API server is running a newer version of Ghost, please upgrade.');
    }

    VersionMismatchError.prototype = Object.create(_errors.AjaxError.prototype);

    function isVersionMismatchError(errorOrStatus, payload) {
        if ((0, _errors.isAjaxError)(errorOrStatus)) {
            return errorOrStatus instanceof VersionMismatchError;
        } else {
            return Ember.get(payload || {}, 'errors.firstObject.errorType') === 'VersionMismatchError';
        }
    }

    /* Request entity too large error */

    function ServerUnreachableError(payload) {
        _errors.AjaxError.call(this, payload, 'Server was unreachable');
    }

    ServerUnreachableError.prototype = Object.create(_errors.AjaxError.prototype);

    function isServerUnreachableError(error) {
        if ((0, _errors.isAjaxError)(error)) {
            return error instanceof ServerUnreachableError;
        } else {
            return error === 0 || error === '0';
        }
    }

    function RequestEntityTooLargeError(payload) {
        _errors.AjaxError.call(this, payload, 'Request is larger than the maximum file size the server allows');
    }

    RequestEntityTooLargeError.prototype = Object.create(_errors.AjaxError.prototype);

    function isRequestEntityTooLargeError(errorOrStatus) {
        if ((0, _errors.isAjaxError)(errorOrStatus)) {
            return errorOrStatus instanceof RequestEntityTooLargeError;
        } else {
            return errorOrStatus === 413;
        }
    }

    /* Unsupported media type error */

    function UnsupportedMediaTypeError(payload) {
        _errors.AjaxError.call(this, payload, 'Request contains an unknown or unsupported file type.');
    }

    UnsupportedMediaTypeError.prototype = Object.create(_errors.AjaxError.prototype);

    function isUnsupportedMediaTypeError(errorOrStatus) {
        if ((0, _errors.isAjaxError)(errorOrStatus)) {
            return errorOrStatus instanceof UnsupportedMediaTypeError;
        } else {
            return errorOrStatus === 415;
        }
    }

    /* Maintenance error */

    function MaintenanceError(payload) {
        _errors.AjaxError.call(this, payload, 'Ghost is currently undergoing maintenance, please wait a moment then retry.');
    }

    MaintenanceError.prototype = Object.create(_errors.AjaxError.prototype);

    function isMaintenanceError(errorOrStatus) {
        if ((0, _errors.isAjaxError)(errorOrStatus)) {
            return errorOrStatus instanceof MaintenanceError;
        } else {
            return errorOrStatus === 503;
        }
    }

    /* Theme validation error */

    function ThemeValidationError(payload) {
        _errors.AjaxError.call(this, payload, 'Theme is not compatible or contains errors.');
    }

    ThemeValidationError.prototype = Object.create(_errors.AjaxError.prototype);

    function isThemeValidationError(errorOrStatus, payload) {
        if ((0, _errors.isAjaxError)(errorOrStatus)) {
            return errorOrStatus instanceof ThemeValidationError;
        } else {
            return Ember.get(payload || {}, 'errors.firstObject.errorType') === 'ThemeValidationError';
        }
    }

    /* end: custom error types */

    let ajaxService = _ajax.default.extend({
        session: Ember.inject.service(),

        headers: Ember.computed('session.isAuthenticated', function () {
            let session = this.get('session');
            let headers = {};

            headers['X-Ghost-Version'] = _environment.default.APP.version;
            headers['App-Pragma'] = 'no-cache';

            if (session.get('isAuthenticated')) {
                var _session$get = session.get('data.authenticated');

                let access_token = _session$get.access_token;

                headers.Authorization = `Bearer ${access_token}`;
                /* eslint-enable camelcase */
            }

            return headers;
        }).volatile(),

        // ember-ajax recognises `application/vnd.api+json` as a JSON-API request
        // and formats appropriately, we want to handle `application/json` the same
        _makeRequest(hash) {
            let isAuthenticated = this.get('session.isAuthenticated');
            let isGhostRequest = GHOST_REQUEST.test(hash.url);
            let isTokenRequest = isGhostRequest && TOKEN_REQUEST.test(hash.url);
            let tokenExpiry = this.get('session.authenticated.expires_at');
            let isTokenExpired = tokenExpiry < new Date().getTime();

            if (isJSONContentType(hash.contentType) && hash.type !== 'GET') {
                if (typeof hash.data === 'object') {
                    hash.data = JSON.stringify(hash.data);
                }
            }

            // we can get into a situation where the app is left open without a
            // network connection and the token subsequently expires, this will
            // result in the next network request returning a 401 and killing the
            // session. This is an attempt to detect that and restore the session
            // using the stored refresh token before continuing with the request
            //
            // TODO:
            // - this might be quite blunt, if we have a lot of requests at once
            //   we probably want to queue the requests until the restore completes
            // BUG:
            // - the original caller gets a rejected promise with `undefined` instead
            //   of the AjaxError object when session restore fails. This isn't a
            //   huge deal because the session will be invalidated and app reloaded
            //   but it would be nice to be consistent
            if (isAuthenticated && isGhostRequest && !isTokenRequest && isTokenExpired) {
                return this.get('session').restore().then(() => this._makeRequest(hash));
            }

            return this._super(...arguments);
        },

        handleResponse(status, headers, payload, request) {
            if (this.isVersionMismatchError(status, headers, payload)) {
                return new VersionMismatchError(payload);
            } else if (this.isServerUnreachableError(status, headers, payload)) {
                return new ServerUnreachableError(payload);
            } else if (this.isRequestEntityTooLargeError(status, headers, payload)) {
                return new RequestEntityTooLargeError(payload);
            } else if (this.isUnsupportedMediaTypeError(status, headers, payload)) {
                return new UnsupportedMediaTypeError(payload);
            } else if (this.isMaintenanceError(status, headers, payload)) {
                return new MaintenanceError(payload);
            } else if (this.isThemeValidationError(status, headers, payload)) {
                return new ThemeValidationError(payload);
            }

            let isGhostRequest = GHOST_REQUEST.test(request.url);
            let isAuthenticated = this.get('session.isAuthenticated');
            let isUnauthorized = this.isUnauthorizedError(status, headers, payload);

            if (isAuthenticated && isGhostRequest && isUnauthorized) {
                this.get('session').invalidate();
            }

            return this._super(...arguments);
        },

        normalizeErrorResponse(status, headers, payload) {
            if (payload && typeof payload === 'object') {
                let errors = payload.error || payload.errors || payload.message || undefined;

                if (errors) {
                    if (!Ember.isArray(errors)) {
                        errors = [errors];
                    }

                    payload.errors = errors.map(function (error) {
                        if (typeof error === 'string') {
                            return { message: error };
                        } else {
                            return error;
                        }
                    });
                }
            }

            return this._super(status, headers, payload);
        },

        isVersionMismatchError(status, headers, payload) {
            return isVersionMismatchError(status, payload);
        },

        isServerUnreachableError(status) {
            return isServerUnreachableError(status);
        },

        isRequestEntityTooLargeError(status) {
            return isRequestEntityTooLargeError(status);
        },

        isUnsupportedMediaTypeError(status) {
            return isUnsupportedMediaTypeError(status);
        },

        isMaintenanceError(status, headers, payload) {
            return isMaintenanceError(status, payload);
        },

        isThemeValidationError(status, headers, payload) {
            return isThemeValidationError(status, payload);
        }
    });

    // we need to reopen so that internal methods use the correct contentType
    ajaxService.reopen({
        contentType: 'application/json; charset=UTF-8'
    });

    exports.default = ajaxService;
});
define('ghost-admin/services/clock', ['exports', 'ghost-admin/config/environment', 'moment'], function (exports, _environment, _moment) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    const ONE_SECOND = 1000;

    // Creates a clock service to run intervals.

    exports.default = Ember.Service.extend({
        second: null,
        minute: null,
        hour: null,

        init() {
            this._super(...arguments);
            this.tick();
        },

        tick() {
            let now = (0, _moment.default)().utc();

            this.setProperties({
                second: now.seconds(),
                minute: now.minutes(),
                hour: now.hours()
            });

            if (_environment.default.environment !== 'test') {
                Ember.run.later(() => {
                    this.tick();
                }, ONE_SECOND);
            }
        }

    });
});
define('ghost-admin/services/config', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    const _ProxyMixin = Ember._ProxyMixin;
    exports.default = Ember.Service.extend(_ProxyMixin, {
        ajax: Ember.inject.service(),
        ghostPaths: Ember.inject.service(),

        content: null,

        init() {
            this._super(...arguments);
            this.content = {};
        },

        fetch() {
            let configUrl = this.get('ghostPaths.url').api('configuration');

            return this.get('ajax').request(configUrl).then(publicConfig => {
                // normalize blogUrl to non-trailing-slash
                var _publicConfig$configu = _slicedToArray(publicConfig.configuration, 1);

                let blogUrl = _publicConfig$configu[0].blogUrl;

                publicConfig.configuration[0].blogUrl = blogUrl.replace(/\/$/, '');

                this.set('content', publicConfig.configuration[0]);
            });
        },

        fetchPrivate() {
            let privateConfigUrl = this.get('ghostPaths.url').api('configuration', 'private');

            return this.get('ajax').request(privateConfigUrl).then(privateConfig => {
                Ember.assign(this.get('content'), privateConfig.configuration[0]);
            });
        },

        availableTimezones: Ember.computed(function () {
            let timezonesUrl = this.get('ghostPaths.url').api('configuration', 'timezones');

            return this.get('ajax').request(timezonesUrl).then(configTimezones => {
                var _configTimezones$conf = _slicedToArray(configTimezones.configuration, 1);

                let timezonesObj = _configTimezones$conf[0];


                timezonesObj = timezonesObj.timezones;

                return timezonesObj;
            });
        }),

        blogDomain: Ember.computed('blogUrl', function () {
            let blogUrl = this.get('blogUrl');
            let blogDomain = blogUrl.replace(/^https?:\/\//, '').replace(/\/?$/, '');

            return blogDomain;
        })
    });
});
define('ghost-admin/services/cookies', ['exports', 'ember-cookies/services/cookies'], function (exports, _cookies) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _cookies.default;
});
define('ghost-admin/services/drag-coordinator', ['exports', 'ember-drag-drop/services/drag-coordinator'], function (exports, _dragCoordinator) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _dragCoordinator.default;
});
define('ghost-admin/services/dropdown', ['exports', 'ghost-admin/mixins/body-event-listener'], function (exports, _bodyEventListener) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Service.extend(Ember.Evented, _bodyEventListener.default, {
        bodyClick(event) {
            let dropdownSelector = '.ember-basic-dropdown-trigger, .ember-basic-dropdown-content';

            if (Ember.$(event.target).closest(dropdownSelector).length <= 0) {
                this.closeDropdowns();
            }
        },

        closeDropdowns() {
            this.trigger('close');
        },

        toggleDropdown(dropdownName, dropdownButton) {
            this.trigger('toggle', { target: dropdownName, button: dropdownButton });
        }
    });
});
define('ghost-admin/services/ember-load-config', ['exports', 'ember-load/services/ember-load-config', 'ghost-admin/config/environment'], function (exports, _emberLoadConfig, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  const userConfig = _environment.default['ember-load'] || {};

  exports.default = _emberLoadConfig.default.extend({
    loadingIndicatorClass: userConfig.loadingIndicatorClass
  });
});
define('ghost-admin/services/event-bus', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Service.extend(Ember.Evented, {
        publish() {
            return this.trigger(...arguments);
        },
        subscribe() {
            return this.on(...arguments);
        },
        unsubscribe() {
            return this.off(...arguments);
        }
    });
});
define('ghost-admin/services/feature', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.feature = feature;
    function feature(name, options = {}) {
        let user = options.user,
            onChange = options.onChange;

        let watchedProps = user ? [`accessibility.${name}`] : [`config.${name}`, `labs.${name}`];

        return Ember.computed.apply(Ember, watchedProps.concat({
            get() {
                let enabled = false;

                if (user) {
                    enabled = this.get(`accessibility.${name}`);
                } else if (this.get(`config.${name}`)) {
                    enabled = this.get(`config.${name}`);
                } else {
                    enabled = this.get(`labs.${name}`) || false;
                }

                if (options.developer) {
                    enabled = enabled && this.get('config.enableDeveloperExperiments');
                }

                return enabled;
            },
            set(key, value) {
                this.update(key, value, options);

                if (onChange) {
                    // value must be passed here because the value isn't set until
                    // the setter function returns
                    this.get(onChange).bind(this)(value);
                }

                return value;
            }
        }));
    }

    exports.default = Ember.Service.extend({
        store: Ember.inject.service(),
        config: Ember.inject.service(),
        session: Ember.inject.service(),
        settings: Ember.inject.service(),
        notifications: Ember.inject.service(),
        lazyLoader: Ember.inject.service(),

        publicAPI: feature('publicAPI'),
        subscribers: feature('subscribers'),
        nightShift: feature('nightShift', { user: true, onChange: '_setAdminTheme' }),

        _user: null,

        labs: Ember.computed('settings.labs', function () {
            let labs = this.get('settings.labs');

            try {
                return JSON.parse(labs) || {};
            } catch (e) {
                return {};
            }
        }),

        accessibility: Ember.computed('_user.accessibility', function () {
            let accessibility = this.get('_user.accessibility');

            try {
                return JSON.parse(accessibility) || {};
            } catch (e) {
                return {};
            }
        }),

        fetch() {
            return Ember.RSVP.hash({
                settings: this.get('settings').fetch(),
                user: this.get('session.user')
            }).then(({ user }) => {
                this.set('_user', user);
                return this._setAdminTheme().then(() => true);
            });
        },

        update(key, value, options = {}) {
            let serviceProperty = options.user ? 'accessibility' : 'labs';
            let model = this.get(options.user ? '_user' : 'settings');
            let featureObject = this.get(serviceProperty);

            // set the new key value for either the labs property or the accessibility property
            Ember.set(featureObject, key, value);

            // update the 'labs' or 'accessibility' key of the model
            model.set(serviceProperty, JSON.stringify(featureObject));

            return model.save().then(() => {
                // return the labs key value that we get from the server
                this.notifyPropertyChange(serviceProperty);
                return this.get(`${serviceProperty}.${key}`);
            }).catch(error => {
                model.rollbackAttributes();
                this.notifyPropertyChange(serviceProperty);

                // we'll always have an errors object unless we hit a
                // validation error
                if (!error) {
                    throw new Ember.Error(`Validation of the feature service ${options.user ? 'user' : 'settings'} model failed when updating ${serviceProperty}.`);
                }

                this.get('notifications').showAPIError(error);

                return this.get(`${serviceProperty}.${key}`);
            });
        },

        _setAdminTheme(enabled) {
            let nightShift = enabled;

            if (typeof nightShift === 'undefined') {
                nightShift = enabled || this.get('nightShift');
            }

            return this.get('lazyLoader').loadStyle('dark', 'assets/ghost-dark.css', true).then(() => {
                Ember.$('link[title=dark]').prop('disabled', !nightShift);
                Ember.$('link[title=light]').prop('disabled', nightShift);
            });
        }
    });
});
define('ghost-admin/services/ghost-paths', ['exports', 'ghost-admin/utils/ghost-paths'], function (exports, _ghostPaths) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Service.extend((0, _ghostPaths.default)());
});
define('ghost-admin/services/infinity', ['exports', 'ember-infinity/services/infinity'], function (exports, _infinity) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _infinity.default;
    }
  });
});
define('ghost-admin/services/lazy-loader', ['exports', 'ghost-admin/config/environment'], function (exports, _environment) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Service.extend({
        ajax: Ember.inject.service(),
        ghostPaths: Ember.inject.service(),

        // This is needed so we can disable it in unit tests
        testing: undefined,

        scriptPromises: null,

        init() {
            this._super(...arguments);
            this.scriptPromises = {};

            if (this.testing === undefined) {
                this.testing = _environment.default.environment === 'test';
            }
        },

        loadScript(key, url) {
            if (this.get('testing')) {
                return Ember.RSVP.resolve();
            }

            if (this.get(`scriptPromises.${key}`)) {
                // Script is already loaded/in the process of being loaded,
                // so return that promise
                return this.get(`scriptPromises.${key}`);
            }

            let ajax = this.get('ajax');
            let adminRoot = this.get('ghostPaths.adminRoot');

            let scriptPromise = ajax.request(`${adminRoot}${url}`, {
                dataType: 'script',
                cache: true
            });

            this.set(`scriptPromises.${key}`, scriptPromise);

            return scriptPromise;
        },

        loadStyle(key, url, alternate = false) {
            if (this.get('testing') || Ember.$(`#${key}-styles`).length) {
                return Ember.RSVP.resolve();
            }

            return new Ember.RSVP.Promise((resolve, reject) => {
                let link = document.createElement('link');
                link.id = `${key}-styles`;
                link.rel = alternate ? 'alternate stylesheet' : 'stylesheet';
                link.href = `${this.get('ghostPaths.adminRoot')}${url}`;
                link.onload = () => {
                    if (alternate) {
                        // If stylesheet is alternate and we disable the stylesheet before injecting into the DOM,
                        // the onload handler never gets called. Thus, we should disable the link after it has finished loading
                        link.disabled = true;
                    }
                    resolve();
                };
                link.onerror = reject;

                if (alternate) {
                    link.title = key;
                }

                Ember.$('head').append(Ember.$(link));
            });
        }
    });
});
define('ghost-admin/services/liquid-fire-transitions', ['exports', 'liquid-wormhole/services/liquid-fire-transitions'], function (exports, _liquidFireTransitions) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _liquidFireTransitions.default;
    }
  });
});
define('ghost-admin/services/liquid-wormhole', ['exports', 'liquid-wormhole/services/liquid-wormhole'], function (exports, _liquidWormhole) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _liquidWormhole.default;
    }
  });
});
define('ghost-admin/services/media-queries', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    const MEDIA_QUERIES = {
        maxWidth600: '(max-width: 600px)',
        isMobile: '(max-width: 800px)',
        maxWidth900: '(max-width: 900px)',
        maxWidth1000: '(max-width: 1000px)'
    };

    exports.default = Ember.Service.extend(Ember.Evented, {
        init() {
            this._super(...arguments);
            this._handlers = [];
            this.loadQueries(MEDIA_QUERIES);
        },

        loadQueries(queries) {
            Object.keys(queries).forEach(key => {
                this.loadQuery(key, queries[key]);
            });
        },

        loadQuery(key, queryString) {
            let query = window.matchMedia(queryString);

            this.set(key, query.matches);

            let handler = Ember.run.bind(this, () => {
                let lastValue = this.get(key);
                let newValue = query.matches;
                if (lastValue !== newValue) {
                    this.set(key, newValue);
                    this.trigger('change', key, newValue);
                }
            });
            query.addListener(handler);
            this._handlers.push([query, handler]);
        },

        willDestroy() {
            this._handlers.forEach(([query, handler]) => {
                query.removeListener(handler);
            });
            this._super(...arguments);
        }

    });
});
define('ghost-admin/services/media', ['exports', 'ember-responsive/media'], function (exports, _media) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _media.default;
});
define('ghost-admin/services/moment', ['exports', 'ember-moment/services/moment', 'ghost-admin/config/environment'], function (exports, _moment, _environment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  const get = Ember.get;
  exports.default = _moment.default.extend({
    defaultFormat: get(_environment.default, 'moment.outputFormat')
  });
});
define('ghost-admin/services/notifications', ['exports', 'ghost-admin/services/ajax'], function (exports, _ajax) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Service.extend({
        delayedNotifications: Ember.A(),
        content: Ember.A(),

        upgradeStatus: Ember.inject.service(),

        alerts: Ember.computed.filter('content', function (notification) {
            let status = Ember.get(notification, 'status');
            return status === 'alert';
        }),

        notifications: Ember.computed.filter('content', function (notification) {
            let status = Ember.get(notification, 'status');
            return status === 'notification';
        }),

        handleNotification(message, delayed) {
            // If this is an alert message from the server, treat it as html safe
            if (typeof message.toJSON === 'function' && message.get('status') === 'alert') {
                message.set('message', message.get('message').htmlSafe());
            }

            if (!Ember.get(message, 'status')) {
                Ember.set(message, 'status', 'notification');
            }

            // close existing duplicate alerts/notifications to avoid stacking
            if (Ember.get(message, 'key')) {
                this._removeItems(Ember.get(message, 'status'), Ember.get(message, 'key'));
            }

            if (!delayed) {
                this.get('content').pushObject(message);
            } else {
                this.get('delayedNotifications').pushObject(message);
            }
        },

        showAlert(message, options) {
            options = options || {};

            this.handleNotification({
                message,
                status: 'alert',
                type: options.type,
                key: options.key
            }, options.delayed);
        },

        showNotification(message, options) {
            options = options || {};

            if (!options.doNotCloseNotifications) {
                this.closeNotifications();
            } else {
                // TODO: this should be removed along with showErrors
                options.key = undefined;
            }

            this.handleNotification({
                message,
                status: 'notification',
                type: options.type,
                key: options.key
            }, options.delayed);
        },

        showAPIError(resp, options) {
            // handle "global" errors
            if ((0, _ajax.isVersionMismatchError)(resp)) {
                return this.get('upgradeStatus').requireUpgrade();
            } else if ((0, _ajax.isMaintenanceError)(resp)) {
                return this.get('upgradeStatus').maintenanceAlert();
            }

            // loop over ember-ajax errors object
            if (resp && resp.payload && Ember.isArray(resp.payload.errors)) {
                return resp.payload.errors.forEach(error => {
                    this._showAPIError(error, options);
                });
            }

            this._showAPIError(resp, options);
        },

        _showAPIError(resp, options) {
            options = options || {};
            options.type = options.type || 'error';

            // if possible use the title to get a unique key
            // - we only show one alert for each key so if we get multiple errors
            //   only the last one will be shown
            if (!options.key && !Ember.isBlank(Ember.get(resp, 'title'))) {
                options.key = Ember.String.dasherize(Ember.get(resp, 'title'));
            }
            options.key = ['api-error', options.key].compact().join('.');

            let msg = options.defaultErrorText || 'There was a problem on the server, please try again.';

            if (resp instanceof String) {
                msg = resp;
            } else if (!Ember.isBlank(Ember.get(resp, 'detail'))) {
                msg = resp.detail;
            } else if (!Ember.isBlank(Ember.get(resp, 'message'))) {
                msg = resp.message;
            }

            this.showAlert(msg, options);
        },

        displayDelayed() {
            this.delayedNotifications.forEach(message => {
                this.get('content').pushObject(message);
            });
            this.delayedNotifications = [];
        },

        closeNotification(notification) {
            let content = this.get('content');

            if (typeof notification.toJSON === 'function') {
                notification.deleteRecord();
                notification.save().finally(() => {
                    content.removeObject(notification);
                });
            } else {
                content.removeObject(notification);
            }
        },

        closeNotifications(key) {
            this._removeItems('notification', key);
        },

        closeAlerts(key) {
            this._removeItems('alert', key);
        },

        clearAll() {
            this.get('content').clear();
        },

        _removeItems(status, key) {
            if (key) {
                let keyBase = this._getKeyBase(key);
                // TODO: keys should only have . special char but we should
                // probably use a better regexp escaping function/polyfill
                let escapedKeyBase = keyBase.replace('.', '\\.');
                let keyRegex = new RegExp(`^${escapedKeyBase}`);

                this.set('content', this.get('content').reject(item => {
                    let itemKey = Ember.get(item, 'key');
                    let itemStatus = Ember.get(item, 'status');

                    return itemStatus === status && itemKey && itemKey.match(keyRegex);
                }));
            } else {
                this.set('content', this.get('content').rejectBy('status', status));
            }
        },

        // take a key and return the first two elements, eg:
        // "invite.revoke.failed" => "invite.revoke"
        _getKeyBase(key) {
            return key.split('.').slice(0, 2).join('.');
        }
    });
});
define('ghost-admin/services/power-calendar', ['exports', 'ember-power-calendar/services/power-calendar'], function (exports, _powerCalendar) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _powerCalendar.default;
    }
  });
});
define('ghost-admin/services/resize-detector', ['exports', 'npm:element-resize-detector'], function (exports, _npmElementResizeDetector) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Service.extend({
        init() {
            this._super(...arguments);
            this.detector = (0, _npmElementResizeDetector.default)({
                strategy: 'scroll'
            });
        },

        setup(selector, callback) {
            let element = document.querySelector(selector);
            if (!element) {
                // eslint-disable-next-line
                console.error(`service:resize-detector - could not find element matching ${selector}`);
            }
            this.detector.listenTo(element, callback);
        },

        teardown(selector, callback) {
            let element = document.querySelector(selector);
            if (element) {
                this.detector.removeListener(element, callback);
            }
        }
    });
});
define('ghost-admin/services/scrollbar-thickness', ['exports', 'ember-scrollable/services/scrollbar-thickness'], function (exports, _scrollbarThickness) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _scrollbarThickness.default;
    }
  });
});
define('ghost-admin/services/session', ['exports', 'ember-simple-auth/services/session'], function (exports, _session) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _session.default.extend({
        feature: Ember.inject.service(),
        store: Ember.inject.service(),
        tour: Ember.inject.service(),

        user: Ember.computed(function () {
            return this.get('store').queryRecord('user', { id: 'me' });
        }),

        authenticate() {
            return this._super(...arguments).then(authResult => {
                // TODO: remove duplication with application.afterModel
                let preloadPromises = [this.get('feature').fetch(), this.get('tour').fetchViewed()];

                return Ember.RSVP.all(preloadPromises).then(() => authResult);
            });
        }
    });
});
define('ghost-admin/services/settings', ['exports', 'ghost-admin/mixins/validation-engine'], function (exports, _validationEngine) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    const _ProxyMixin = Ember._ProxyMixin;
    exports.default = Ember.Service.extend(_ProxyMixin, _validationEngine.default, {
        store: Ember.inject.service(),

        // will be set to the single Settings model, it's a reference so any later
        // changes to the settings object in the store will be reflected
        content: null,

        validationType: 'setting',
        _loadingPromise: null,

        // this is an odd case where we only want to react to changes that we get
        // back from the API rather than local updates
        settledIcon: '',

        // the settings API endpoint is a little weird as it's singular and we have
        // to pass in all types - if we ever fetch settings without all types then
        // save we have problems with the missing settings being removed or reset
        _loadSettings() {
            if (!this._loadingPromise) {
                this._loadingPromise = this.get('store').queryRecord('setting', { type: 'blog,theme,private' }).then(settings => {
                    this._loadingPromise = null;
                    return settings;
                });
            }

            return this._loadingPromise;
        },

        fetch() {
            if (!this.get('content')) {
                return this.reload();
            } else {
                return Ember.RSVP.resolve(this);
            }
        },

        reload() {
            return this._loadSettings().then(settings => {
                this.set('content', settings);
                this.set('settledIcon', Ember.get(settings, 'icon'));
                return this;
            });
        },

        save() {
            let settings = this.get('content');

            if (!settings) {
                return false;
            }

            return settings.save().then(settings => {
                this.set('settledIcon', Ember.get(settings, 'icon'));
                return settings;
            });
        },

        rollbackAttributes() {
            return this.get('content').rollbackAttributes();
        },

        changedAttributes() {
            return this.get('content').changedAttributes();
        }
    });
});
define('ghost-admin/services/slug-generator', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    const resolve = Ember.RSVP.resolve;
    exports.default = Ember.Service.extend({
        ghostPaths: Ember.inject.service(),
        ajax: Ember.inject.service(),

        generateSlug(slugType, textToSlugify) {
            let url;

            if (!textToSlugify) {
                return resolve('');
            }

            url = this.get('ghostPaths.url').api('slugs', slugType, encodeURIComponent(textToSlugify));

            return this.get('ajax').request(url).then(response => {
                var _response$slugs = _slicedToArray(response.slugs, 1);

                let firstSlug = _response$slugs[0];
                let slug = firstSlug.slug;


                return slug;
            });
        }
    });
});
define('ghost-admin/services/text-measurer', ['exports', 'ember-text-measurer/services/text-measurer'], function (exports, _textMeasurer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _textMeasurer.default;
    }
  });
});
define('ghost-admin/services/tour', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Service.extend(Ember.Evented, {

        ghostPaths: Ember.inject.service(),
        session: Ember.inject.service(),

        // this service is responsible for managing tour item visibility and syncing
        // the viewed state with the server
        //
        // tour items need to be centrally defined here so that we have a single
        // source of truth for marking all tour items as viewed
        //
        // a {{gh-tour-item "unique-id"}} component can be inserted in any template,
        // this will use the tour service to grab content and determine visibility
        // with the component in control of rendering the throbber/controlling the
        // modal - this allows the component lifecycle hooks to perform automatic
        // display/cleanup when the relevant UI is visible.

        viewed: null,

        // IDs should **NOT** be changed if they have been part of a release unless
        // the re-display of the throbber should be forced. In that case it may be
        // useful to add a version number eg. `my-feature` -> `my-feature-v2`.
        // Format is as follows:
        //
        // {
        //     id: 'test',
        //     title: 'This is a test',
        //     message: 'This is a test of our <strong>feature tour</strong> feature'
        // }
        //
        // TODO: it may be better to keep this configuration elsewhere to keep the
        // service clean. Eventually we'll want apps to be able to register their
        // own throbbers and tour content
        throbbers: null,

        init() {
            this._super(...arguments);
            let adminUrl = `${window.location.origin}${this.get('ghostPaths.url').admin()}`;
            let adminDisplayUrl = adminUrl.replace(`${window.location.protocol}//`, '');

            this.viewed = [];

            this.throbbers = [{
                id: 'getting-started',
                title: 'Getting started with Ghost',
                message: `This is your admin area! You'll find all of your content, users and settings right here. You can come back any time by visiting <a href="${adminUrl}" target="_blank">${adminDisplayUrl}</a>`
            }, {
                id: 'using-the-editor',
                title: 'Using the Ghost editor',
                message: 'Ghost uses Markdown to allow you to write and format content quickly and easily. This toolbar also helps! Hit the <strong>?</strong> icon for more editor shortcuts.'
            }, {
                id: 'static-post',
                title: 'Turning posts into pages',
                message: 'Static pages are permanent pieces of content which live outside of your usual stream of posts, for example an \'about\' or \'contact\' page.'
            }, {
                id: 'featured-post',
                title: 'Setting a featured post',
                message: 'Depending on your theme, featured posts receive special styling to make them stand out as a particularly important or emphasised story.'
            }, {
                id: 'upload-a-theme',
                title: 'Customising your publication',
                message: 'Using custom themes, you can completely control the look and feel of your site to suit your branch. Here\'s a full guide to help: <strong><a href="https://themes.ghost.org" target="_blank">https://themes.ghost.org</a></strong>'
            }];
        },

        _activeThrobbers: Ember.computed('viewed.[]', 'throbbers.[]', function () {
            // return throbbers that haven't been viewed
            let viewed = this.get('viewed');
            let throbbers = this.get('throbbers');

            return throbbers.reject(throbber => viewed.includes(throbber.id));
        }),

        // retrieve the IDs of the viewed throbbers from the server, always returns
        // a promise
        fetchViewed() {
            return this.get('session.user').then(user => {
                let viewed = user.get('tour') || [];

                this.set('viewed', viewed);

                return viewed;
            });
        },

        // save the list of viewed throbbers to the server overwriting the
        // entire list
        syncViewed() {
            let viewed = this.get('viewed');

            return this.get('session.user').then(user => {
                user.set('tour', viewed);

                return user.save();
            });
        },

        // returns throbber content for a given ID only if that throbber hasn't been
        // viewed. Used by the {{gh-tour-item}} component to determine visibility
        activeThrobber(id) {
            let activeThrobbers = this.get('_activeThrobbers');
            return activeThrobbers.findBy('id', id);
        },

        // when a throbber is opened the component will call this method to mark
        // it as viewed and sync with the server. Always returns a promise
        markThrobberAsViewed(id) {
            let viewed = this.get('viewed');

            if (!viewed.includes(id)) {
                viewed.pushObject(id);
                this.trigger('viewed', id);
                return this.syncViewed();
            } else {
                return Ember.RSVP.resolve(true);
            }
        },

        // opting-out will use the list of IDs defined in this file making it the
        // single-source-of-truth and allowing future client updates to control when
        // new UI should be surfaced through tour items
        optOut() {
            let allThrobberIds = this.get('throbbers').mapBy('id');

            this.set('viewed', allThrobberIds);
            this.trigger('optOut');

            return this.syncViewed();
        },

        // this is not used anywhere at the moment but it's useful to use via ember
        // inspector as a reset mechanism
        reEnable() {
            this.set('viewed', []);
            return this.syncViewed();
        }

    });
});
define('ghost-admin/services/ui', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Service.extend({
        dropdown: Ember.inject.service(),
        mediaQueries: Ember.inject.service(),

        autoNav: false,
        isFullScreen: false,
        showMobileMenu: false,
        showSettingsMenu: false,

        hasSideNav: Ember.computed.not('isSideNavHidden'),
        isMobile: Ember.computed.reads('mediaQueries.isMobile'),
        isSideNavHidden: Ember.computed.or('autoNav', 'isFullScreen', 'isMobile'),

        autoNavOpen: Ember.computed('autoNav', {
            get() {
                return false;
            },
            set(key, value) {
                if (this.get('autoNav')) {
                    return value;
                }
                return false;
            }
        }),

        closeMenus() {
            this.get('dropdown').closeDropdowns();
            this.setProperties({
                showSettingsMenu: false,
                showMobileMenu: false
            });
        },

        openAutoNav() {
            this.set('autoNavOpen', true);
        },

        closeAutoNav() {
            if (this.get('autoNavOpen')) {
                this.get('dropdown').closeDropdowns();
            }
            this.set('autoNavOpen', false);
        },

        closeMobileMenu() {
            this.set('showMobileMenu', false);
        },

        openMobileMenu() {
            this.set('showMobileMenu', true);
        },

        openSettingsMenu() {
            this.set('showSettingsMenu', true);
        },

        toggleAutoNav() {
            this.toggleProperty('autoNav');
        },

        actions: {
            closeMenus() {
                this.closeMenus();
            },

            openAutoNav() {
                this.openAutoNav();
            },

            closeAutoNav() {
                this.closeAutoNav();
            },

            closeMobileMenu() {
                this.closeMobileMenu();
            },

            openMobileMenu() {
                this.openMobileMenu();
            },

            openSettingsMenu() {
                this.openSettingsMenu();
            },

            toggleAutoNav() {
                this.toggleAutoNav();
            }
        }
    });
});
define('ghost-admin/services/unsplash', ['exports', 'fetch', 'ember-concurrency'], function (exports, _fetch, _emberConcurrency) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    const API_URL = 'https://api.unsplash.com';
    const API_VERSION = 'v1';
    const DEBOUNCE_MS = 600;

    exports.default = Ember.Service.extend({
        config: Ember.inject.service(),
        settings: Ember.inject.service(),

        columnCount: 3,
        columns: null,
        error: '',
        photos: null,
        searchTerm: '',

        _columnHeights: null,
        _pagination: null,

        applicationId: '8672af113b0a8573edae3aa3713886265d9bb741d707f6c01a486cde8c278980',
        isLoading: Ember.computed.or('_search.isRunning', '_loadingTasks.isRunning'),

        init() {
            this._super(...arguments);
            this._reset();
        },

        loadNew() {
            this._reset();
            return this.get('_loadNew').perform();
        },

        loadNextPage() {
            // protect against scroll trigger firing when the photos are reset
            if (this.get('_search.isRunning')) {
                return;
            }

            if (Ember.isEmpty(this.get('photos'))) {
                return this.get('_loadNew').perform();
            }

            if (this._pagination.next) {
                return this.get('_loadNextPage').perform();
            }

            // TODO: return error?
            return Ember.RSVP.reject();
        },

        updateSearch(term) {
            if (term === this.get('searchTerm')) {
                return;
            }

            this.set('searchTerm', term);
            this._reset();

            if (term) {
                return this.get('_search').perform(term);
            } else {
                return this.get('_loadNew').perform();
            }
        },

        retryLastRequest() {
            return this.get('_retryLastRequest').perform();
        },

        changeColumnCount(newColumnCount) {
            if (newColumnCount !== this.get('columnCount')) {
                this.set('columnCount', newColumnCount);
                this._resetColumns();
            }
        },

        // let Unsplash know that the photo was inserted
        // https://medium.com/unsplash/unsplash-api-guidelines-triggering-a-download-c39b24e99e02
        triggerDownload(photo) {
            if (photo.links.download_location) {
                this._makeRequest(photo.links.download_location, { ignoreErrors: true });
            }
        },

        actions: {
            updateSearch(term) {
                return this.updateSearch(term);
            }
        },

        _loadingTasks: (0, _emberConcurrency.taskGroup)().drop(),

        _loadNew: (0, _emberConcurrency.task)(function* () {
            let url = `${API_URL}/photos?per_page=30`;
            yield this._makeRequest(url);
        }).group('_loadingTasks'),

        _loadNextPage: (0, _emberConcurrency.task)(function* () {
            yield this._makeRequest(this._pagination.next);
        }).group('_loadingTasks'),

        _retryLastRequest: (0, _emberConcurrency.task)(function* () {
            yield this._makeRequest(this._lastRequestUrl);
        }).group('_loadingTasks'),

        _search: (0, _emberConcurrency.task)(function* (term) {
            yield (0, _emberConcurrency.timeout)(DEBOUNCE_MS);

            let url = `${API_URL}/search/photos?query=${term}&per_page=30`;
            yield this._makeRequest(url);
        }).restartable(),

        _addPhotosFromResponse(response) {
            let photos = response.results || response;

            photos.forEach(photo => this._addPhoto(photo));
        },

        _addPhoto(photo) {
            // pre-calculate ratio for later use
            photo.ratio = photo.height / photo.width;

            // add to general photo list
            this.get('photos').pushObject(photo);

            // add to least populated column
            this._addPhotoToColumns(photo);
        },

        _addPhotoToColumns(photo) {
            let min = Math.min(...this._columnHeights);
            let columnIndex = this._columnHeights.indexOf(min);

            // use a fixed width when calculating height to compensate for different
            // overall image sizes
            this._columnHeights[columnIndex] += 300 * photo.ratio;
            this.get('columns')[columnIndex].pushObject(photo);
        },

        _reset() {
            this.set('photos', []);
            this._pagination = {};
            this._resetColumns();
        },

        _resetColumns() {
            let columns = [];
            let columnHeights = [];

            // pre-fill column arrays based on columnCount
            for (let i = 0; i < this.get('columnCount'); i += 1) {
                columns[i] = [];
                columnHeights[i] = 0;
            }

            this.set('columns', columns);
            this._columnHeights = columnHeights;

            if (!Ember.isEmpty(this.get('photos'))) {
                this.get('photos').forEach(photo => {
                    this._addPhotoToColumns(photo);
                });
            }
        },

        _makeRequest(url, _options = {}) {
            let defaultOptions = { ignoreErrors: false };
            let headers = {};
            let options = {};

            Ember.assign(options, defaultOptions, _options);

            // clear any previous error
            this.set('error', '');

            // store the url so it can be retried if needed
            this._lastRequestUrl = url;

            headers.Authorization = `Client-ID ${this.get('applicationId')}`;
            headers['Accept-Version'] = API_VERSION;
            headers['App-Pragma'] = 'no-cache';
            headers['X-Unsplash-Cache'] = true;

            return (0, _fetch.default)(url, { headers }).then(response => this._checkStatus(response)).then(response => this._extractPagination(response)).then(response => response.json()).then(response => this._addPhotosFromResponse(response)).catch(() => {
                // if the error text isn't already set then we've get a connection error from `fetch`
                if (!options.ignoreErrors && !this.get('error')) {
                    this.set('error', 'Uh-oh! Trouble reaching the Unsplash API, please check your connection');
                }
            });
        },

        _checkStatus(response) {
            // successful request
            if (response.status >= 200 && response.status < 300) {
                return Ember.RSVP.resolve(response);
            }

            let errorText = '';
            let responseTextPromise = Ember.RSVP.resolve();

            if (response.headers.map['content-type'] === 'application/json') {
                responseTextPromise = response.json().then(json => json.errors[0]);
            } else if (response.headers.map['content-type'] === 'text/xml') {
                responseTextPromise = response.text();
            }

            return responseTextPromise.then(responseText => {
                if (response.status === 403 && response.headers.map['x-ratelimit-remaining'] === '0') {
                    // we've hit the ratelimit on the API
                    errorText = 'Unsplash API rate limit reached, please try again later.';
                }

                errorText = errorText || responseText || `Error ${response.status}: Uh-oh! Trouble reaching the Unsplash API`;

                // set error text for display in UI
                this.set('error', errorText);

                // throw error to prevent further processing
                let error = new Error(errorText);
                error.response = response;
                throw error;
            });
        },

        _extractPagination(response) {
            let pagination = {};
            let linkRegex = new RegExp('<(.*)>; rel="(.*)"');
            let link = response.headers.map.link;


            if (link) {
                link.split(',').forEach(link => {
                    var _linkRegex$exec = linkRegex.exec(link),
                        _linkRegex$exec2 = _slicedToArray(_linkRegex$exec, 3);

                    let url = _linkRegex$exec2[1],
                        rel = _linkRegex$exec2[2];


                    pagination[rel] = url;
                });
            }

            this._pagination = pagination;

            return response;
        }
    });
});
define('ghost-admin/services/upgrade-status', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Service.extend({
        notifications: Ember.inject.service(),

        isRequired: false,
        message: '',

        // called when notifications are fetched during app boot for notifications
        // where the `location` is not 'top' and `custom` is false
        handleUpgradeNotification(notification) {
            let message = Ember.get(notification, 'message');
            Ember.set(this, 'message', Ember.String.htmlSafe(message));
        },

        // called when a MaintenanceError is encountered
        maintenanceAlert() {
            Ember.get(this, 'notifications').showAlert('Sorry, Ghost is currently undergoing maintenance, please wait a moment then try again.', { type: 'error', key: 'api-error.under-maintenance' });
        },

        // called when a VersionMismatchError is encountered
        requireUpgrade() {
            Ember.set(this, 'isRequired', true);
            Ember.get(this, 'notifications').showAlert('Ghost has been upgraded, please copy any unsaved data and refresh the page to continue.', { type: 'error', key: 'api-error.upgrade-required' });
        }
    });
});
define('ghost-admin/services/user-agent', ['exports', 'ember-useragent/services/user-agent'], function (exports, _userAgent) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _userAgent.default;
    }
  });
});
define('ghost-admin/session-stores/application', ['exports', 'ember-simple-auth/session-stores/adaptive', 'ghost-admin/utils/ghost-paths'], function (exports, _adaptive, _ghostPaths) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    const paths = (0, _ghostPaths.default)();
    const keyName = `ghost${paths.subdir.indexOf('/') === 0 ? `-${paths.subdir.substr(1)}` : ''}:session`;

    exports.default = _adaptive.default.extend({
        localStorageKey: keyName,
        cookieName: keyName
    });
});
define("ghost-admin/templates/-contributors", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "YkLiJIke", "block": "{\"symbols\":[],\"statements\":[[6,\"article\"],[8],[0,\"\\n    \"],[6,\"a\"],[10,\"href\",\"https://github.com/JohnONolan\"],[10,\"title\",\"JohnONolan\"],[8],[0,\"\\n        \"],[6,\"img\"],[10,\"src\",\"assets/img/contributors/JohnONolan.jpeg\"],[10,\"alt\",\"JohnONolan\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"article\"],[8],[0,\"\\n    \"],[6,\"a\"],[10,\"href\",\"https://github.com/ErisDS\"],[10,\"title\",\"ErisDS\"],[8],[0,\"\\n        \"],[6,\"img\"],[10,\"src\",\"assets/img/contributors/ErisDS.jpeg\"],[10,\"alt\",\"ErisDS\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"article\"],[8],[0,\"\\n    \"],[6,\"a\"],[10,\"href\",\"https://github.com/sebgie\"],[10,\"title\",\"sebgie\"],[8],[0,\"\\n        \"],[6,\"img\"],[10,\"src\",\"assets/img/contributors/sebgie.png\"],[10,\"alt\",\"sebgie\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"article\"],[8],[0,\"\\n    \"],[6,\"a\"],[10,\"href\",\"https://github.com/frantzypants\"],[10,\"title\",\"frantzypants\"],[8],[0,\"\\n        \"],[6,\"img\"],[10,\"src\",\"assets/img/contributors/frantzypants.jpeg\"],[10,\"alt\",\"frantzypants\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"article\"],[8],[0,\"\\n    \"],[6,\"a\"],[10,\"href\",\"https://github.com/cobbspur\"],[10,\"title\",\"cobbspur\"],[8],[0,\"\\n        \"],[6,\"img\"],[10,\"src\",\"assets/img/contributors/cobbspur.jpeg\"],[10,\"alt\",\"cobbspur\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"article\"],[8],[0,\"\\n    \"],[6,\"a\"],[10,\"href\",\"https://github.com/kevinansfield\"],[10,\"title\",\"kevinansfield\"],[8],[0,\"\\n        \"],[6,\"img\"],[10,\"src\",\"assets/img/contributors/kevinansfield.jpeg\"],[10,\"alt\",\"kevinansfield\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"article\"],[8],[0,\"\\n    \"],[6,\"a\"],[10,\"href\",\"https://github.com/GeorginaLusby\"],[10,\"title\",\"GeorginaLusby\"],[8],[0,\"\\n        \"],[6,\"img\"],[10,\"src\",\"assets/img/contributors/GeorginaLusby.jpeg\"],[10,\"alt\",\"GeorginaLusby\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"article\"],[8],[0,\"\\n    \"],[6,\"a\"],[10,\"href\",\"https://github.com/AileenCGN\"],[10,\"title\",\"AileenCGN\"],[8],[0,\"\\n        \"],[6,\"img\"],[10,\"src\",\"assets/img/contributors/AileenCGN.jpeg\"],[10,\"alt\",\"AileenCGN\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"article\"],[8],[0,\"\\n    \"],[6,\"a\"],[10,\"href\",\"https://github.com/kirrg001\"],[10,\"title\",\"kirrg001\"],[8],[0,\"\\n        \"],[6,\"img\"],[10,\"src\",\"assets/img/contributors/kirrg001.jpeg\"],[10,\"alt\",\"kirrg001\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"article\"],[8],[0,\"\\n    \"],[6,\"a\"],[10,\"href\",\"https://github.com/disordinary\"],[10,\"title\",\"disordinary\"],[8],[0,\"\\n        \"],[6,\"img\"],[10,\"src\",\"assets/img/contributors/disordinary.jpeg\"],[10,\"alt\",\"disordinary\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"article\"],[8],[0,\"\\n    \"],[6,\"a\"],[10,\"href\",\"https://github.com/acburdine\"],[10,\"title\",\"acburdine\"],[8],[0,\"\\n        \"],[6,\"img\"],[10,\"src\",\"assets/img/contributors/acburdine.jpeg\"],[10,\"alt\",\"acburdine\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"article\"],[8],[0,\"\\n    \"],[6,\"a\"],[10,\"href\",\"https://github.com/dbalders\"],[10,\"title\",\"dbalders\"],[8],[0,\"\\n        \"],[6,\"img\"],[10,\"src\",\"assets/img/contributors/dbalders.jpeg\"],[10,\"alt\",\"dbalders\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"article\"],[8],[0,\"\\n    \"],[6,\"a\"],[10,\"href\",\"https://github.com/felixrieseberg\"],[10,\"title\",\"felixrieseberg\"],[8],[0,\"\\n        \"],[6,\"img\"],[10,\"src\",\"assets/img/contributors/felixrieseberg.jpeg\"],[10,\"alt\",\"felixrieseberg\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"article\"],[8],[0,\"\\n    \"],[6,\"a\"],[10,\"href\",\"https://github.com/jaswilli\"],[10,\"title\",\"jaswilli\"],[8],[0,\"\\n        \"],[6,\"img\"],[10,\"src\",\"assets/img/contributors/jaswilli.jpeg\"],[10,\"alt\",\"jaswilli\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"article\"],[8],[0,\"\\n    \"],[6,\"a\"],[10,\"href\",\"https://github.com/halfdan\"],[10,\"title\",\"halfdan\"],[8],[0,\"\\n        \"],[6,\"img\"],[10,\"src\",\"assets/img/contributors/halfdan.jpeg\"],[10,\"alt\",\"halfdan\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"article\"],[8],[0,\"\\n    \"],[6,\"a\"],[10,\"href\",\"https://github.com/kevinkucharczyk\"],[10,\"title\",\"kevinkucharczyk\"],[8],[0,\"\\n        \"],[6,\"img\"],[10,\"src\",\"assets/img/contributors/kevinkucharczyk.jpeg\"],[10,\"alt\",\"kevinkucharczyk\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"article\"],[8],[0,\"\\n    \"],[6,\"a\"],[10,\"href\",\"https://github.com/mixonic\"],[10,\"title\",\"mixonic\"],[8],[0,\"\\n        \"],[6,\"img\"],[10,\"src\",\"assets/img/contributors/mixonic.png\"],[10,\"alt\",\"mixonic\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"article\"],[8],[0,\"\\n    \"],[6,\"a\"],[10,\"href\",\"https://github.com/rwjblue\"],[10,\"title\",\"rwjblue\"],[8],[0,\"\\n        \"],[6,\"img\"],[10,\"src\",\"assets/img/contributors/rwjblue.jpeg\"],[10,\"alt\",\"rwjblue\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"article\"],[8],[0,\"\\n    \"],[6,\"a\"],[10,\"href\",\"https://github.com/tgriesser\"],[10,\"title\",\"tgriesser\"],[8],[0,\"\\n        \"],[6,\"img\"],[10,\"src\",\"assets/img/contributors/tgriesser.png\"],[10,\"alt\",\"tgriesser\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"article\"],[8],[0,\"\\n    \"],[6,\"a\"],[10,\"href\",\"https://github.com/bnookala\"],[10,\"title\",\"bnookala\"],[8],[0,\"\\n        \"],[6,\"img\"],[10,\"src\",\"assets/img/contributors/bnookala.jpeg\"],[10,\"alt\",\"bnookala\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/-contributors.hbs" } });
});
define("ghost-admin/templates/about", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "JaxHDDkT", "block": "{\"symbols\":[],\"statements\":[[6,\"section\"],[10,\"class\",\"gh-canvas js-settings-content\"],[8],[0,\"\\n    \"],[6,\"header\"],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[1,[26,\"svg-jar\",[\"ghost-logo\"],[[\"class\",\"alt\"],[\"gh-logo\",\"Ghost\"]]],false],[0,\"\\n    \"],[9],[0,\"\\n    \"],[6,\"section\"],[10,\"class\",\"view-container\"],[8],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"gh-env-details\"],[8],[0,\"\\n            \"],[6,\"ul\"],[10,\"class\",\"gh-env-list\"],[8],[0,\"\\n                \"],[6,\"li\"],[10,\"class\",\"gh-env-list-version\"],[8],[6,\"strong\"],[8],[0,\"Version\"],[9],[0,\" \"],[1,[22,[\"about\",\"version\"]],false],[9],[0,\"\\n                \"],[6,\"li\"],[8],[6,\"strong\"],[8],[0,\"Environment\"],[9],[0,\" \"],[1,[22,[\"about\",\"environment\"]],false],[9],[0,\"\\n                \"],[6,\"li\"],[10,\"class\",\"gh-env-list-database-type\"],[8],[6,\"strong\"],[8],[0,\"Database\"],[9],[0,\" \"],[1,[22,[\"about\",\"database\"]],false],[9],[0,\"\\n                \"],[6,\"li\"],[8],[6,\"strong\"],[8],[0,\"Mail\"],[9],[0,\" \"],[4,\"if\",[[22,[\"about\",\"mail\"]]],null,{\"statements\":[[1,[22,[\"about\",\"mail\"]],false]],\"parameters\":[]},{\"statements\":[[0,\"Native\"]],\"parameters\":[]}],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-env-help\"],[8],[0,\"\\n                \"],[6,\"a\"],[10,\"class\",\"gh-btn\"],[10,\"href\",\"https://help.ghost.org\"],[10,\"target\",\"_blank\"],[8],[6,\"span\"],[8],[0,\"User Documentation\"],[9],[9],[0,\"\\n                \"],[6,\"a\"],[10,\"class\",\"gh-btn\"],[10,\"href\",\"https://forum.ghost.org/\"],[10,\"target\",\"_blank\"],[8],[6,\"span\"],[8],[0,\"Get Help With Ghost\"],[9],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"upgradeStatus\",\"message\"]]],null,{\"statements\":[[0,\"            \"],[6,\"section\"],[10,\"class\",\"gh-upgrade-notification\"],[8],[0,\"\\n                \"],[6,\"p\"],[8],[0,\"\\n                    \"],[6,\"strong\"],[8],[0,\"Update available!\"],[9],[0,\" \"],[1,[22,[\"upgradeStatus\",\"message\"]],false],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"gh-credits\"],[8],[0,\"\\n            \"],[6,\"h2\"],[8],[0,\"The People Who Made it Possible\"],[9],[0,\"\\n\\n            \"],[6,\"section\"],[10,\"class\",\"gh-contributors\"],[8],[0,\"\\n                \"],[14,\"contributors\",[]],[0,\"\\n            \"],[9],[0,\"\\n\\n            \"],[6,\"p\"],[8],[0,\"Ghost is built by an incredible group of contributors from all over the world. Here are just a few of the people who helped create the version you’re using right now.\"],[9],[0,\"\\n\\n            \"],[6,\"a\"],[10,\"class\",\"gh-btn gh-btn-blue\"],[10,\"href\",\"https://ghost.org/developers/\"],[10,\"target\",\"_blank\"],[8],[6,\"span\"],[8],[0,\"Find out how you can get involved\"],[9],[9],[0,\"\\n\\n        \"],[9],[0,\"\\n\\n        \"],[6,\"footer\"],[10,\"class\",\"gh-copyright-info\"],[8],[0,\"\\n            Copyright © 2013 – \"],[1,[20,\"copyrightYear\"],false],[0,\" Ghost Foundation, released under the \"],[6,\"a\"],[10,\"href\",\"https://github.com/TryGhost/Ghost/blob/master/LICENSE\"],[10,\"target\",\"_blank\"],[8],[0,\"MIT license\"],[9],[0,\".\\n            \"],[6,\"br\"],[8],[9],[0,\"\\n            \"],[6,\"a\"],[10,\"href\",\"https://ghost.org/\"],[10,\"target\",\"_blank\"],[8],[0,\"Ghost\"],[9],[0,\" is a registered trademark of \"],[6,\"a\"],[10,\"href\",\"https://ghost.org/trademark/\"],[10,\"target\",\"_blank\"],[8],[0,\"Ghost Foundation Ltd\"],[9],[0,\".\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":true}", "meta": { "moduleName": "ghost-admin/templates/about.hbs" } });
});
define("ghost-admin/templates/application-error", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "vzlQfVxg", "block": "{\"symbols\":[],\"statements\":[[6,\"div\"],[10,\"class\",\"gh-view\"],[8],[0,\"\\n    \"],[6,\"section\"],[10,\"class\",\"error-content error-404 js-error-container\"],[8],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"error-details\"],[8],[0,\"\\n            \"],[6,\"img\"],[10,\"class\",\"error-ghost\"],[10,\"src\",\"assets/img/404-ghost@2x.png\"],[10,\"srcset\",\"assets/img/404-ghost.png 1x, assets/img/404-ghost@2x.png 2x\"],[8],[9],[0,\"\\n            \"],[6,\"section\"],[10,\"class\",\"error-message\"],[8],[0,\"\\n                \"],[6,\"h1\"],[10,\"class\",\"error-code\"],[8],[1,[22,[\"model\",\"code\"]],false],[9],[0,\"\\n                \"],[6,\"h2\"],[10,\"class\",\"error-description\"],[8],[0,\"\\n                    \"],[1,[26,\"or\",[[22,[\"model\",\"payload\",\"errors\",\"firstObject\",\"message\"]],[22,[\"model\",\"message\"]]],null],false],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[1,[20,\"ember-load-remover\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/application-error.hbs" } });
});
define("ghost-admin/templates/application", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "SIJcQ8P9", "block": "{\"symbols\":[],\"statements\":[[4,\"gh-app\",null,[[\"showSettingsMenu\"],[[22,[\"ui\",\"showSettingsMenu\"]]]],{\"statements\":[[0,\"    \"],[4,\"gh-skip-link\",null,[[\"anchor\"],[\".gh-main\"]],{\"statements\":[[0,\"Skip to main content\"]],\"parameters\":[]},null],[0,\"\\n\\n    \"],[1,[20,\"gh-alerts\"],false],[0,\"\\n\\n    \"],[6,\"div\"],[11,\"class\",[27,[\"gh-viewport \",[26,\"if\",[[22,[\"ui\",\"autoNav\"]],\"gh-autonav\"],null],\" \",[26,\"if\",[[22,[\"ui\",\"showSettingsMenu\"]],\"settings-menu-expanded\"],null],\" \",[26,\"if\",[[22,[\"ui\",\"showMobileMenu\"]],\"mobile-menu-expanded\"],null]]]],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"showNavMenu\"]]],null,{\"statements\":[[0,\"            \"],[1,[26,\"gh-nav-menu\",null,[[\"open\",\"icon\"],[[22,[\"ui\",\"autoNavOpen\"]],[22,[\"settings\",\"settledIcon\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-main\",null,[[\"onMouseEnter\"],[[26,\"action\",[[21,0,[]],\"closeAutoNav\"],[[\"target\"],[[22,[\"ui\"]]]]]]],{\"statements\":[[0,\"            \"],[1,[20,\"outlet\"],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\\n        \"],[1,[20,\"gh-notifications\"],false],[0,\"\\n\\n        \"],[1,[20,\"gh-content-cover\"],false],[0,\"\\n\\n        \"],[1,[20,\"gh-mobile-nav-bar\"],false],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[1,[20,\"ember-load-remover\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/application.hbs" } });
});
define("ghost-admin/templates/components/draggable-object-target", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "nnNooQqd", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[22,[\"enableClicking\"]]],null,{\"statements\":[[0,\"  \"],[6,\"a\"],[10,\"href\",\"#\"],[3,\"action\",[[21,0,[]],\"acceptForDrop\"]],[8],[0,\"\\n    \"],[13,1],[0,\"\\n  \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"  \"],[13,1],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/draggable-object-target.hbs" } });
});
define("ghost-admin/templates/components/draggable-object", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "1MsVtKe2", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[22,[\"enableClicking\"]]],null,{\"statements\":[[0,\"  \"],[6,\"a\"],[10,\"href\",\"#\"],[3,\"action\",[[21,0,[]],\"selectForDrag\"]],[8],[0,\"\\n    \"],[13,1],[0,\"\\n  \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"  \"],[13,1],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/draggable-object.hbs" } });
});
define("ghost-admin/templates/components/gh-activating-list-item", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "JDJ/l2Eg", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"link-to\",[[22,[\"route\"]]],[[\"alternateActive\",\"class\"],[[26,\"action\",[[21,0,[]],\"setActive\"],null],[26,\"concat\",[[26,\"if\",[[22,[\"linkClasses\"]],[26,\"-normalize-class\",[\"linkClasses\",[22,[\"linkClasses\"]]],null]],null],\" \"],null]]],{\"statements\":[[1,[20,\"title\"],false],[13,1]],\"parameters\":[]},null],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-activating-list-item.hbs" } });
});
define("ghost-admin/templates/components/gh-alert", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "EUIQV3uL", "block": "{\"symbols\":[],\"statements\":[[6,\"div\"],[10,\"class\",\"gh-alert-content\"],[8],[0,\"\\n    \"],[1,[22,[\"message\",\"message\"]],false],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"button\"],[10,\"class\",\"gh-alert-close\"],[3,\"action\",[[21,0,[]],\"closeNotification\"]],[8],[1,[26,\"svg-jar\",[\"close\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-alert.hbs" } });
});
define("ghost-admin/templates/components/gh-alerts", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "hCmVLViN", "block": "{\"symbols\":[\"message\"],\"statements\":[[4,\"each\",[[22,[\"messages\"]]],null,{\"statements\":[[0,\"    \"],[1,[26,\"gh-alert\",null,[[\"message\"],[[21,1,[]]]]],false],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-alerts.hbs" } });
});
define("ghost-admin/templates/components/gh-app", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "3b1dmrth", "block": "{\"symbols\":[\"&default\"],\"statements\":[[13,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-app.hbs" } });
});
define("ghost-admin/templates/components/gh-blog-url", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "+wviAk6X", "block": "{\"symbols\":[],\"statements\":[[1,[22,[\"config\",\"blogUrl\"]],true]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-blog-url.hbs" } });
});
define("ghost-admin/templates/components/gh-cm-editor", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "4omwU6i9", "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[22,[\"isInitializingCodemirror\"]]],null,{\"statements\":[[0,\"    \"],[1,[26,\"gh-textarea\",null,[[\"class\",\"value\",\"input\"],[\"gh-cm-editor-textarea\",[26,\"readonly\",[[22,[\"_value\"]]],null],[26,\"action\",[[21,0,[]],\"updateFromTextarea\"],[[\"value\"],[\"target.value\"]]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-cm-editor.hbs" } });
});
define("ghost-admin/templates/components/gh-date-time-picker", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "qk4+cCDR", "block": "{\"symbols\":[\"dp\"],\"statements\":[[6,\"div\"],[10,\"class\",\"gh-date-time-picker\"],[8],[0,\"\\n\"],[4,\"power-datepicker\",null,[[\"selected\",\"center\",\"onSelect\",\"renderInPlace\",\"disabled\"],[[22,[\"_date\"]],[22,[\"_date\"]],[26,\"action\",[[21,0,[]],\"setDate\"],[[\"value\"],[\"date\"]]],true,[22,[\"disabled\"]]]],{\"statements\":[[4,\"component\",[[21,1,[\"trigger\"]]],[[\"tabindex\",\"data-test-date-time-picker-datepicker\"],[\"-1\",true]],{\"statements\":[[0,\"            \"],[6,\"div\"],[11,\"class\",[27,[\"gh-date-time-picker-date \",[26,\"if\",[[22,[\"dateError\"]],\"error\"],null]]]],[8],[0,\"\\n                \"],[6,\"input\"],[10,\"readonly\",\"\"],[11,\"value\",[26,\"moment-format\",[[22,[\"_date\"]],\"MM/DD/YYYY\"],null],null],[11,\"disabled\",[20,\"disabled\"],null],[10,\"data-test-date-time-picker-date-input\",\"\"],[10,\"type\",\"text\"],[8],[9],[0,\"\\n                \"],[1,[26,\"svg-jar\",[\"calendar\"],null],false],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"component\",[[21,1,[\"content\"]]],[[\"class\"],[\"dropdown-menu\"]],{\"statements\":[[0,\"            \"],[1,[21,1,[\"nav\"]],false],[0,\"\\n            \"],[1,[26,\"component\",[[21,1,[\"days\"]]],[[\"minDate\",\"maxDate\",\"weekdayFormat\"],[[22,[\"_minDate\"]],[22,[\"_maxDate\"]],\"min\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[1]},null],[0,\"\\n    \"],[6,\"div\"],[11,\"class\",[27,[\"gh-date-time-picker-time \",[26,\"if\",[[22,[\"hasError\"]],\"error\"],null]]]],[8],[0,\"\\n        \"],[6,\"input\"],[11,\"value\",[20,\"_time\"],null],[11,\"disabled\",[20,\"disabled\"],null],[11,\"oninput\",[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"_time\"]]],null]],[[\"value\"],[\"target.value\"]]],null],[11,\"onblur\",[26,\"action\",[[21,0,[]],\"setTime\",[22,[\"_time\"]]],null],null],[10,\"data-test-date-time-picker-time-input\",\"\"],[10,\"type\",\"text\"],[8],[9],[0,\"\\n        \"],[6,\"small\"],[10,\"class\",\"gh-date-time-picker-timezone\"],[8],[0,\"(\"],[1,[20,\"timezone\"],false],[0,\")\"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[4,\"if\",[[22,[\"hasError\"]]],null,{\"statements\":[[0,\"    \"],[6,\"div\"],[10,\"class\",\"gh-date-time-picker-error\"],[10,\"data-test-date-time-picker-error\",\"\"],[8],[1,[20,\"dateError\"],false],[1,[20,\"timeError\"],false],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-date-time-picker.hbs" } });
});
define("ghost-admin/templates/components/gh-download-count", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "ea5/3YPT", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[23,1]],null,{\"statements\":[[0,\"    \"],[13,1,[[22,[\"count\"]]]],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[1,[20,\"count\"],false],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-download-count.hbs" } });
});
define("ghost-admin/templates/components/gh-editor-post-status", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "DwWs/fhk", "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[22,[\"_isSaving\"]]],null,{\"statements\":[[0,\"    Saving...\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[22,[\"isPublished\"]]],null,{\"statements\":[[0,\"    Published\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[22,[\"isScheduled\"]]],null,{\"statements\":[[0,\"    Scheduled\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[22,[\"isNew\"]]],null,{\"statements\":[[0,\"    New\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    Draft\\n\"]],\"parameters\":[]}]],\"parameters\":[]}]],\"parameters\":[]}]],\"parameters\":[]}]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-editor-post-status.hbs" } });
});
define("ghost-admin/templates/components/gh-editor", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "epZ3tRPW", "block": "{\"symbols\":[\"&default\"],\"statements\":[[13,1,[[26,\"hash\",null,[[\"headerClass\",\"headerHeight\",\"isDraggedOver\",\"isFullScreen\",\"droppedFiles\",\"uploadedImageUrls\",\"imageMimeTypes\",\"imageExtensions\",\"toggleFullScreen\",\"togglePreview\",\"toggleSplitScreen\",\"uploadComplete\",\"uploadCancelled\",\"uploadImages\"],[[22,[\"headerClass\"]],[22,[\"headerHeight\"]],[22,[\"isDraggedOver\"]],[22,[\"isFullScreen\"]],[22,[\"droppedFiles\"]],[22,[\"uploadedImageUrls\"]],[22,[\"imageMimeTypes\"]],[22,[\"imageExtensions\"]],[26,\"action\",[[21,0,[]],\"toggleFullScreen\"],null],[26,\"action\",[[21,0,[]],\"togglePreview\"],null],[26,\"action\",[[21,0,[]],\"toggleSplitScreen\"],null],[26,\"action\",[[21,0,[]],\"uploadComplete\"],null],[26,\"action\",[[21,0,[]],\"uploadCancelled\"],null],[26,\"action\",[[21,0,[]],\"uploadImages\"],null]]]]]],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-editor.hbs" } });
});
define("ghost-admin/templates/components/gh-error-message", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "ALeQvNH1", "block": "{\"symbols\":[],\"statements\":[[1,[20,\"message\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-error-message.hbs" } });
});
define("ghost-admin/templates/components/gh-feature-flag", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "R/LUMyet", "block": "{\"symbols\":[\"&default\"],\"statements\":[[6,\"input\"],[11,\"checked\",[20,\"value\"],null],[11,\"id\",[20,\"for\"],null],[11,\"name\",[20,\"name\"],null],[11,\"onclick\",[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"value\"]]],null]],[[\"value\"],[\"target.checked\"]]],null],[10,\"type\",\"checkbox\"],[8],[9],[0,\"\\n\"],[6,\"span\"],[10,\"class\",\"input-toggle-component\"],[8],[9],[0,\"\\n\"],[13,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-feature-flag.hbs" } });
});
define("ghost-admin/templates/components/gh-file-upload", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "HNw3YfEG", "block": "{\"symbols\":[],\"statements\":[[6,\"input\"],[10,\"class\",\"gh-input gh-input-file q\"],[10,\"data-url\",\"upload\"],[10,\"name\",\"importfile\"],[11,\"accept\",[27,[[20,\"acceptEncoding\"]]]],[10,\"type\",\"file\"],[8],[9],[0,\"\\n\"],[6,\"button\"],[10,\"id\",\"startupload\"],[10,\"class\",\"gh-btn gh-btn-hover-blue\"],[11,\"disabled\",[20,\"uploadButtonDisabled\"],null],[10,\"type\",\"submit\"],[3,\"action\",[[21,0,[]],\"upload\"]],[8],[0,\"\\n    \"],[6,\"span\"],[8],[1,[20,\"uploadButtonText\"],false],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-file-upload.hbs" } });
});
define("ghost-admin/templates/components/gh-file-uploader", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "sb2aBGCi", "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[22,[\"file\"]]],null,{\"statements\":[[4,\"if\",[[22,[\"failureMessage\"]]],null,{\"statements\":[[0,\"        \"],[6,\"div\"],[10,\"class\",\"failed\"],[8],[1,[20,\"failureMessage\"],false],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[6,\"div\"],[10,\"class\",\"progress-container\"],[8],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"progress\"],[8],[0,\"\\n            \"],[6,\"div\"],[11,\"class\",[27,[\"bar \",[26,\"if\",[[22,[\"failureMessage\"]],\"fail\"],null]]]],[11,\"style\",[20,\"progressStyle\"],null],[8],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[4,\"if\",[[22,[\"failureMessage\"]]],null,{\"statements\":[[0,\"        \"],[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-green\"],[10,\"data-test-upload-try-again-button\",\"\"],[3,\"action\",[[21,0,[]],\"reset\"]],[8],[6,\"span\"],[8],[0,\"Try Again\"],[9],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[6,\"div\"],[10,\"class\",\"upload-form\"],[8],[0,\"\\n\"],[4,\"gh-file-input\",null,[[\"multiple\",\"alt\",\"action\",\"accept\"],[false,[22,[\"labelText\"]],[26,\"action\",[[21,0,[]],\"fileSelected\"],null],[22,[\"accept\"]]]],{\"statements\":[[0,\"            \"],[6,\"div\"],[10,\"class\",\"description\"],[8],[1,[20,\"labelText\"],false],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[9],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-file-uploader.hbs" } });
});
define("ghost-admin/templates/components/gh-fullscreen-modal", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "5QdCx+fe", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"liquid-wormhole\",null,[[\"class\"],[\"fullscreen-modal-container\"]],{\"statements\":[[0,\"    \"],[6,\"div\"],[10,\"class\",\"fullscreen-modal-background\"],[3,\"action\",[[21,0,[]],\"clickOverlay\"]],[8],[9],[0,\"\\n    \"],[6,\"div\"],[11,\"class\",[20,\"modalClasses\"],null],[8],[0,\"\\n\"],[4,\"if\",[[23,1]],null,{\"statements\":[[0,\"          \"],[13,1],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"          \"],[1,[26,\"component\",[[22,[\"modalPath\"]]],[[\"model\",\"confirm\",\"closeModal\"],[[22,[\"model\"]],[26,\"action\",[[21,0,[]],\"confirm\"],null],[26,\"action\",[[21,0,[]],\"close\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[]}],[0,\"    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-fullscreen-modal.hbs" } });
});
define("ghost-admin/templates/components/gh-image-uploader-with-preview", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "nOmSa05I", "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[22,[\"image\"]]],null,{\"statements\":[[0,\"    \"],[6,\"div\"],[10,\"class\",\"gh-image-uploader -with-image\"],[8],[0,\"\\n        \"],[6,\"div\"],[8],[6,\"img\"],[11,\"src\",[20,\"image\"],null],[8],[9],[9],[0,\"\\n        \"],[6,\"a\"],[10,\"class\",\"image-cancel\"],[10,\"title\",\"Delete\"],[3,\"action\",[[21,0,[]],\"remove\"]],[8],[0,\"\\n            \"],[1,[26,\"svg-jar\",[\"trash\"],null],false],[0,\"\\n            \"],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Delete\"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[1,[26,\"gh-image-uploader\",null,[[\"text\",\"altText\",\"allowUnsplash\",\"update\",\"uploadStarted\",\"uploadFinished\"],[[22,[\"text\"]],[22,[\"altText\"]],[22,[\"allowUnsplash\"]],[26,\"action\",[[21,0,[]],\"update\"],null],[26,\"action\",[[21,0,[]],\"uploadStarted\"],null],[26,\"action\",[[21,0,[]],\"uploadFinished\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-image-uploader-with-preview.hbs" } });
});
define("ghost-admin/templates/components/gh-image-uploader", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "EQhwpdc8", "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[22,[\"file\"]]],null,{\"statements\":[[4,\"if\",[[22,[\"failureMessage\"]]],null,{\"statements\":[[0,\"        \"],[6,\"div\"],[10,\"class\",\"failed\"],[8],[1,[20,\"failureMessage\"],false],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[6,\"div\"],[10,\"class\",\"progress-container\"],[8],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"progress\"],[8],[0,\"\\n            \"],[6,\"div\"],[11,\"class\",[27,[\"bar \",[26,\"if\",[[22,[\"failureMessage\"]],\"fail\"],null]]]],[11,\"style\",[20,\"progressStyle\"],null],[8],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[4,\"if\",[[22,[\"failureMessage\"]]],null,{\"statements\":[[0,\"        \"],[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-green\"],[3,\"action\",[[21,0,[]],\"reset\"]],[8],[6,\"span\"],[8],[0,\"Try Again\"],[9],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[6,\"div\"],[10,\"class\",\"upload-form\"],[8],[0,\"\\n\"],[4,\"gh-file-input\",null,[[\"multiple\",\"alt\",\"action\",\"accept\"],[false,[22,[\"description\"]],[26,\"action\",[[21,0,[]],\"fileSelected\"],null],[22,[\"accept\"]]]],{\"statements\":[[0,\"            \"],[6,\"div\"],[10,\"class\",\"gh-btn gh-btn-outline\"],[10,\"data-test-file-input-description\",\"\"],[8],[6,\"span\"],[8],[1,[20,\"description\"],false],[9],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[26,\"and\",[[22,[\"allowUnsplash\"]],[22,[\"settings\",\"unsplash\",\"isActive\"]]],null]],null,{\"statements\":[[0,\"            \"],[6,\"div\"],[10,\"class\",\"gh-image-uploader-unsplash\"],[3,\"action\",[[21,0,[]],[26,\"toggle\",[\"_showUnsplash\",[21,0,[]]],null]]],[8],[0,\"\\n                \"],[1,[26,\"svg-jar\",[\"unsplash\"],null],false],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n\"],[4,\"if\",[[22,[\"_showUnsplash\"]]],null,{\"statements\":[[0,\"    \"],[1,[26,\"gh-unsplash\",null,[[\"select\",\"close\"],[[26,\"action\",[[21,0,[]],\"addUnsplashPhoto\"],null],[26,\"action\",[[21,0,[]],[26,\"toggle\",[\"_showUnsplash\",[21,0,[]]],null]],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-image-uploader.hbs" } });
});
define("ghost-admin/templates/components/gh-koenig-editor", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "eHY+dB8r", "block": "{\"symbols\":[],\"statements\":[[6,\"div\"],[10,\"class\",\"gh-koenig-editor-pane flex flex-column mih-100\"],[11,\"onmousedown\",[26,\"action\",[[21,0,[]],\"trackMousedown\"],null],null],[11,\"onmouseup\",[26,\"action\",[[21,0,[]],\"focusEditor\"],null],null],[8],[0,\"\\n    \"],[1,[26,\"gh-textarea\",null,[[\"class\",\"placeholder\",\"tabindex\",\"autoExpand\",\"value\",\"input\",\"focus-out\",\"keyDown\",\"didCreateTextarea\",\"data-test-editor-title-input\"],[\"gh-editor-title\",[22,[\"titlePlaceholder\"]],\"1\",\".gh-koenig-editor\",[26,\"readonly\",[[22,[\"title\"]]],null],[26,\"action\",[[21,0,[]],\"onTitleChange\"],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"onTitleFocusOut\"],null],[26,\"action\",[[21,0,[]],\"onTitleKeydown\"],null],[26,\"action\",[[21,0,[]],\"onTitleCreated\"],null],true]]],false],[0,\"\\n\\n    \"],[1,[26,\"koenig-editor\",null,[[\"mobiledoc\",\"placeholder\",\"autofocus\",\"spellcheck\",\"onChange\",\"didCreateEditor\",\"cursorDidExitAtTop\",\"headerOffset\",\"dropTargetSelector\",\"scrollContainerSelector\",\"scrollOffsetTopSelector\",\"scrollOffsetBottomSelector\",\"wordCountDidChange\"],[[22,[\"body\"]],[22,[\"bodyPlaceholder\"]],[22,[\"bodyAutofocus\"]],true,[26,\"action\",[[21,0,[]],\"onBodyChange\"],null],[26,\"action\",[[21,0,[]],\"onEditorCreated\"],null],[26,\"action\",[[21,0,[]],\"focusTitle\"],null],[22,[\"headerOffset\"]],\".gh-koenig-editor-pane\",[22,[\"scrollContainerSelector\"]],[22,[\"scrollOffsetTopSelector\"]],[22,[\"scrollOffsetBottomSelector\"]],[26,\"action\",[[21,0,[]],[22,[\"onWordCountChange\"]]],null]]]],false],[0,\"\\n\"],[9]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-koenig-editor.hbs" } });
});
define("ghost-admin/templates/components/gh-loading-spinner", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "7R8iPQPn", "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[22,[\"showSpinner\"]]],null,{\"statements\":[[0,\"    \"],[6,\"div\"],[10,\"class\",\"gh-loading-content\"],[8],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-loading-spinner\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-loading-spinner.hbs" } });
});
define("ghost-admin/templates/components/gh-markdown-editor", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "9cc68R8H", "block": "{\"symbols\":[\"&default\"],\"statements\":[[13,1,[[26,\"hash\",null,[[\"editor\",\"isFullScreen\",\"isSplitScreen\",\"focus\"],[[26,\"component\",[\"gh-simplemde\"],[[\"value\",\"placeholder\",\"autofocus\",\"onChange\",\"onFocus\",\"onBlur\",\"onEditorInit\",\"onEditorDestroy\",\"options\"],[[22,[\"markdown\"]],[22,[\"placeholder\"]],[22,[\"autofocus\"]],[26,\"action\",[[21,0,[]],\"updateMarkdown\"],null],[26,\"action\",[[21,0,[]],\"updateFocusState\",true],null],[26,\"action\",[[21,0,[]],\"updateFocusState\",false],null],[26,\"action\",[[21,0,[]],\"setEditor\"],null],[26,\"action\",[[21,0,[]],\"destroyEditor\"],null],[22,[\"simpleMDEOptions\"]]]]],[22,[\"_isFullScreen\"]],[22,[\"_isSplitScreen\"]],[26,\"action\",[[21,0,[]],\"focusEditor\"],null]]]]]],[0,\"\\n\\n\"],[6,\"div\"],[10,\"style\",\"display:none\"],[8],[0,\"\\n    \"],[1,[26,\"gh-file-input\",null,[[\"multiple\",\"action\",\"accept\"],[true,[26,\"action\",[[21,0,[]],[22,[\"onImageFilesSelected\"]]],null],[22,[\"imageMimeTypes\"]]]]],false],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"_showUnsplash\"]]],null,{\"statements\":[[0,\"    \"],[1,[26,\"gh-unsplash\",null,[[\"select\",\"close\"],[[26,\"action\",[[21,0,[]],\"insertUnsplashPhoto\"],null],[26,\"action\",[[21,0,[]],\"toggleUnsplash\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[22,[\"showMarkdownHelp\"]]],null,{\"statements\":[[0,\"    \"],[1,[26,\"gh-fullscreen-modal\",[\"markdown-help\"],[[\"close\",\"modifier\"],[[26,\"action\",[[21,0,[]],\"toggleMarkdownHelp\"],null],\"wide\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-markdown-editor.hbs" } });
});
define("ghost-admin/templates/components/gh-menu-toggle", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "ZANJQx1D", "block": "{\"symbols\":[],\"statements\":[],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-menu-toggle.hbs" } });
});
define("ghost-admin/templates/components/gh-mobile-nav-bar", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Qc1hLey0", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"link-to\",[\"editor.new\"],[[\"classNames\"],[\"gh-nav-main-editor\"]],{\"statements\":[[1,[26,\"svg-jar\",[\"pen\"],null],false],[0,\"New story\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[26,\"eq\",[[22,[\"router\",\"currentRouteName\"]],\"posts.index\"],null]],null,{\"statements\":[[0,\"    \"],[4,\"link-to\",[\"posts\",[26,\"query-params\",null,[[\"type\"],[null]]]],[[\"classNames\"],[\"gh-nav-main-content active\"]],{\"statements\":[[1,[26,\"svg-jar\",[\"content\"],null],false],[0,\"Stories\"]],\"parameters\":[]},null],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[4,\"link-to\",[\"posts\"],[[\"classNames\"],[\"gh-nav-main-content\"]],{\"statements\":[[1,[26,\"svg-jar\",[\"content\"],null],false],[0,\"Content\"]],\"parameters\":[]},null],[0,\"\\n\"]],\"parameters\":[]}],[4,\"link-to\",[\"team\"],[[\"classNames\"],[\"gh-nav-main-users\"]],{\"statements\":[[1,[26,\"svg-jar\",[\"account-group\"],null],false],[0,\"Team\"]],\"parameters\":[]},null],[0,\"\\n\"],[6,\"div\"],[10,\"class\",\"gh-mobile-nav-bar-more\"],[3,\"action\",[[21,0,[]],\"openMobileMenu\"],[[\"target\"],[[22,[\"ui\"]]]]],[8],[1,[26,\"svg-jar\",[\"icon\"],[[\"class\"],[\"icon-gh\"]]],false],[0,\"More\"],[9],[0,\"\\n\"],[13,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-mobile-nav-bar.hbs" } });
});
define("ghost-admin/templates/components/gh-mobiledoc", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "y7X6c8oZ", "block": "{\"symbols\":[\"&default\"],\"statements\":[[13,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-mobiledoc.hbs" } });
});
define("ghost-admin/templates/components/gh-modal-dialog", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "rZ8Hhpi+", "block": "{\"symbols\":[\"&default\"],\"statements\":[[6,\"div\"],[10,\"class\",\"modal-container js-modal-container\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[0,\"\\n    \"],[6,\"article\"],[11,\"class\",[27,[[20,\"klass\"],\" js-modal\"]]],[8],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"modal-content\"],[3,\"action\",[[21,0,[]],\"noBubble\"],[[\"bubbles\",\"preventDefault\"],[false,false]]],[8],[0,\"\\n            \"],[4,\"if\",[[22,[\"title\"]]],null,{\"statements\":[[6,\"header\"],[10,\"class\",\"modal-header\"],[8],[6,\"h1\"],[8],[1,[20,\"title\"],false],[9],[9]],\"parameters\":[]},null],[0,\"\\n            \"],[4,\"if\",[[22,[\"showClose\"]]],null,{\"statements\":[[6,\"a\"],[10,\"class\",\"close\"],[10,\"href\",\"\"],[10,\"title\",\"Close\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[1,[26,\"svg-jar\",[\"close\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9]],\"parameters\":[]},null],[0,\"\\n            \"],[6,\"section\"],[10,\"class\",\"modal-body\"],[8],[0,\"\\n                \"],[13,1],[0,\"\\n            \"],[9],[0,\"\\n\"],[4,\"if\",[[22,[\"confirm\"]]],null,{\"statements\":[[0,\"            \"],[6,\"footer\"],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n\"],[0,\"                \"],[6,\"button\"],[11,\"class\",[27,[[20,\"rejectButtonClass\"],\" btn-minor\"]]],[10,\"data-test-modal-reject-button\",\"\"],[10,\"type\",\"button\"],[3,\"action\",[[21,0,[]],\"confirm\",\"reject\"]],[8],[1,[22,[\"confirm\",\"reject\",\"text\"]],false],[9],[6,\"button\"],[11,\"class\",[27,[[20,\"acceptButtonClass\"]]]],[10,\"data-test-modal-accept-button\",\"\"],[10,\"type\",\"button\"],[3,\"action\",[[21,0,[]],\"confirm\",\"accept\"]],[8],[1,[22,[\"confirm\",\"accept\",\"text\"]],false],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"div\"],[10,\"class\",\"modal-background js-modal-background\"],[8],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-modal-dialog.hbs" } });
});
define("ghost-admin/templates/components/gh-nav-menu", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "f7hFhtiO", "block": "{\"symbols\":[\"menuItem\",\"dropdown\",\"menuItem\"],\"statements\":[[1,[26,\"gh-menu-toggle\",null,[[\"desktopAction\",\"mobileAction\"],[[26,\"action\",[[21,0,[]],\"toggleAutoNav\"],[[\"target\"],[[22,[\"ui\"]]]]],[26,\"action\",[[21,0,[]],\"closeMobileMenu\"],[[\"target\"],[[22,[\"ui\"]]]]]]]],false],[0,\"\\n\"],[4,\"gh-basic-dropdown\",null,[[\"horizontalPosition\",\"calculatePosition\"],[\"right\",[22,[\"userDropdownPosition\"]]]],{\"statements\":[[4,\"component\",[[21,2,[\"trigger\"]]],[[\"tagName\",\"class\"],[\"header\",\"gh-nav-menu\"]],{\"statements\":[[0,\"        \"],[6,\"div\"],[10,\"class\",\"gh-nav-menu-icon\"],[11,\"style\",[20,\"iconStyle\"],null],[8],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-nav-menu-details\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-nav-menu-details-blog\"],[8],[1,[22,[\"config\",\"blogTitle\"]],false],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-nav-menu-details-user\"],[8],[1,[22,[\"session\",\"user\",\"name\"]],false],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[1,[26,\"svg-jar\",[\"arrow-down-small\"],null],false],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"component\",[[21,2,[\"content\"]]],[[\"class\"],[\"gh-nav-menu-dropdown\"]],{\"statements\":[[0,\"        \"],[6,\"ul\"],[10,\"class\",\"dropdown-menu dropdown-triangle-top\"],[10,\"role\",\"menu\"],[3,\"action\",[[21,0,[]],[21,2,[\"actions\",\"close\"]]],[[\"on\",\"preventDefault\"],[\"click\",false]]],[8],[0,\"\\n            \"],[6,\"li\"],[10,\"role\",\"presentation\"],[8],[4,\"link-to\",[\"about\"],[[\"classNames\",\"role\",\"tabindex\"],[\"gh-nav-menu-about dropdown-item js-nav-item\",\"menuitem\",\"-1\"]],{\"statements\":[[1,[26,\"svg-jar\",[\"store\"],null],false],[0,\" About Ghost\"]],\"parameters\":[]},null],[9],[0,\"\\n            \"],[6,\"li\"],[10,\"class\",\"divider\"],[8],[9],[0,\"\\n            \"],[6,\"li\"],[10,\"role\",\"presentation\"],[8],[4,\"link-to\",[\"team.user\",[22,[\"session\",\"user\",\"slug\"]]],[[\"classNames\",\"role\",\"tabindex\"],[\"dropdown-item user-menu-profile js-nav-item\",\"menuitem\",\"-1\"]],{\"statements\":[[1,[26,\"svg-jar\",[\"user-circle\"],null],false],[0,\" Your Profile\"]],\"parameters\":[]},null],[9],[0,\"\\n            \"],[6,\"li\"],[10,\"role\",\"presentation\"],[8],[6,\"a\"],[10,\"class\",\"dropdown-item help-menu-support\"],[10,\"role\",\"menuitem\"],[10,\"tabindex\",\"-1\"],[10,\"href\",\"https://help.ghost.org/\"],[10,\"target\",\"_blank\"],[8],[1,[26,\"svg-jar\",[\"ambulance\"],null],false],[0,\" Support Center\"],[9],[9],[0,\"\\n            \"],[6,\"li\"],[10,\"role\",\"presentation\"],[8],[6,\"a\"],[10,\"class\",\"dropdown-item help-menu-tweet\"],[10,\"role\",\"menuitem\"],[10,\"tabindex\",\"-1\"],[10,\"href\",\"https://twitter.com/intent/tweet?text=%40TryGhost+Hi%21+Can+you+help+me+with+&related=TryGhost\"],[10,\"target\",\"_blank\"],[10,\"onclick\",\"window.open(this.href, 'twitter-share', 'width=550,height=235');return false;\"],[8],[1,[26,\"svg-jar\",[\"twitter\"],null],false],[0,\" Tweet @TryGhost!\"],[9],[9],[0,\"\\n            \"],[6,\"li\"],[10,\"role\",\"presentation\"],[8],[6,\"a\"],[10,\"class\",\"dropdown-item help-menu-how-to\"],[10,\"role\",\"menuitem\"],[10,\"tabindex\",\"-1\"],[10,\"href\",\"https://help.ghost.org/article/7-how-to-use-ghost\"],[10,\"target\",\"_blank\"],[8],[1,[26,\"svg-jar\",[\"book-open\"],null],false],[0,\" How to Use Ghost\"],[9],[9],[0,\"\\n            \"],[6,\"li\"],[10,\"class\",\"divider\"],[8],[9],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"showDropdownExtension\"]]],null,{\"statements\":[[4,\"each\",[[22,[\"config\",\"clientExtensions\",\"dropdown\",\"items\"]]],null,{\"statements\":[[4,\"if\",[[21,3,[\"divider\"]]],null,{\"statements\":[[0,\"                        \"],[6,\"li\"],[10,\"class\",\"divider\"],[8],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                        \"],[6,\"li\"],[10,\"role\",\"presentation\"],[8],[0,\"\\n                          \"],[6,\"a\"],[11,\"href\",[27,[[21,3,[\"href\"]]]]],[10,\"target\",\"_blank\"],[11,\"class\",[27,[\"dropdown-item js-nav-item \",[21,3,[\"classes\"]]]]],[10,\"role\",\"menuitem\"],[10,\"tabindex\",\"-1\"],[8],[1,[26,\"svg-jar\",[[21,3,[\"icon\"]]],null],false],[1,[21,3,[\"text\"]],false],[9],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[3]},null],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[6,\"li\"],[10,\"role\",\"presentation\"],[8],[4,\"link-to\",[\"signout\"],[[\"classNames\",\"role\",\"tabindex\"],[\"dropdown-item user-menu-signout\",\"menuitem\",\"-1\"]],{\"statements\":[[1,[26,\"svg-jar\",[\"signout\"],null],false],[0,\" Sign Out\"]],\"parameters\":[]},null],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[2]},null],[6,\"section\"],[10,\"class\",\"gh-nav-body\"],[8],[0,\"\\n    \"],[6,\"section\"],[10,\"class\",\"gh-nav-search\"],[8],[0,\"\\n        \"],[1,[26,\"gh-search-input\",null,[[\"class\"],[\"gh-nav-search-input\"]]],false],[0,\"\\n    \"],[9],[0,\"\\n    \"],[6,\"ul\"],[10,\"class\",\"gh-nav-list gh-nav-main\"],[8],[0,\"\\n        \"],[6,\"li\"],[8],[4,\"link-to\",[\"editor.new\"],[[\"classNames\"],[\"gh-nav-main-editor\"]],{\"statements\":[[1,[26,\"svg-jar\",[\"pen\"],null],false],[0,\"New story\"]],\"parameters\":[]},null],[9],[0,\"\\n        \"],[6,\"li\"],[8],[0,\"\\n\"],[4,\"if\",[[26,\"eq\",[[22,[\"router\",\"currentRouteName\"]],\"posts.index\"],null]],null,{\"statements\":[[0,\"                \"],[4,\"link-to\",[\"posts\",[26,\"query-params\",null,[[\"type\",\"author\",\"tag\",\"order\"],[null,null,null,null]]]],[[\"classNames\"],[\"gh-nav-main-content active\"]],{\"statements\":[[1,[26,\"svg-jar\",[\"content\"],null],false],[0,\"Stories\"]],\"parameters\":[]},null],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                \"],[4,\"link-to\",[\"posts\"],[[\"classNames\"],[\"gh-nav-main-content\"]],{\"statements\":[[1,[26,\"svg-jar\",[\"content\"],null],false],[0,\"Stories\"]],\"parameters\":[]},null],[0,\"\\n\"]],\"parameters\":[]}],[0,\"        \"],[9],[0,\"\\n        \"],[6,\"li\"],[8],[4,\"link-to\",[\"team\"],[[\"classNames\"],[\"gh-nav-main-users\"]],{\"statements\":[[1,[26,\"svg-jar\",[\"account-group\"],null],false],[0,\"Team\"]],\"parameters\":[]},null],[9],[0,\"\\n\"],[4,\"if\",[[22,[\"feature\",\"subscribers\"]]],null,{\"statements\":[[4,\"if\",[[26,\"gh-user-can-admin\",[[22,[\"session\",\"user\"]]],null]],null,{\"statements\":[[0,\"                \"],[6,\"li\"],[8],[4,\"link-to\",[\"subscribers\"],[[\"classNames\"],[\"gh-nav-main-subscribers\"]],{\"statements\":[[1,[26,\"svg-jar\",[\"email\"],null],false],[0,\"Subscribers\"]],\"parameters\":[]},null],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"    \"],[9],[0,\"\\n\"],[4,\"if\",[[26,\"gh-user-can-admin\",[[22,[\"session\",\"user\"]]],null]],null,{\"statements\":[[0,\"        \"],[6,\"ul\"],[10,\"class\",\"gh-nav-list gh-nav-settings\"],[8],[0,\"\\n            \"],[6,\"li\"],[10,\"class\",\"gh-nav-list-h\"],[8],[0,\"Settings\"],[9],[0,\"\\n            \"],[6,\"li\"],[8],[4,\"link-to\",[\"settings.general\"],[[\"classNames\"],[\"gh-nav-settings-general\"]],{\"statements\":[[1,[26,\"svg-jar\",[\"settings\"],null],false],[0,\"General\"]],\"parameters\":[]},null],[9],[0,\"\\n            \"],[6,\"li\"],[8],[4,\"link-to\",[\"settings.design\"],[[\"classNames\"],[\"gh-nav-settings-navigation\"]],{\"statements\":[[1,[26,\"svg-jar\",[\"compass\"],null],false],[0,\"Design\"]],\"parameters\":[]},null],[9],[0,\"\\n            \"],[6,\"li\"],[8],[4,\"link-to\",[\"settings.tags\"],[[\"classNames\"],[\"gh-nav-settings-tags\"]],{\"statements\":[[1,[26,\"svg-jar\",[\"tag\"],null],false],[0,\"Tags\"]],\"parameters\":[]},null],[9],[0,\"\\n            \"],[6,\"li\"],[8],[4,\"link-to\",[\"settings.code-injection\"],[[\"classNames\"],[\"gh-nav-settings-code-injection\"]],{\"statements\":[[1,[26,\"svg-jar\",[\"brackets\"],null],false],[0,\"Code injection\"]],\"parameters\":[]},null],[9],[0,\"\\n            \"],[6,\"li\"],[8],[4,\"link-to\",[\"settings.apps\"],[[\"classNames\"],[\"gh-nav-settings-apps\"]],{\"statements\":[[1,[26,\"svg-jar\",[\"box\"],null],false],[0,\"Apps\"]],\"parameters\":[]},null],[9],[0,\"\\n            \"],[6,\"li\"],[8],[4,\"link-to\",[\"settings.labs\"],[[\"classNames\"],[\"gh-nav-settings-labs\"]],{\"statements\":[[1,[26,\"svg-jar\",[\"wrench-double\"],null],false],[0,\"Labs\"]],\"parameters\":[]},null],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[22,[\"showMenuExtension\"]]],null,{\"statements\":[[0,\"        \"],[6,\"ul\"],[10,\"class\",\"gh-nav-list gh-nav-settings\"],[8],[0,\"\\n            \"],[4,\"if\",[[22,[\"config\",\"clientExtensions\",\"menu\",\"title\"]]],null,{\"statements\":[[6,\"li\"],[10,\"class\",\"gh-nav-list-h\"],[8],[1,[22,[\"config\",\"clientExtensions\",\"menu\",\"title\"]],false],[9]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"each\",[[22,[\"config\",\"clientExtensions\",\"menu\",\"items\"]]],null,{\"statements\":[[0,\"                \"],[6,\"li\"],[8],[0,\"\\n                    \"],[6,\"a\"],[11,\"href\",[27,[[21,1,[\"href\"]]]]],[10,\"target\",\"_blank\"],[8],[1,[26,\"svg-jar\",[[21,1,[\"icon\"]]],null],false],[1,[21,1,[\"text\"]],false],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[22,[\"showScriptExtension\"]]],null,{\"statements\":[[0,\"        \"],[1,[22,[\"config\",\"clientExtensions\",\"script\",\"container\"]],true],[0,\"\\n        \"],[6,\"script\"],[11,\"src\",[27,[[22,[\"config\",\"clientExtensions\",\"script\",\"src\"]]]]],[8],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"footer\"],[10,\"class\",\"gh-nav-foot\"],[8],[0,\"\\n    \"],[6,\"a\"],[10,\"class\",\"gh-nav-foot-sitelink\"],[11,\"href\",[27,[[22,[\"config\",\"blogUrl\"]],\"/\"]]],[10,\"target\",\"_blank\"],[8],[0,\"View site \"],[1,[26,\"svg-jar\",[\"external\"],null],false],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"div\"],[10,\"class\",\"gh-autonav-toggle\"],[3,\"action\",[[21,0,[]],\"openAutoNav\"],[[\"on\",\"target\"],[\"mouseEnter\",[22,[\"ui\"]]]]],[8],[9],[0,\"\\n\\n\"],[1,[26,\"gh-tour-item\",[\"getting-started\"],[[\"target\",\"throbberAttachment\",\"throbberOffset\",\"popoverTriangleClass\"],[\".gh-menu-toggle\",\"bottom middle\",\"0 4px\",\"left-top\"]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-nav-menu.hbs" } });
});
define("ghost-admin/templates/components/gh-navitem", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "33d/2lqi", "block": "{\"symbols\":[],\"statements\":[[4,\"unless\",[[22,[\"navItem\",\"isNew\"]]],null,{\"statements\":[[0,\"    \"],[6,\"span\"],[10,\"class\",\"gh-blognav-grab\"],[8],[0,\"\\n        \"],[1,[26,\"svg-jar\",[\"grab\"],null],false],[0,\"\\n        \"],[6,\"span\"],[10,\"class\",\"sr-only\"],[8],[0,\"Reorder\"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[6,\"div\"],[10,\"class\",\"gh-blognav-line\"],[8],[0,\"\\n\"],[4,\"gh-validation-status-container\",null,[[\"tagName\",\"class\",\"errors\",\"property\",\"hasValidated\"],[\"span\",\"gh-blognav-label\",[22,[\"navItem\",\"errors\"]],\"label\",[22,[\"navItem\",\"hasValidated\"]]]],{\"statements\":[[0,\"        \"],[1,[26,\"gh-trim-focus-input\",null,[[\"shouldFocus\",\"placeholder\",\"value\",\"input\",\"keyPress\",\"focus-out\"],[[22,[\"navItem\",\"last\"]],\"Label\",[26,\"readonly\",[[22,[\"navItem\",\"label\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"navItem\",\"label\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"clearLabelErrors\"],null],[26,\"action\",[[21,0,[]],\"updateLabel\",[22,[\"navItem\",\"label\"]]],null]]]],false],[0,\"\\n        \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"navItem\",\"errors\"]],\"label\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"gh-validation-status-container\",null,[[\"tagName\",\"class\",\"errors\",\"property\",\"hasValidated\"],[\"span\",\"gh-blognav-url\",[22,[\"navItem\",\"errors\"]],\"url\",[22,[\"navItem\",\"hasValidated\"]]]],{\"statements\":[[0,\"        \"],[1,[26,\"gh-navitem-url-input\",null,[[\"baseUrl\",\"url\",\"isNew\",\"update\",\"clearErrors\"],[[22,[\"baseUrl\"]],[22,[\"navItem\",\"url\"]],[22,[\"navItem\",\"isNew\"]],[26,\"action\",[[21,0,[]],\"updateUrl\"],null],[26,\"action\",[[21,0,[]],\"clearUrlErrors\"],null]]]],false],[0,\"\\n        \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"navItem\",\"errors\"]],\"url\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[9],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"navItem\",\"isNew\"]]],null,{\"statements\":[[0,\"    \"],[6,\"button\"],[10,\"class\",\"gh-blognav-add\"],[10,\"type\",\"button\"],[3,\"action\",[[21,0,[]],\"addItem\"]],[8],[0,\"\\n        \"],[1,[26,\"svg-jar\",[\"add\"],null],false],[6,\"span\"],[10,\"class\",\"sr-only\"],[8],[0,\"Add\"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[6,\"button\"],[10,\"class\",\"gh-blognav-delete\"],[10,\"type\",\"button\"],[3,\"action\",[[21,0,[]],\"deleteItem\",[22,[\"navItem\"]]]],[8],[0,\"\\n        \"],[1,[26,\"svg-jar\",[\"trash\"],null],false],[6,\"span\"],[10,\"class\",\"sr-only\"],[8],[0,\"Delete\"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-navitem.hbs" } });
});
define("ghost-admin/templates/components/gh-notification", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "rS0Qh+cG", "block": "{\"symbols\":[],\"statements\":[[6,\"div\"],[10,\"class\",\"gh-notification-content\"],[8],[0,\"\\n    \"],[1,[22,[\"message\",\"message\"]],false],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"button\"],[10,\"class\",\"gh-notification-close\"],[3,\"action\",[[21,0,[]],\"closeNotification\"]],[8],[1,[26,\"svg-jar\",[\"close\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-notification.hbs" } });
});
define("ghost-admin/templates/components/gh-notifications", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "+4Ff4Nm5", "block": "{\"symbols\":[\"message\"],\"statements\":[[4,\"each\",[[22,[\"messages\"]]],null,{\"statements\":[[0,\"    \"],[1,[26,\"gh-notification\",null,[[\"message\"],[[21,1,[]]]]],false],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-notifications.hbs" } });
});
define("ghost-admin/templates/components/gh-post-settings-menu", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "e7BJKwft", "block": "{\"symbols\":[],\"statements\":[[6,\"div\"],[10,\"class\",\"settings-menu-container\"],[8],[0,\"\\n    \"],[6,\"div\"],[10,\"id\",\"entry-controls\"],[8],[0,\"\\n        \"],[6,\"div\"],[11,\"class\",[27,[[26,\"if\",[[22,[\"isViewingSubview\"]],\"settings-menu-pane-out-left\",\"settings-menu-pane-in\"],null],\" settings-menu settings-menu-pane\"]]],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"settings-menu-header\"],[8],[0,\"\\n                \"],[6,\"h4\"],[8],[0,\"Post Settings\"],[9],[0,\"\\n                \"],[6,\"button\"],[10,\"class\",\"close settings-menu-header-action\"],[10,\"data-test-close-settings-menu\",\"\"],[3,\"action\",[[21,0,[]],\"closeMenus\"],[[\"target\"],[[22,[\"ui\"]]]]],[8],[0,\"\\n                    \"],[1,[26,\"svg-jar\",[\"close\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"settings-menu-content\"],[8],[0,\"\\n                \"],[1,[26,\"gh-image-uploader-with-preview\",null,[[\"image\",\"text\",\"allowUnsplash\",\"update\",\"remove\"],[[22,[\"post\",\"featureImage\"]],\"Upload post image\",true,[26,\"action\",[[21,0,[]],\"setCoverImage\"],null],[26,\"action\",[[21,0,[]],\"clearCoverImage\"],null]]]],false],[0,\"\\n                \"],[6,\"form\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"form-group\"],[8],[0,\"\\n                    \"],[6,\"label\"],[10,\"for\",\"url\"],[8],[0,\"Post URL\"],[9],[0,\"\\n\"],[4,\"unless\",[[22,[\"post\",\"isNew\"]]],null,{\"statements\":[[4,\"if\",[[22,[\"post\",\"isPublished\"]]],null,{\"statements\":[[0,\"                        \"],[6,\"a\"],[10,\"class\",\"post-view-link\"],[10,\"target\",\"_blank\"],[11,\"href\",[27,[[22,[\"post\",\"absoluteUrl\"]]]]],[8],[0,\"\\n                            View post \"],[1,[26,\"svg-jar\",[\"external\"],null],false],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                        \"],[6,\"a\"],[10,\"class\",\"post-view-link\"],[10,\"target\",\"_blank\"],[11,\"href\",[27,[[22,[\"post\",\"previewUrl\"]]]]],[8],[0,\"\\n                            Preview \"],[1,[26,\"svg-jar\",[\"external\"],null],false],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[0,\"\\n                    \"],[6,\"div\"],[10,\"class\",\"gh-input-icon gh-icon-link\"],[8],[0,\"\\n                        \"],[1,[26,\"svg-jar\",[\"link\"],null],false],[0,\"\\n                        \"],[1,[26,\"gh-text-input\",null,[[\"class\",\"id\",\"name\",\"value\",\"input\",\"focus-out\",\"stopEnterKeyDownPropagation\"],[\"post-setting-slug\",\"url\",\"post-setting-slug\",[26,\"readonly\",[[22,[\"slugValue\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"slugValue\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"updateSlug\",[22,[\"slugValue\"]]],null],true]]],false],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[1,[26,\"gh-url-preview\",null,[[\"slug\",\"tagName\",\"classNames\"],[[22,[\"slugValue\"]],\"p\",\"description\"]]],false],[0,\"\\n                \"],[9],[0,\"\\n\\n                \"],[6,\"div\"],[10,\"class\",\"form-group\"],[8],[0,\"\\n\"],[4,\"if\",[[26,\"or\",[[22,[\"post\",\"isDraft\"]],[22,[\"post\",\"isPublished\"]],[22,[\"post\",\"pastScheduledTime\"]]],null]],null,{\"statements\":[[0,\"                        \"],[6,\"label\"],[8],[0,\"Publish Date\"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                        \"],[6,\"label\"],[8],[0,\"Scheduled Date\"],[9],[0,\"\\n                        \"],[6,\"p\"],[8],[0,\"Use the publish menu to re-schedule\"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                    \"],[1,[26,\"gh-date-time-picker\",null,[[\"date\",\"time\",\"setDate\",\"setTime\",\"errors\",\"dateErrorProperty\",\"timeErrorProperty\",\"maxDate\",\"disabled\",\"static\"],[[22,[\"post\",\"publishedAtBlogDate\"]],[22,[\"post\",\"publishedAtBlogTime\"]],[26,\"action\",[[21,0,[]],\"setPublishedAtBlogDate\"],null],[26,\"action\",[[21,0,[]],\"setPublishedAtBlogTime\"],null],[22,[\"post\",\"errors\"]],\"publishedAtBlogDate\",\"publishedAtBlogTime\",\"now\",[22,[\"post\",\"isScheduled\"]],true]]],false],[0,\"\\n                \"],[9],[0,\"\\n\\n\"],[4,\"unless\",[[22,[\"session\",\"user\",\"isContributor\"]]],null,{\"statements\":[[0,\"                \"],[6,\"div\"],[10,\"class\",\"form-group\"],[8],[0,\"\\n                    \"],[6,\"label\"],[10,\"for\",\"tag-input\"],[8],[0,\"Tags\"],[9],[0,\"\\n                    \"],[1,[26,\"gh-psm-tags-input\",null,[[\"post\",\"triggerId\"],[[22,[\"post\"]],\"tag-input\"]]],false],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"post\",\"errors\"]],[22,[\"post\",\"hasValidated\"]],\"customExcerpt\"]],{\"statements\":[[0,\"                    \"],[6,\"label\"],[10,\"for\",\"custom-excerpt\"],[8],[0,\"Excerpt\"],[9],[0,\"\\n                    \"],[1,[26,\"gh-textarea\",null,[[\"class\",\"id\",\"name\",\"value\",\"input\",\"focus-out\",\"stopEnterKeyDownPropagation\",\"data-test-field\"],[\"post-setting-custom-excerpt\",\"custom-excerpt\",\"post-setting-custom-excerpt\",[26,\"readonly\",[[22,[\"customExcerptScratch\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"customExcerptScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"setCustomExcerpt\",[22,[\"customExcerptScratch\"]]],null],\"true\",\"custom-excerpt\"]]],false],[0,\"\\n                    \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\",\"data-test-error\"],[[22,[\"post\",\"errors\"]],\"customExcerpt\",\"custom-excerpt\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"unless\",[[22,[\"session\",\"user\",\"isAuthorOrContributor\"]]],null,{\"statements\":[[4,\"gh-form-group\",null,[[\"class\",\"errors\",\"hasValidated\",\"property\",\"data-test-input\"],[\"for-select\",[22,[\"post\",\"errors\"]],[22,[\"post\",\"hasValidated\"]],\"authors\",\"authors\"]],{\"statements\":[[0,\"                        \"],[6,\"label\"],[10,\"for\",\"author-list\"],[8],[0,\"Authors\"],[9],[0,\"\\n                        \"],[1,[26,\"gh-psm-authors-input\",null,[[\"selectedAuthors\",\"updateAuthors\",\"triggerId\"],[[22,[\"post\",\"authors\"]],[26,\"action\",[[21,0,[]],\"changeAuthors\"],null],\"author-list\"]]],false],[0,\"\\n                        \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\",\"data-test-error\"],[[22,[\"post\",\"errors\"]],\"authors\",\"authors\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"\\n                \"],[6,\"ul\"],[10,\"class\",\"nav-list nav-list-block\"],[8],[0,\"\\n                    \"],[6,\"li\"],[10,\"class\",\"nav-list-item\"],[10,\"data-test-button\",\"meta-data\"],[3,\"action\",[[21,0,[]],\"showSubview\",\"meta-data\"]],[8],[0,\"\\n                        \"],[6,\"button\"],[10,\"type\",\"button\"],[8],[0,\"\\n                            \"],[6,\"b\"],[8],[0,\"Meta Data\"],[9],[0,\"\\n                            \"],[6,\"span\"],[8],[0,\"Extra content for search engines\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                        \"],[1,[26,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[6,\"li\"],[10,\"class\",\"nav-list-item\"],[10,\"data-test-button\",\"twitter-data\"],[3,\"action\",[[21,0,[]],\"showSubview\",\"twitter-data\"]],[8],[0,\"\\n                        \"],[6,\"button\"],[10,\"type\",\"button\"],[8],[0,\"\\n                            \"],[6,\"b\"],[8],[0,\"Twitter Card\"],[9],[0,\"\\n                            \"],[6,\"span\"],[8],[0,\"Customise structured data for Twitter\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                        \"],[1,[26,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[6,\"li\"],[10,\"class\",\"nav-list-item\"],[10,\"data-test-button\",\"facebook-data\"],[3,\"action\",[[21,0,[]],\"showSubview\",\"facebook-data\"]],[8],[0,\"\\n                        \"],[6,\"button\"],[10,\"type\",\"button\"],[8],[0,\"\\n                            \"],[6,\"b\"],[8],[0,\"Facebook Card\"],[9],[0,\"\\n                            \"],[6,\"span\"],[8],[0,\"Customise Open Graph data\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                        \"],[1,[26,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[6,\"li\"],[10,\"class\",\"nav-list-item\"],[10,\"data-test-button\",\"codeinjection\"],[3,\"action\",[[21,0,[]],\"showSubview\",\"codeinjection\"]],[8],[0,\"\\n                        \"],[6,\"button\"],[10,\"type\",\"button\"],[8],[0,\"\\n                            \"],[6,\"b\"],[8],[0,\"Code Injection\"],[9],[0,\"\\n                            \"],[6,\"span\"],[8],[0,\"Add styles/scripts to the header & footer\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                        \"],[1,[26,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n\\n                \"],[6,\"div\"],[10,\"class\",\"form-group for-checkbox\"],[8],[0,\"\\n                    \"],[6,\"label\"],[10,\"class\",\"checkbox\"],[10,\"for\",\"static-page\"],[3,\"action\",[[21,0,[]],\"togglePage\"],[[\"bubbles\"],[\"false\"]]],[8],[0,\"\\n                        \"],[6,\"input\"],[11,\"checked\",[22,[\"post\",\"page\"]],null],[10,\"class\",\"gh-input post-setting-static-page\"],[10,\"name\",\"static-page\"],[10,\"id\",\"static-page\"],[11,\"onclick\",[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"post\",\"page\"]]],null]],[[\"value\"],[\"target.checked\"]]],null],[10,\"data-test-checkbox\",\"static-page\"],[10,\"type\",\"checkbox\"],[8],[9],[0,\"\\n                        \"],[6,\"span\"],[10,\"class\",\"input-toggle-component\"],[8],[9],[0,\"\\n                        \"],[6,\"p\"],[8],[0,\"Turn this post into a page\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n\\n                    \"],[6,\"label\"],[10,\"class\",\"checkbox\"],[10,\"for\",\"featured\"],[3,\"action\",[[21,0,[]],\"toggleFeatured\"],[[\"bubbles\"],[\"false\"]]],[8],[0,\"\\n                        \"],[6,\"input\"],[11,\"checked\",[22,[\"post\",\"featured\"]],null],[10,\"class\",\"gh-input post-settings-featured\"],[11,\"onclick\",[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"post\",\"featured\"]]],null]],[[\"value\"],[\"target.checked\"]]],null],[10,\"data-test-checkbox\",\"featured\"],[10,\"type\",\"checkbox\"],[8],[9],[0,\"\\n                        \"],[6,\"span\"],[10,\"class\",\"input-toggle-component\"],[8],[9],[0,\"\\n                        \"],[6,\"p\"],[8],[0,\"Feature this post\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n\\n                \"],[1,[26,\"gh-psm-template-select\",null,[[\"post\",\"onTemplateSelect\"],[[22,[\"post\"]],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"post\",\"customTemplate\"]]],null]],null]]]],false],[0,\"\\n\\n\"],[4,\"unless\",[[22,[\"post\",\"isNew\"]]],null,{\"statements\":[[0,\"                    \"],[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-link gh-btn-icon settings-menu-delete-button\"],[10,\"type\",\"button\"],[3,\"action\",[[21,0,[]],\"deletePost\"]],[8],[6,\"span\"],[8],[1,[26,\"svg-jar\",[\"trash\"],null],false],[0,\" Delete Post\"],[9],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[6,\"div\"],[11,\"class\",[27,[[26,\"if\",[[22,[\"isViewingSubview\"]],\"settings-menu-pane-in\",\"settings-menu-pane-out-right\"],null],\" settings-menu settings-menu-pane\"]]],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"active\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"isViewingSubview\"]]],null,{\"statements\":[[4,\"if\",[[26,\"eq\",[[22,[\"subview\"]],\"meta-data\"],null]],null,{\"statements\":[[0,\"                        \"],[6,\"div\"],[10,\"class\",\"settings-menu-header subview\"],[8],[0,\"\\n                            \"],[6,\"button\"],[10,\"class\",\"back settings-menu-header-action\"],[10,\"data-test-button\",\"close-psm-subview\"],[3,\"action\",[[21,0,[]],\"closeSubview\"]],[8],[1,[26,\"svg-jar\",[\"arrow-left\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Back\"],[9],[9],[0,\"\\n                            \"],[6,\"h4\"],[8],[0,\"Meta Data\"],[9],[0,\"\\n                            \"],[6,\"div\"],[10,\"style\",\"width:23px;\"],[8],[9],[0,\"\\n                        \"],[9],[0,\"\\n\\n                        \"],[6,\"div\"],[10,\"class\",\"settings-menu-content\"],[8],[0,\"\\n                            \"],[6,\"form\"],[3,\"action\",[[21,0,[]],\"discardEnter\"],[[\"on\"],[\"submit\"]]],[8],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"post\",\"errors\"]],[22,[\"post\",\"hasValidated\"]],\"metaTitle\"]],{\"statements\":[[0,\"                                    \"],[6,\"label\"],[10,\"for\",\"meta-title\"],[8],[0,\"Meta Title\"],[9],[0,\"\\n                                    \"],[1,[26,\"gh-text-input\",null,[[\"class\",\"id\",\"name\",\"value\",\"input\",\"focus-out\",\"stopEnterKeyDownPropagation\",\"data-test-field\"],[\"post-setting-meta-title\",\"meta-title\",\"post-setting-meta-title\",[26,\"readonly\",[[22,[\"metaTitleScratch\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"metaTitleScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"setMetaTitle\",[22,[\"metaTitleScratch\"]]],null],true,\"meta-title\"]]],false],[0,\"\\n                                    \"],[6,\"p\"],[8],[0,\"Recommended: \"],[6,\"b\"],[8],[0,\"70\"],[9],[0,\" characters. You’ve used \"],[1,[26,\"gh-count-down-characters\",[[22,[\"metaTitleScratch\"]],70],null],false],[9],[0,\"\\n                                    \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"post\",\"errors\"]],\"meta-title\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"post\",\"errors\"]],[22,[\"post\",\"hasValidated\"]],\"metaDescription\"]],{\"statements\":[[0,\"                                    \"],[6,\"label\"],[10,\"for\",\"meta-description\"],[8],[0,\"Meta Description\"],[9],[0,\"\\n                                    \"],[1,[26,\"gh-textarea\",null,[[\"class\",\"id\",\"name\",\"value\",\"input\",\"focus-out\",\"stopEnterKeyDownPropagation\",\"data-test-field\"],[\"post-setting-meta-description\",\"meta-description\",\"post-setting-meta-description\",[26,\"readonly\",[[22,[\"metaDescriptionScratch\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"metaDescriptionScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"setMetaDescription\",[22,[\"metaDescriptionScratch\"]]],null],\"true\",\"meta-description\"]]],false],[0,\"\\n                                    \"],[6,\"p\"],[8],[0,\"Recommended: \"],[6,\"b\"],[8],[0,\"156\"],[9],[0,\" characters. You’ve used \"],[1,[26,\"gh-count-down-characters\",[[22,[\"metaDescriptionScratch\"]],156],null],false],[9],[0,\"\\n                                    \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"post\",\"errors\"]],\"meta-description\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n                                \"],[6,\"div\"],[10,\"class\",\"form-group\"],[8],[0,\"\\n                                    \"],[6,\"label\"],[8],[0,\"Search Engine Result Preview\"],[9],[0,\"\\n                                    \"],[6,\"div\"],[10,\"class\",\"seo-preview\"],[8],[0,\"\\n                                        \"],[6,\"div\"],[10,\"class\",\"seo-preview-title\"],[8],[1,[26,\"truncate\",[[22,[\"seoTitle\"]],70],null],false],[9],[0,\"\\n                                        \"],[6,\"div\"],[10,\"class\",\"seo-preview-link\"],[8],[1,[26,\"truncate\",[[22,[\"seoURL\"]],70],null],false],[9],[0,\"\\n                                        \"],[6,\"div\"],[10,\"class\",\"seo-preview-description\"],[8],[1,[26,\"truncate\",[[22,[\"seoDescription\"]],300],null],false],[9],[0,\"\\n                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[26,\"eq\",[[22,[\"subview\"]],\"twitter-data\"],null]],null,{\"statements\":[[0,\"                        \"],[6,\"div\"],[10,\"class\",\"settings-menu-header subview\"],[8],[0,\"\\n                            \"],[6,\"button\"],[10,\"class\",\"back settings-menu-header-action\"],[10,\"data-test-button\",\"close-psm-subview\"],[3,\"action\",[[21,0,[]],\"closeSubview\"]],[8],[1,[26,\"svg-jar\",[\"arrow-left\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Back\"],[9],[9],[0,\"\\n                            \"],[6,\"h4\"],[8],[0,\"Twitter Card\"],[9],[0,\"\\n                            \"],[6,\"div\"],[10,\"style\",\"width:23px;\"],[8],[9],[0,\"\\n                        \"],[9],[0,\"\\n\\n                        \"],[6,\"div\"],[10,\"class\",\"settings-menu-content\"],[8],[0,\"\\n\\n                            \"],[6,\"form\"],[3,\"action\",[[21,0,[]],\"discardEnter\"],[[\"on\"],[\"submit\"]]],[8],[0,\"\\n                                \"],[1,[26,\"gh-image-uploader-with-preview\",null,[[\"image\",\"text\",\"allowUnsplash\",\"update\",\"remove\"],[[22,[\"post\",\"twitterImage\"]],\"Add Twitter image\",true,[26,\"action\",[[21,0,[]],\"setTwitterImage\"],null],[26,\"action\",[[21,0,[]],\"clearTwitterImage\"],null]]]],false],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"post\",\"errors\"]],[22,[\"post\",\"hasValidated\"]],\"twitterTitle\"]],{\"statements\":[[0,\"                                    \"],[6,\"label\"],[10,\"for\",\"twitter-title\"],[8],[0,\"Twitter Title\"],[9],[0,\"\\n                                    \"],[1,[26,\"gh-text-input\",null,[[\"class\",\"id\",\"name\",\"placeholder\",\"value\",\"input\",\"focus-out\",\"stopEnterKeyDownPropagation\",\"data-test-field\"],[\"post-setting-twitter-title\",\"twitter-title\",\"post-setting-twitter-title\",[26,\"truncate\",[[22,[\"twitterTitle\"]],40],null],[26,\"readonly\",[[22,[\"twitterTitleScratch\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"twitterTitleScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"setTwitterTitle\",[22,[\"twitterTitleScratch\"]]],null],true,\"twitter-title\"]]],false],[0,\"\\n                                    \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\",\"data-test-error\"],[[22,[\"post\",\"errors\"]],\"twitterTitle\",\"twitter-title\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"post\",\"errors\"]],[22,[\"post\",\"hasValidated\"]],\"twitterDescription\"]],{\"statements\":[[0,\"                                    \"],[6,\"label\"],[10,\"for\",\"twitter-description\"],[8],[0,\"Twitter Description\"],[9],[0,\"\\n                                    \"],[1,[26,\"gh-textarea\",null,[[\"class\",\"id\",\"name\",\"placeholder\",\"stopEnterKeyDownPropagation\",\"value\",\"input\",\"focus-out\",\"data-test-field\"],[\"post-setting-twitter-description\",\"twitter-description\",\"post-setting-twitter-description\",[26,\"truncate\",[[22,[\"twitterDescription\"]],155],null],\"true\",[26,\"readonly\",[[22,[\"twitterDescriptionScratch\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"twitterDescriptionScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"setTwitterDescription\",[22,[\"twitterDescriptionScratch\"]]],null],\"twitter-description\"]]],false],[0,\"\\n                                    \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\",\"data-test-error\"],[[22,[\"post\",\"errors\"]],\"twitterDescription\",\"twitter-description\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n                                \"],[6,\"div\"],[10,\"class\",\"form-group\"],[8],[0,\"\\n                                    \"],[6,\"label\"],[8],[0,\"Preview\"],[9],[0,\"\\n                                    \"],[6,\"div\"],[10,\"class\",\"gh-twitter-preview\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"twitterImage\"]]],null,{\"statements\":[[0,\"                                        \"],[6,\"div\"],[10,\"class\",\"gh-twitter-preview-image\"],[11,\"style\",[26,\"background-image-style\",[[22,[\"twitterImage\"]]],null],null],[8],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                                        \"],[6,\"div\"],[10,\"class\",\"gh-twitter-preview-content\"],[8],[0,\"\\n                                            \"],[6,\"div\"],[10,\"class\",\"gh-twitter-preview-title\"],[8],[1,[20,\"twitterTitle\"],false],[9],[0,\"\\n                                            \"],[6,\"div\"],[10,\"class\",\"gh-twitter-preview-description\"],[8],[1,[26,\"truncate\",[[22,[\"twitterDescription\"]],155],null],false],[9],[0,\"\\n                                            \"],[6,\"div\"],[10,\"class\",\"gh-twitter-preview-footer\"],[8],[0,\"\\n                                                \"],[6,\"div\"],[10,\"class\",\"gh-twitter-preview-footer-left\"],[8],[0,\"\\n                                                    \"],[1,[22,[\"config\",\"blogDomain\"]],false],[0,\"\\n                                                \"],[9],[0,\"\\n                                                \"],[6,\"div\"],[10,\"class\",\"gh-twitter-preview-footer-right\"],[8],[0,\"\\n                                                \"],[9],[0,\"\\n                                            \"],[9],[0,\"\\n                                        \"],[9],[0,\"\\n                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[26,\"eq\",[[22,[\"subview\"]],\"facebook-data\"],null]],null,{\"statements\":[[0,\"                        \"],[6,\"div\"],[10,\"class\",\"settings-menu-header subview\"],[8],[0,\"\\n                            \"],[6,\"button\"],[10,\"class\",\"back settings-menu-header-action\"],[10,\"data-test-button\",\"close-psm-subview\"],[3,\"action\",[[21,0,[]],\"closeSubview\"]],[8],[1,[26,\"svg-jar\",[\"arrow-left\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Back\"],[9],[9],[0,\"\\n                            \"],[6,\"h4\"],[8],[0,\"Facebook Card\"],[9],[0,\"\\n                            \"],[6,\"div\"],[10,\"style\",\"width:23px;\"],[8],[9],[0,\"\\n                        \"],[9],[0,\"\\n\\n                        \"],[6,\"div\"],[10,\"class\",\"settings-menu-content\"],[8],[0,\"\\n                            \"],[6,\"form\"],[3,\"action\",[[21,0,[]],\"discardEnter\"],[[\"on\"],[\"submit\"]]],[8],[0,\"\\n                                \"],[1,[26,\"gh-image-uploader-with-preview\",null,[[\"image\",\"text\",\"allowUnsplash\",\"update\",\"remove\"],[[22,[\"post\",\"ogImage\"]],\"Add Facebook image\",true,[26,\"action\",[[21,0,[]],\"setOgImage\"],null],[26,\"action\",[[21,0,[]],\"clearOgImage\"],null]]]],false],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"post\",\"errors\"]],[22,[\"post\",\"hasValidated\"]],\"ogTitle\"]],{\"statements\":[[0,\"                                    \"],[6,\"label\"],[10,\"for\",\"og-title\"],[8],[0,\"Facebook Title\"],[9],[0,\"\\n                                    \"],[1,[26,\"gh-text-input\",null,[[\"class\",\"id\",\"name\",\"placeholder\",\"value\",\"input\",\"focus-out\",\"stopEnterKeyDownPropagation\",\"data-test-field\"],[\"post-setting-og-title\",\"og-title\",\"post-setting-og-title\",[26,\"truncate\",[[22,[\"facebookTitle\"]],40],null],[26,\"readonly\",[[22,[\"ogTitleScratch\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"ogTitleScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"setOgTitle\",[22,[\"ogTitleScratch\"]]],null],true,\"og-title\"]]],false],[0,\"\\n                                    \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\",\"data-test-error\"],[[22,[\"post\",\"errors\"]],\"ogTitle\",\"og-title\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"post\",\"errors\"]],[22,[\"post\",\"hasValidated\"]],\"ogDescription\"]],{\"statements\":[[0,\"                                    \"],[6,\"label\"],[10,\"for\",\"og-description\"],[8],[0,\"Facebook Description\"],[9],[0,\"\\n                                    \"],[1,[26,\"gh-textarea\",null,[[\"class\",\"id\",\"name\",\"placeholder\",\"value\",\"input\",\"focus-out\",\"stopEnterKeyDownPropagation\",\"data-test-field\"],[\"post-setting-og-description\",\"og-description\",\"post-setting-og-description\",[26,\"truncate\",[[22,[\"facebookDescription\"]],160],null],[26,\"readonly\",[[22,[\"ogDescriptionScratch\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"ogDescriptionScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"setOgDescription\",[22,[\"ogDescriptionScratch\"]]],null],\"true\",\"og-description\"]]],false],[0,\"\\n                                    \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\",\"data-test-error\"],[[22,[\"post\",\"errors\"]],\"ogDescription\",\"og-description\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n                                \"],[6,\"div\"],[10,\"class\",\"form-group\"],[8],[0,\"\\n                                    \"],[6,\"label\"],[8],[0,\"Preview\"],[9],[0,\"\\n                                    \"],[6,\"div\"],[10,\"class\",\"gh-og-preview\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"facebookImage\"]]],null,{\"statements\":[[0,\"                                        \"],[6,\"div\"],[10,\"class\",\"gh-og-preview-image\"],[11,\"style\",[26,\"background-image-style\",[[22,[\"facebookImage\"]]],null],null],[8],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                                        \"],[6,\"div\"],[10,\"class\",\"gh-og-preview-content\"],[8],[0,\"\\n                                            \"],[6,\"div\"],[10,\"class\",\"gh-og-preview-title\"],[8],[1,[26,\"truncate\",[[22,[\"facebookTitle\"]],88],null],false],[9],[0,\"\\n                                            \"],[6,\"div\"],[10,\"class\",\"gh-og-preview-description\"],[8],[1,[26,\"truncate\",[[22,[\"facebookDescription\"]],300],null],false],[9],[0,\"\\n                                            \"],[6,\"div\"],[10,\"class\",\"gh-og-preview-footer\"],[8],[0,\"\\n                                                \"],[6,\"div\"],[10,\"class\",\"gh-og-preview-footer-left\"],[8],[0,\"\\n                                                    \"],[1,[22,[\"config\",\"blogDomain\"]],false],[0,\" \"],[6,\"span\"],[10,\"class\",\"gh-og-preview-footer-left-divider\"],[8],[0,\"|\"],[9],[0,\" by \"],[6,\"span\"],[10,\"class\",\"gh-og-preview-footer-author\"],[8],[1,[22,[\"post\",\"author\",\"name\"]],false],[9],[0,\"\\n                                                \"],[9],[0,\"\\n                                                \"],[6,\"div\"],[10,\"class\",\"gh-og-preview-footer-right\"],[8],[0,\"\\n                                                \"],[9],[0,\"\\n                                            \"],[9],[0,\"\\n                                        \"],[9],[0,\"\\n                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[26,\"eq\",[[22,[\"subview\"]],\"codeinjection\"],null]],null,{\"statements\":[[0,\"                        \"],[6,\"div\"],[10,\"class\",\"settings-menu-header subview\"],[8],[0,\"\\n                            \"],[6,\"button\"],[10,\"class\",\"back settings-menu-header-action\"],[10,\"data-test-button\",\"close-psm-subview\"],[3,\"action\",[[21,0,[]],\"closeSubview\"]],[8],[1,[26,\"svg-jar\",[\"arrow-left\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Back\"],[9],[9],[0,\"\\n                            \"],[6,\"h4\"],[8],[0,\"Code Injection\"],[9],[0,\"\\n                            \"],[6,\"div\"],[10,\"style\",\"width:23px;\"],[8],[9],[0,\"\\n                        \"],[9],[0,\"\\n\\n                        \"],[6,\"div\"],[10,\"class\",\"settings-menu-content settings-menu-content-codeinjection\"],[8],[0,\"\\n                            \"],[6,\"form\"],[3,\"action\",[[21,0,[]],\"discardEnter\"],[[\"on\"],[\"submit\"]]],[8],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"post\",\"errors\"]],[22,[\"post\",\"hasValidated\"]],\"codeinjectionHead\"]],{\"statements\":[[0,\"                                    \"],[6,\"label\"],[10,\"for\",\"codeinjection-head\"],[8],[0,\"Post Header \"],[6,\"code\"],[8],[0,\"{{ghost_head}}\"],[9],[9],[0,\"\\n                                    \"],[1,[26,\"gh-cm-editor\",[[22,[\"codeinjectionHeadScratch\"]]],[[\"id\",\"class\",\"name\",\"focusOut\",\"stopEnterKeyDownPropagation\",\"update\",\"data-test-field\"],[\"post-setting-codeinjection-head\",\"post-setting-codeinjection\",\"post-setting-codeinjection-head\",[26,\"action\",[[21,0,[]],\"setHeaderInjection\",[22,[\"codeinjectionHeadScratch\"]]],null],\"true\",[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"codeinjectionHeadScratch\"]]],null]],null],\"codeinjection-head\"]]],false],[0,\"\\n                                    \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\",\"data-test-error\"],[[22,[\"post\",\"errors\"]],\"codeinjectionHead\",\"codeinjection-head\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"post\",\"errors\"]],[22,[\"post\",\"hasValidated\"]],\"codeinjectionFoot\"]],{\"statements\":[[0,\"                                    \"],[6,\"label\"],[10,\"for\",\"codeinjection-foot\"],[8],[0,\"Post Footer \"],[6,\"code\"],[8],[0,\"{{ghost_foot}}\"],[9],[9],[0,\"\\n                                    \"],[1,[26,\"gh-cm-editor\",[[22,[\"codeinjectionFootScratch\"]]],[[\"id\",\"class\",\"name\",\"focusOut\",\"stopEnterKeyDownPropagation\",\"update\",\"data-test-field\"],[\"post-setting-codeinjection-foot\",\"post-setting-codeinjection\",\"post-setting-codeinjection-foot\",[26,\"action\",[[21,0,[]],\"setFooterInjection\",[22,[\"codeinjectionFootScratch\"]]],null],\"true\",[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"codeinjectionFootScratch\"]]],null]],null],\"codeinjection-foot\"]]],false],[0,\"\\n                                    \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\",\"data-test-error\"],[[22,[\"post\",\"errors\"]],\"codeinjectionFoot\",\"codeinjection-foot\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"_showThrobbers\"]]],null,{\"statements\":[[0,\"    \"],[1,[26,\"gh-tour-item\",[\"static-post\"],[[\"target\",\"throbberAttachment\",\"throbberOffset\",\"popoverTriangleClass\"],[\"label[for='static-page'] p\",\"middle middle\",\"0px 33px\",\"bottom-right\"]]],false],[0,\"\\n\\n    \"],[1,[26,\"gh-tour-item\",[\"featured-post\"],[[\"target\",\"throbberAttachment\",\"throbberOffset\",\"popoverTriangleClass\"],[\"label[for='featured'] p\",\"middle middle\",\"0px -20px\",\"bottom-right\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-post-settings-menu.hbs" } });
});
define("ghost-admin/templates/components/gh-posts-list-item", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "2DrsN7aS", "block": "{\"symbols\":[],\"statements\":[[6,\"h3\"],[10,\"class\",\"gh-content-entry-title\"],[8],[4,\"link-to\",[\"editor.edit\",[22,[\"post\",\"id\"]]],[[\"class\",\"title\"],[\"permalink\",\"Edit this post\"]],{\"statements\":[[1,[22,[\"post\",\"title\"]],false]],\"parameters\":[]},null],[9],[0,\"\\n\"],[6,\"p\"],[8],[1,[20,\"subText\"],false],[9],[0,\"\\n\\n\"],[6,\"section\"],[10,\"class\",\"gh-content-entry-meta\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"isPage\"]]],null,{\"statements\":[[0,\"        \"],[6,\"span\"],[10,\"class\",\"gh-content-status-draft gh-badge gh-badge-black\"],[8],[0,\"Page\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[22,[\"isScheduled\"]]],null,{\"statements\":[[0,\"        \"],[6,\"span\"],[10,\"class\",\"gh-content-status-draft gh-badge\"],[8],[0,\"Scheduled\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[22,[\"isDraft\"]]],null,{\"statements\":[[0,\"        \"],[6,\"span\"],[10,\"class\",\"gh-content-status-draft gh-badge gh-badge-red\"],[8],[0,\"Draft\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[22,[\"isFeatured\"]]],null,{\"statements\":[[0,\"        \"],[6,\"span\"],[10,\"class\",\"gh-content-status-featured gh-badge gh-badge-blue\"],[8],[0,\"Featured\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[26,\"and\",[[22,[\"isPublished\"]],[26,\"not\",[[22,[\"post\",\"page\"]]],null]],null]],null,{\"statements\":[[0,\"        \"],[6,\"span\"],[10,\"class\",\"gh-content-status-published\"],[8],[0,\"Published\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n    by \"],[6,\"span\"],[10,\"class\",\"gh-content-entry-author\"],[8],[1,[20,\"authorNames\"],false],[9],[0,\" —\\n\\n\"],[4,\"if\",[[22,[\"isPublished\"]]],null,{\"statements\":[[0,\"        \"],[1,[26,\"gh-format-post-time\",[[22,[\"post\",\"publishedAtUTC\"]]],[[\"published\"],[true]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[22,[\"isScheduled\"]]],null,{\"statements\":[[0,\"        \"],[6,\"span\"],[10,\"class\",\"green\"],[8],[0,\"Will go live \"],[1,[26,\"gh-format-post-time\",[[22,[\"post\",\"publishedAtUTC\"]]],[[\"scheduled\"],[true]]],false],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"        Last edited \"],[1,[26,\"gh-format-post-time\",[[22,[\"post\",\"updatedAtUTC\"]]],[[\"draft\"],[true]]],false],[0,\"\\n    \"]],\"parameters\":[]}]],\"parameters\":[]}],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-posts-list-item.hbs" } });
});
define("ghost-admin/templates/components/gh-profile-image", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "n50CNyft", "block": "{\"symbols\":[],\"statements\":[[6,\"figure\"],[10,\"class\",\"account-image\"],[8],[0,\"\\n\\n\"],[4,\"unless\",[[22,[\"previewDataURL\"]]],null,{\"statements\":[[0,\"        \"],[6,\"div\"],[10,\"class\",\"placeholder-img\"],[11,\"style\",[20,\"placeholderStyle\"],null],[8],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"id\",\"account-image\"],[10,\"class\",\"gravatar-img\"],[11,\"style\",[20,\"avatarStyle\"],null],[8],[0,\"\\n            \"],[6,\"span\"],[10,\"class\",\"sr-only\"],[8],[0,\"User image\"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[22,[\"previewDataURL\"]]],null,{\"statements\":[[0,\"        \"],[6,\"img\"],[11,\"src\",[20,\"previewDataURL\"],null],[10,\"class\",\"gravatar-img\"],[8],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n    \"],[6,\"span\"],[10,\"class\",\"edit-account-image\"],[11,\"onclick\",[26,\"action\",[[21,0,[]],\"openFileDialog\"],null],null],[10,\"role\",\"button\"],[8],[0,\"\\n        \"],[1,[26,\"svg-jar\",[\"photos\"],null],false],[0,\"\\n        \"],[6,\"span\"],[10,\"class\",\"sr-only\"],[8],[0,\"Upload an image\"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[1,[26,\"gh-file-input\",null,[[\"alt\",\"name\",\"multiple\",\"action\",\"accept\"],[null,\"uploadimage\",false,[26,\"action\",[[21,0,[]],\"imageSelected\"],null],[22,[\"imageMimeTypes\"]]]]],false],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-profile-image.hbs" } });
});
define("ghost-admin/templates/components/gh-progress-bar", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "BNTAx0Xp", "block": "{\"symbols\":[],\"statements\":[[6,\"div\"],[10,\"class\",\"gh-progress-container\"],[8],[0,\"\\n    \"],[6,\"div\"],[10,\"class\",\"gh-progress-container-progress\"],[8],[0,\"\\n        \"],[6,\"div\"],[11,\"class\",[27,[\"gh-progress-bar \",[26,\"if\",[[22,[\"isError\"]],\"-error\"],null]]]],[11,\"style\",[20,\"progressStyle\"],null],[10,\"data-test-progress-bar\",\"\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-progress-bar.hbs" } });
});
define("ghost-admin/templates/components/gh-psm-authors-input", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "wIbqPOh4", "block": "{\"symbols\":[],\"statements\":[[1,[26,\"gh-token-input\",null,[[\"options\",\"selected\",\"onchange\",\"allowCreation\",\"renderInPlace\",\"triggerId\"],[[22,[\"availableAuthors\"]],[22,[\"selectedAuthors\"]],[26,\"action\",[[21,0,[]],\"updateAuthors\"],null],false,true,[22,[\"triggerId\"]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-psm-authors-input.hbs" } });
});
define("ghost-admin/templates/components/gh-psm-tags-input", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "T/RDuODc", "block": "{\"symbols\":[],\"statements\":[[1,[26,\"gh-token-input\",null,[[\"extra\",\"onchange\",\"oncreate\",\"options\",\"renderInPlace\",\"selected\",\"showCreateWhen\",\"triggerId\"],[[26,\"hash\",null,[[\"tokenComponent\"],[\"gh-token-input/tag-token\"]]],[26,\"action\",[[21,0,[]],\"updateTags\"],null],[26,\"action\",[[21,0,[]],\"createTag\"],null],[22,[\"availableTags\"]],true,[22,[\"post\",\"tags\"]],[26,\"action\",[[21,0,[]],\"hideCreateOptionOnMatchingTag\"],null],[22,[\"triggerId\"]]]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-psm-tags-input.hbs" } });
});
define("ghost-admin/templates/components/gh-psm-template-select", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "APZai3jh", "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[22,[\"customTemplates\"]]],null,{\"statements\":[[0,\"    \"],[6,\"div\"],[10,\"class\",\"form-group for-select\"],[10,\"data-test-custom-template-form\",\"\"],[8],[0,\"\\n        \"],[6,\"label\"],[10,\"for\",\"author-list\"],[8],[0,\"Template\"],[9],[0,\"\\n        \"],[6,\"span\"],[10,\"class\",\"gh-input-icon gh-icon-user\"],[8],[0,\"\\n            \"],[1,[26,\"svg-jar\",[\"file-text-document\"],null],false],[0,\"\\n            \"],[6,\"span\"],[11,\"class\",[27,[\"gh-select \",[26,\"if\",[[22,[\"matchedSlugTemplate\"]],\"disabled\"],null]]]],[8],[0,\"\\n                \"],[1,[26,\"one-way-select\",[[22,[\"selectedTemplate\"]]],[[\"options\",\"optionValuePath\",\"optionLabelPath\",\"update\",\"disabled\",\"data-test-select\"],[[22,[\"customTemplates\"]],\"filename\",\"name\",[26,\"action\",[[21,0,[]],\"selectTemplate\"],null],[22,[\"matchedSlugTemplate\"]],\"custom-template\"]]],false],[0,\"\\n                \"],[1,[26,\"svg-jar\",[\"arrow-down-small\"],null],false],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"],[4,\"if\",[[22,[\"matchedSlugTemplate\"]]],null,{\"statements\":[[0,\"            \"],[6,\"p\"],[8],[0,\"Post URL matches \"],[1,[22,[\"matchedSlugTemplate\",\"filename\"]],false],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-psm-template-select.hbs" } });
});
define("ghost-admin/templates/components/gh-publishmenu-draft", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "piKZzZw4", "block": "{\"symbols\":[],\"statements\":[[6,\"header\"],[10,\"class\",\"gh-publishmenu-heading\"],[8],[0,\"Ready to publish your post?\"],[9],[0,\"\\n\"],[6,\"section\"],[10,\"class\",\"gh-publishmenu-content\"],[8],[0,\"\\n    \"],[6,\"div\"],[11,\"class\",[27,[\"gh-publishmenu-radio \",[26,\"if\",[[26,\"eq\",[[22,[\"saveType\"]],\"publish\"],null],\"active\"],null]]]],[3,\"action\",[[21,0,[]],\"setSaveType\",\"publish\"],[[\"on\"],[\"click\"]]],[8],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-publishmenu-radio-button\"],[10,\"data-test-publishmenu-published-option\",\"\"],[8],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-publishmenu-radio-content\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-publishmenu-radio-label\"],[8],[0,\"Set it live now\"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-publishmenu-radio-desc\"],[8],[0,\"Publish this post immediately\"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n    \"],[6,\"div\"],[11,\"class\",[27,[\"gh-publishmenu-radio \",[26,\"if\",[[26,\"eq\",[[22,[\"saveType\"]],\"schedule\"],null],\"active\"],null]]]],[3,\"action\",[[21,0,[]],\"setSaveType\",\"schedule\"],[[\"on\"],[\"click\"]]],[8],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-publishmenu-radio-button\"],[10,\"data-test-publishmenu-scheduled-option\",\"\"],[8],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-publishmenu-radio-content\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-publishmenu-radio-label\"],[8],[0,\"Schedule it for later\"],[9],[0,\"\\n            \"],[1,[26,\"gh-date-time-picker\",null,[[\"date\",\"time\",\"setDate\",\"setTime\",\"errors\",\"dateErrorProperty\",\"timeErrorProperty\",\"minDate\"],[[22,[\"post\",\"publishedAtBlogDate\"]],[22,[\"post\",\"publishedAtBlogTime\"]],[26,\"action\",[[21,0,[]],\"setDate\"],null],[26,\"action\",[[21,0,[]],\"setTime\"],null],[22,[\"post\",\"errors\"]],\"publishedAtBlogDate\",\"publishedAtBlogTime\",[22,[\"_minDate\"]]]]],false],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-publishmenu-radio-desc\"],[8],[0,\"Set automatic future publish date\"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-publishmenu-draft.hbs" } });
});
define("ghost-admin/templates/components/gh-publishmenu-published", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "FcNaS1p0", "block": "{\"symbols\":[],\"statements\":[[6,\"header\"],[10,\"class\",\"gh-publishmenu-heading\"],[8],[0,\"Update post status\"],[9],[0,\"\\n\"],[6,\"section\"],[10,\"class\",\"gh-publishmenu-content\"],[8],[0,\"\\n    \"],[6,\"div\"],[11,\"class\",[27,[\"gh-publishmenu-radio \",[26,\"if\",[[26,\"eq\",[[22,[\"saveType\"]],\"draft\"],null],\"active\"],null]]]],[3,\"action\",[[21,0,[]],[22,[\"setSaveType\"]],\"draft\"],[[\"on\"],[\"click\"]]],[8],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-publishmenu-radio-button\"],[10,\"data-test-publishmenu-unpublished-option\",\"\"],[8],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-publishmenu-radio-content\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-publishmenu-radio-label\"],[8],[0,\"Unpublished\"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-publishmenu-radio-desc\"],[8],[0,\"Revert this post to a private draft\"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n    \"],[6,\"div\"],[11,\"class\",[27,[\"gh-publishmenu-radio \",[26,\"if\",[[26,\"eq\",[[22,[\"saveType\"]],\"publish\"],null],\"active\"],null]]]],[3,\"action\",[[21,0,[]],[22,[\"setSaveType\"]],\"publish\"],[[\"on\"],[\"click\"]]],[8],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-publishmenu-radio-button\"],[10,\"data-test-publishmenu-published-option\",\"\"],[8],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-publishmenu-radio-content\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-publishmenu-radio-label\"],[8],[0,\"Published\"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-publishmenu-radio-desc\"],[8],[0,\"Display this post publicly\"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-publishmenu-published.hbs" } });
});
define("ghost-admin/templates/components/gh-publishmenu-scheduled", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "HYtv0Nqv", "block": "{\"symbols\":[],\"statements\":[[6,\"header\"],[10,\"class\",\"gh-publishmenu-heading\"],[8],[0,\"Will be published in \"],[1,[20,\"timeToPublished\"],false],[9],[0,\"\\n\"],[6,\"section\"],[10,\"class\",\"gh-publishmenu-content\"],[8],[0,\"\\n    \"],[6,\"div\"],[11,\"class\",[27,[\"gh-publishmenu-radio \",[26,\"if\",[[26,\"eq\",[[22,[\"saveType\"]],\"draft\"],null],\"active\"],null]]]],[3,\"action\",[[21,0,[]],\"setSaveType\",\"draft\"],[[\"on\"],[\"click\"]]],[8],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-publishmenu-radio-button\"],[10,\"data-test-publishmenu-draft-option\",\"\"],[8],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-publishmenu-radio-content\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-publishmenu-radio-label\"],[8],[0,\"Revert to draft\"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-publishmenu-radio-desc\"],[8],[0,\"Do not publish\"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n    \"],[6,\"div\"],[11,\"class\",[27,[\"gh-publishmenu-radio \",[26,\"if\",[[26,\"eq\",[[22,[\"saveType\"]],\"schedule\"],null],\"active\"],null]]]],[3,\"action\",[[21,0,[]],\"setSaveType\",\"schedule\"],[[\"on\"],[\"click\"]]],[8],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-publishmenu-radio-button\"],[10,\"data-test-publishmenu-scheduled-option\",\"\"],[8],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-publishmenu-radio-content\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-publishmenu-radio-label\"],[8],[0,\"Schedule for later\"],[9],[0,\"\\n            \"],[1,[26,\"gh-date-time-picker\",null,[[\"date\",\"time\",\"setDate\",\"setTime\",\"errors\",\"dateErrorProperty\",\"timeErrorProperty\",\"minDate\"],[[22,[\"post\",\"publishedAtBlogDate\"]],[22,[\"post\",\"publishedAtBlogTime\"]],[26,\"action\",[[21,0,[]],\"setDate\"],null],[26,\"action\",[[21,0,[]],\"setTime\"],null],[22,[\"post\",\"errors\"]],\"publishedAtBlogDate\",\"publishedAtBlogTime\",[22,[\"_minDate\"]]]]],false],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-publishmenu-radio-desc\"],[8],[0,\"Set automatic future publish date\"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-publishmenu-scheduled.hbs" } });
});
define("ghost-admin/templates/components/gh-publishmenu", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "wcU/4hkn", "block": "{\"symbols\":[\"dd\"],\"statements\":[[4,\"basic-dropdown\",null,[[\"verticalPosition\",\"onOpen\",\"onClose\"],[\"below\",[26,\"action\",[[21,0,[]],\"open\"],null],[26,\"action\",[[21,0,[]],\"close\"],null]]],{\"statements\":[[4,\"component\",[[21,1,[\"trigger\"]]],[[\"class\"],[\"gh-btn gh-btn-outline gh-publishmenu-trigger\"]],{\"statements\":[[0,\"        \"],[6,\"span\"],[10,\"data-test-publishmenu-trigger\",\"\"],[8],[1,[20,\"triggerText\"],false],[0,\" \"],[1,[26,\"svg-jar\",[\"arrow-down\"],null],false],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"component\",[[21,1,[\"content\"]]],[[\"class\"],[\"gh-publishmenu-dropdown\"]],{\"statements\":[[4,\"if\",[[26,\"eq\",[[22,[\"displayState\"]],\"published\"],null]],null,{\"statements\":[[0,\"        \"],[1,[26,\"gh-publishmenu-published\",null,[[\"saveType\",\"setSaveType\"],[[22,[\"saveType\"]],[26,\"action\",[[21,0,[]],\"setSaveType\"],null]]]],false],[0,\"\\n\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[26,\"eq\",[[22,[\"displayState\"]],\"scheduled\"],null]],null,{\"statements\":[[0,\"        \"],[1,[26,\"gh-publishmenu-scheduled\",null,[[\"post\",\"saveType\",\"isClosing\",\"setSaveType\"],[[22,[\"post\"]],[22,[\"saveType\"]],[22,[\"isClosing\"]],[26,\"action\",[[21,0,[]],\"setSaveType\"],null]]]],false],[0,\"\\n\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"        \"],[1,[26,\"gh-publishmenu-draft\",null,[[\"post\",\"saveType\",\"setSaveType\"],[[22,[\"post\"]],[22,[\"saveType\"]],[26,\"action\",[[21,0,[]],\"setSaveType\"],null]]]],false],[0,\"\\n        \"]],\"parameters\":[]}]],\"parameters\":[]}],[0,\"\\n\"],[0,\"        \"],[6,\"footer\"],[10,\"class\",\"gh-publishmenu-footer\"],[8],[0,\"\\n            \"],[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-outline gh-btn-link\"],[10,\"data-test-publishmenu-cancel\",\"\"],[3,\"action\",[[21,0,[]],[21,1,[\"actions\",\"close\"]]]],[8],[0,\"\\n                \"],[6,\"span\"],[8],[0,\"Cancel\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[1,[26,\"gh-task-button\",[[22,[\"buttonText\"]]],[[\"task\",\"successText\",\"runningText\",\"class\",\"data-test-publishmenu-save\"],[[22,[\"save\"]],[22,[\"successText\"]],[22,[\"runningText\"]],\"gh-btn gh-btn-blue gh-publishmenu-button gh-btn-icon\",true]]],false],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[1]},null]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-publishmenu.hbs" } });
});
define("ghost-admin/templates/components/gh-scheduled-post-countdown", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "+4Um5eMV", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[22,[\"countdown\"]]],null,{\"statements\":[[0,\"    \"],[13,1,[[22,[\"post\"]],[22,[\"countdown\"]]]],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-scheduled-post-countdown.hbs" } });
});
define("ghost-admin/templates/components/gh-scroll-trigger", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "uUR+Zl7U", "block": "{\"symbols\":[\"&default\"],\"statements\":[[13,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-scroll-trigger.hbs" } });
});
define("ghost-admin/templates/components/gh-search-input-trigger", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "tcV+oQCq", "block": "{\"symbols\":[],\"statements\":[[6,\"div\"],[10,\"class\",\"ember-power-select-search\"],[11,\"onmousedown\",[26,\"action\",[[21,0,[]],\"captureMouseDown\"],null],null],[8],[0,\"\\n    \"],[6,\"input\"],[10,\"autocomplete\",\"off\"],[10,\"autocorrect\",\"off\"],[10,\"autocapitalize\",\"off\"],[11,\"value\",[26,\"if\",[[22,[\"extra\",\"labelPath\"]],[26,\"get\",[[22,[\"selected\"]],[22,[\"extra\",\"labelPath\"]]],null],[22,[\"selected\"]]],null],null],[10,\"spellcheck\",\"false\"],[10,\"role\",\"combobox\"],[11,\"placeholder\",[20,\"placeholder\"],null],[11,\"oninput\",[26,\"action\",[[21,0,[]],\"search\"],[[\"value\"],[\"target.value\"]]],null],[11,\"onmousedown\",[26,\"action\",[[21,0,[]],\"captureMouseDown\"],null],null],[11,\"onkeydown\",[26,\"action\",[[21,0,[]],\"handleKeydown\"],null],null],[11,\"onblur\",[26,\"action\",[[21,0,[]],\"resetInput\"],null],null],[10,\"type\",\"search\"],[8],[9],[0,\"\\n    \"],[6,\"button\"],[10,\"class\",\"gh-nav-search-button\"],[3,\"action\",[[21,0,[]],\"focusInput\"]],[8],[1,[26,\"svg-jar\",[\"search\"],null],false],[6,\"span\"],[10,\"class\",\"sr-only\"],[8],[0,\"Search\"],[9],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-search-input-trigger.hbs" } });
});
define("ghost-admin/templates/components/gh-search-input", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "wnFu1UDI", "block": "{\"symbols\":[\"name\",\"select\"],\"statements\":[[4,\"power-select\",null,[[\"search\",\"onchange\",\"placeholder\",\"onopen\",\"onclose\",\"searchEnabled\",\"triggerComponent\",\"renderInPlace\",\"loadingMessage\"],[[26,\"action\",[[21,0,[]],\"search\"],null],[26,\"action\",[[21,0,[]],\"openSelected\"],null],\"Search\",[26,\"action\",[[21,0,[]],\"onFocus\"],null],[26,\"action\",[[21,0,[]],\"onBlur\"],null],false,\"gh-search-input-trigger\",true,\"Loading\"]],{\"statements\":[[0,\"    \"],[1,[26,\"highlighted-text\",[[21,1,[\"title\"]],[21,2,[\"searchText\"]]],null],false],[0,\"\\n\"]],\"parameters\":[1,2]},null]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-search-input.hbs" } });
});
define("ghost-admin/templates/components/gh-simplemde", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "VN2NEvuV", "block": "{\"symbols\":[\"&default\"],\"statements\":[[13,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-simplemde.hbs" } });
});
define("ghost-admin/templates/components/gh-subscribers-table-delete-cell", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "0jh/asNj", "block": "{\"symbols\":[],\"statements\":[[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-link gh-btn-sm\"],[3,\"action\",[[21,0,[]],[22,[\"tableActions\",\"delete\"]],[22,[\"row\",\"content\"]]]],[8],[6,\"span\"],[8],[1,[26,\"svg-jar\",[\"trash\"],null],false],[9],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-subscribers-table-delete-cell.hbs" } });
});
define("ghost-admin/templates/components/gh-subscribers-table", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "PHxbADev", "block": "{\"symbols\":[\"t\",\"body\"],\"statements\":[[4,\"light-table\",[[22,[\"table\"]]],[[\"scrollBuffer\"],[100]],{\"statements\":[[0,\"    \"],[1,[26,\"component\",[[21,1,[\"head\"]]],[[\"onColumnClick\",\"iconAscending\",\"iconDescending\"],[[26,\"action\",[[21,0,[]],[22,[\"sortByColumn\"]]],null],\"gh-icon-ascending\",\"gh-icon-descending\"]]],false],[0,\"\\n\\n\"],[4,\"component\",[[21,1,[\"body\"]]],[[\"canSelect\",\"tableActions\",\"scrollBuffer\",\"onScrolledToBottom\"],[false,[26,\"hash\",null,[[\"delete\"],[[22,[\"delete\"]]]]],100,[26,\"action\",[[21,0,[]],\"onScrolledToBottom\"],null]]],{\"statements\":[[4,\"if\",[[22,[\"isLoading\"]]],null,{\"statements\":[[4,\"component\",[[21,2,[\"loader\"]]],null,{\"statements\":[[0,\"                \"],[6,\"div\"],[10,\"class\",\"gh-loading-content\"],[10,\"style\",\"margin-top: 2em;\"],[8],[0,\"\\n                    \"],[6,\"div\"],[10,\"class\",\"gh-loading-spinner\"],[8],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[22,[\"table\",\"isEmpty\"]]],null,{\"statements\":[[4,\"component\",[[21,2,[\"no-data\"]]],null,{\"statements\":[[0,\"                    No subscribers found.\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null]],\"parameters\":[]}]],\"parameters\":[2]},null]],\"parameters\":[1]},null]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-subscribers-table.hbs" } });
});
define("ghost-admin/templates/components/gh-tag-settings-form", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "MuXEPg9r", "block": "{\"symbols\":[],\"statements\":[[6,\"div\"],[11,\"class\",[27,[[26,\"if\",[[22,[\"isViewingSubview\"]],\"settings-menu-pane-out-left\",\"settings-menu-pane-in\"],null],\" settings-menu settings-menu-pane tag-settings-pane\"]]],[8],[0,\"\\n    \"],[6,\"div\"],[11,\"class\",[27,[\"settings-menu-header \",[26,\"if\",[[22,[\"isMobile\"]],\"subview\"],null]]]],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"isMobile\"]]],null,{\"statements\":[[0,\"            \"],[4,\"link-to\",[\"settings.tags\"],[[\"class\"],[\"back settings-menu-header-action\"]],{\"statements\":[[1,[26,\"svg-jar\",[\"arrow-left\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Back\"],[9]],\"parameters\":[]},null],[0,\"\\n            \"],[6,\"h4\"],[8],[1,[20,\"title\"],false],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"style\",\"width:23px;\"],[8],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"            \"],[6,\"h4\"],[8],[1,[20,\"title\"],false],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"    \"],[9],[0,\"\\n    \"],[6,\"div\"],[10,\"class\",\"settings-menu-content\"],[8],[0,\"\\n        \"],[1,[26,\"gh-image-uploader-with-preview\",null,[[\"image\",\"text\",\"allowUnsplash\",\"update\",\"remove\"],[[22,[\"tag\",\"featureImage\"]],\"Upload tag image\",true,[26,\"action\",[[21,0,[]],\"setCoverImage\"],null],[26,\"action\",[[21,0,[]],\"clearCoverImage\"],null]]]],false],[0,\"\\n        \"],[6,\"form\"],[8],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"tag\",\"errors\"]],[22,[\"tag\",\"hasValidated\"]],\"name\"]],{\"statements\":[[0,\"                \"],[6,\"label\"],[10,\"for\",\"tag-name\"],[8],[0,\"Name\"],[9],[0,\"\\n                \"],[1,[26,\"gh-text-input\",null,[[\"id\",\"name\",\"value\",\"input\",\"focus-out\"],[\"tag-name\",\"name\",[26,\"readonly\",[[22,[\"scratchName\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"scratchName\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"setProperty\",\"name\",[22,[\"scratchName\"]]],null]]]],false],[0,\"\\n                \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"tag\",\"errors\"]],\"name\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"tag\",\"errors\"]],[22,[\"tag\",\"hasValidated\"]],\"slug\"]],{\"statements\":[[0,\"                \"],[6,\"label\"],[10,\"for\",\"tag-slug\"],[8],[0,\"URL\"],[9],[0,\"\\n                \"],[1,[26,\"gh-text-input\",null,[[\"value\",\"id\",\"name\",\"focus-out\",\"input\"],[[26,\"readonly\",[[22,[\"scratchSlug\"]]],null],\"tag-slug\",\"slug\",[26,\"action\",[[21,0,[]],\"setProperty\",\"slug\",[22,[\"scratchSlug\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"scratchSlug\"]]],null]],[[\"value\"],[\"target.value\"]]]]]],false],[0,\"\\n                \"],[1,[26,\"gh-url-preview\",null,[[\"prefix\",\"slug\",\"tagName\",\"classNames\"],[\"tag\",[22,[\"scratchSlug\"]],\"p\",\"description\"]]],false],[0,\"\\n                \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"activeTag\",\"errors\"]],\"slug\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"tag\",\"errors\"]],[22,[\"tag\",\"hasValidated\"]],\"description\"]],{\"statements\":[[0,\"                \"],[6,\"label\"],[10,\"for\",\"tag-description\"],[8],[0,\"Description\"],[9],[0,\"\\n                \"],[1,[26,\"gh-textarea\",null,[[\"id\",\"name\",\"value\",\"input\",\"focus-out\"],[\"tag-description\",\"description\",[26,\"readonly\",[[22,[\"scratchDescription\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"scratchDescription\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"setProperty\",\"description\",[22,[\"scratchDescription\"]]],null]]]],false],[0,\"\\n                \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"tag\",\"errors\"]],\"description\"]]],false],[0,\"\\n                \"],[6,\"p\"],[8],[0,\"Maximum: \"],[6,\"b\"],[8],[0,\"500\"],[9],[0,\" characters. You’ve used \"],[1,[26,\"gh-count-down-characters\",[[22,[\"scratchDescription\"]],500],null],false],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n            \"],[6,\"ul\"],[10,\"class\",\"nav-list nav-list-block\"],[8],[0,\"\\n                \"],[6,\"li\"],[10,\"class\",\"nav-list-item\"],[3,\"action\",[[21,0,[]],\"openMeta\"]],[8],[0,\"\\n                    \"],[6,\"button\"],[10,\"class\",\"meta-data-button\"],[10,\"type\",\"button\"],[8],[0,\"\\n                        \"],[6,\"b\"],[8],[0,\"Meta Data\"],[9],[0,\"\\n                        \"],[6,\"span\"],[8],[0,\"Extra content for SEO and social media.\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[1,[26,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\\n\"],[4,\"unless\",[[22,[\"tag\",\"isNew\"]]],null,{\"statements\":[[0,\"                \"],[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-link gh-btn-sm gh-btn-icon settings-menu-delete-button\"],[10,\"type\",\"button\"],[3,\"action\",[[21,0,[]],\"deleteTag\"]],[8],[6,\"span\"],[8],[1,[26,\"svg-jar\",[\"trash\"],null],false],[0,\" Delete Tag\"],[9],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[6,\"div\"],[11,\"class\",[27,[[26,\"if\",[[22,[\"isViewingSubview\"]],\"settings-menu-pane-in\",\"settings-menu-pane-out-right\"],null],\" settings-menu settings-menu-pane tag-meta-settings-pane\"]]],[8],[0,\"\\n    \"],[6,\"div\"],[10,\"class\",\"settings-menu-header subview\"],[8],[0,\"\\n        \"],[6,\"button\"],[10,\"class\",\"back settings-menu-header-action\"],[3,\"action\",[[21,0,[]],\"closeMeta\"]],[8],[1,[26,\"svg-jar\",[\"arrow-left\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Back\"],[9],[9],[0,\"\\n        \"],[6,\"h4\"],[8],[0,\"Meta Data\"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"style\",\"width:23px;\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[6,\"div\"],[10,\"class\",\"settings-menu-content\"],[8],[0,\"\\n        \"],[6,\"form\"],[8],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"tag\",\"errors\"]],[22,[\"tag\",\"hasValidated\"]],\"metaTitle\"]],{\"statements\":[[0,\"                \"],[6,\"label\"],[10,\"for\",\"meta-title\"],[8],[0,\"Meta Title\"],[9],[0,\"\\n                \"],[1,[26,\"gh-text-input\",null,[[\"id\",\"name\",\"value\",\"input\",\"focus-out\"],[\"meta-title\",\"metaTitle\",[26,\"readonly\",[[22,[\"scratchMetaTitle\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"scratchMetaTitle\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"setProperty\",\"metaTitle\",[22,[\"scratchMetaTitle\"]]],null]]]],false],[0,\"\\n                \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"tag\",\"errors\"]],\"metaTitle\"]]],false],[0,\"\\n                \"],[6,\"p\"],[8],[0,\"Recommended: \"],[6,\"b\"],[8],[0,\"70\"],[9],[0,\" characters. You’ve used \"],[1,[26,\"gh-count-down-characters\",[[22,[\"scratchMetaTitle\"]],70],null],false],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"tag\",\"errors\"]],[22,[\"tag\",\"hasValidated\"]],\"metaDescription\"]],{\"statements\":[[0,\"                \"],[6,\"label\"],[10,\"for\",\"meta-description\"],[8],[0,\"Meta Description\"],[9],[0,\"\\n                \"],[1,[26,\"gh-textarea\",null,[[\"id\",\"name\",\"value\",\"input\",\"focus-out\"],[\"meta-description\",\"metaDescription\",[26,\"readonly\",[[22,[\"scratchMetaDescription\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"scratchMetaDescription\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"setProperty\",\"metaDescription\",[22,[\"scratchMetaDescription\"]]],null]]]],false],[0,\"\\n                \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"tag\",\"errors\"]],\"metaDescription\"]]],false],[0,\"\\n                \"],[6,\"p\"],[8],[0,\"Recommended: \"],[6,\"b\"],[8],[0,\"156\"],[9],[0,\" characters. You’ve used \"],[1,[26,\"gh-count-down-characters\",[[22,[\"scratchMetaDescription\"]],156],null],false],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"form-group\"],[8],[0,\"\\n                \"],[6,\"label\"],[8],[0,\"Search Engine Result Preview\"],[9],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"seo-preview\"],[8],[0,\"\\n                    \"],[6,\"div\"],[10,\"class\",\"seo-preview-title\"],[8],[1,[20,\"seoTitle\"],false],[9],[0,\"\\n                    \"],[6,\"div\"],[10,\"class\",\"seo-preview-link\"],[8],[1,[20,\"seoURL\"],false],[9],[0,\"\\n                    \"],[6,\"div\"],[10,\"class\",\"seo-preview-description\"],[8],[1,[20,\"seoDescription\"],false],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-tag-settings-form.hbs" } });
});
define("ghost-admin/templates/components/gh-tag", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "HXNx7S7N", "block": "{\"symbols\":[],\"statements\":[[6,\"div\"],[10,\"class\",\"settings-tag\"],[11,\"id\",[27,[\"gh-tag-\",[22,[\"tag\",\"id\"]]]]],[8],[0,\"\\n\"],[4,\"link-to\",[\"settings.tags.tag\",[22,[\"tag\"]]],[[\"class\"],[\"tag-edit-button\"]],{\"statements\":[[0,\"        \"],[6,\"span\"],[10,\"class\",\"tag-title\"],[8],[1,[22,[\"tag\",\"name\"]],false],[9],[0,\"\\n        \"],[6,\"span\"],[10,\"class\",\"label label-default\"],[8],[0,\"/\"],[1,[22,[\"tag\",\"slug\"]],false],[9],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"tag\",\"isInternal\"]]],null,{\"statements\":[[0,\"            \"],[6,\"span\"],[10,\"class\",\"label label-blue\"],[8],[0,\"internal\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n        \"],[6,\"p\"],[10,\"class\",\"tag-description\"],[8],[1,[22,[\"tag\",\"description\"]],false],[9],[0,\"\\n        \"],[6,\"span\"],[10,\"class\",\"tags-count\"],[8],[0,\"\\n\"],[4,\"link-to\",[\"posts\",[26,\"query-params\",null,[[\"type\",\"author\",\"tag\",\"order\"],[null,null,[22,[\"tag\",\"slug\"]],null]]]],null,{\"statements\":[[0,\"                \"],[1,[22,[\"tag\",\"count\",\"posts\"]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-tag.hbs" } });
});
define("ghost-admin/templates/components/gh-tags-management-container", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "iapGz0Iy", "block": "{\"symbols\":[\"&default\"],\"statements\":[[13,1,[[21,0,[]]]],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-tags-management-container.hbs" } });
});
define("ghost-admin/templates/components/gh-task-button", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "ibLmr4b2", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[23,1]],null,{\"statements\":[[0,\"    \"],[13,1,[[26,\"hash\",null,[[\"isIdle\",\"isRunning\",\"isSuccess\",\"isFailure\"],[[22,[\"isIdle\"]],[22,[\"isRunning\"]],[22,[\"isSuccess\"]],[22,[\"isFailure\"]]]]]]],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[6,\"span\"],[8],[0,\"\\n    \"],[4,\"if\",[[22,[\"isRunning\"]]],null,{\"statements\":[[1,[26,\"svg-jar\",[\"spinner\"],[[\"class\"],[\"gh-icon-spinner\"]]],false],[1,[20,\"runningText\"],false]],\"parameters\":[]},null],[0,\"\\n    \"],[4,\"if\",[[22,[\"isIdle\"]]],null,{\"statements\":[[1,[20,\"buttonText\"],false]],\"parameters\":[]},null],[0,\"\\n    \"],[4,\"if\",[[22,[\"isSuccess\"]]],null,{\"statements\":[[1,[26,\"svg-jar\",[\"check-circle\"],null],false],[0,\" \"],[1,[20,\"successText\"],false]],\"parameters\":[]},null],[0,\"\\n    \"],[4,\"if\",[[22,[\"isFailure\"]]],null,{\"statements\":[[1,[26,\"svg-jar\",[\"retry\"],null],false],[0,\" \"],[1,[20,\"failureText\"],false]],\"parameters\":[]},null],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-task-button.hbs" } });
});
define("ghost-admin/templates/components/gh-text-input", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "QPvKwRQf", "block": "{\"symbols\":[\"&default\"],\"statements\":[[13,1]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-text-input.hbs" } });
});
define("ghost-admin/templates/components/gh-theme-error-li", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "PmvJisxE", "block": "{\"symbols\":[\"failure\"],\"statements\":[[6,\"a\"],[10,\"href\",\"\"],[10,\"class\",\"theme-validation-toggle-details\"],[10,\"data-test-toggle-details\",\"\"],[3,\"action\",[[21,0,[]],\"toggleDetails\"]],[8],[0,\"\\n    \"],[6,\"h4\"],[10,\"class\",\"theme-validation-rule-text\"],[8],[0,\"\\n        \"],[1,[22,[\"error\",\"rule\"]],true],[0,\"\\n    \"],[9],[0,\"\\n    \"],[6,\"div\"],[10,\"class\",\"theme-validation-rule-icon\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"showDetails\"]]],null,{\"statements\":[[0,\"            \"],[1,[26,\"svg-jar\",[\"arrow-down\"],null],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"            \"],[1,[26,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n\"]],\"parameters\":[]}],[0,\"    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"showDetails\"]]],null,{\"statements\":[[0,\"    \"],[6,\"p\"],[10,\"class\",\"theme-validation-details\"],[8],[0,\"\\n        \"],[1,[22,[\"error\",\"details\"]],true],[0,\"\\n    \"],[9],[0,\"\\n\"],[4,\"if\",[[22,[\"error\",\"failures\"]]],null,{\"statements\":[[0,\"        \"],[6,\"div\"],[10,\"class\",\"theme-validation-list\"],[8],[0,\"\\n            \"],[6,\"h6\"],[8],[0,\"Affected files:\"],[9],[0,\"\\n            \"],[6,\"ul\"],[8],[0,\"\\n\"],[4,\"each\",[[22,[\"error\",\"failures\"]]],null,{\"statements\":[[0,\"                    \"],[6,\"li\"],[8],[6,\"code\"],[8],[1,[21,1,[\"ref\"]],false],[9],[4,\"if\",[[21,1,[\"message\"]]],null,{\"statements\":[[0,\": \"],[1,[21,1,[\"message\"]],false]],\"parameters\":[]},null],[9],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-theme-error-li.hbs" } });
});
define("ghost-admin/templates/components/gh-theme-table", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "RfAAZ85j", "block": "{\"symbols\":[\"theme\"],\"statements\":[[6,\"div\"],[10,\"class\",\"apps-grid\"],[10,\"data-test-themes-list\",\"\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"sortedThemes\"]]],null,{\"statements\":[[0,\"\\n\"],[4,\"each\",[[22,[\"sortedThemes\"]]],null,{\"statements\":[[0,\"    \"],[6,\"div\"],[10,\"class\",\"apps-grid-cell\"],[11,\"data-test-theme-id\",[27,[[21,1,[\"name\"]]]]],[11,\"data-test-theme-active\",[27,[[21,1,[\"active\"]]]]],[8],[0,\"\\n        \"],[6,\"div\"],[11,\"class\",[27,[\"apps-card-app \",[26,\"if\",[[21,1,[\"active\"]],\"theme-list-item--active\"],null]]]],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"apps-card-left\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"apps-card-meta\"],[8],[0,\"\\n                    \"],[6,\"h3\"],[10,\"class\",\"apps-card-app-title\"],[10,\"data-test-theme-title\",\"\"],[8],[1,[21,1,[\"label\"]],false],[9],[0,\"\\n                    \"],[6,\"p\"],[10,\"class\",\"apps-card-app-desc\"],[10,\"data-test-theme-description\",\"\"],[8],[6,\"span\"],[10,\"class\",\"description\"],[8],[0,\"Version \"],[1,[21,1,[\"version\"]],false],[9],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"apps-card-right\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"apps-configured\"],[8],[0,\"\\n\"],[4,\"if\",[[21,1,[\"isDeletable\"]]],null,{\"statements\":[[0,\"                        \"],[6,\"a\"],[10,\"href\",\"#\"],[11,\"disabled\",[21,1,[\"active\"]],null],[10,\"class\",\"apps-configured-action red-hover\"],[10,\"data-test-theme-delete-button\",\"\"],[3,\"action\",[[21,0,[]],[22,[\"deleteTheme\"]],[21,1,[]]]],[8],[0,\"Delete\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                    \"],[6,\"a\"],[10,\"href\",\"#\"],[10,\"class\",\"apps-configured-action darkgrey-hover\"],[10,\"data-test-theme-download-button\",\"\"],[3,\"action\",[[21,0,[]],[22,[\"downloadTheme\"]],[21,1,[]]]],[8],[0,\"Download\"],[9],[0,\"\\n\"],[4,\"if\",[[21,1,[\"active\"]]],null,{\"statements\":[[0,\"                        \"],[6,\"span\"],[10,\"class\",\"gh-badge gh-badge-black apps-configured-action\"],[10,\"data-test-theme-badge\",\"\"],[8],[0,\"Active\"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                        \"],[6,\"a\"],[10,\"href\",\"#\"],[10,\"class\",\"apps-configured-action apps-configured-action-activate green-hover\"],[10,\"data-test-theme-activate-button\",\"\"],[3,\"action\",[[21,0,[]],[22,[\"activateTheme\"]],[21,1,[\"model\"]]]],[8],[0,\"\\n                            Activate\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[6,\"div\"],[10,\"class\",\"apps-card-app\"],[8],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"apps-card-left\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"apps-card-meta\"],[8],[0,\"\\n                \"],[6,\"h3\"],[10,\"class\",\"apps-card-app-title\"],[8],[0,\"No themes found\"],[9],[0,\"\\n                \"],[6,\"p\"],[10,\"class\",\"apps-card-app-desc\"],[8],[6,\"span\"],[10,\"class\",\"description\"],[8],[0,\"Please upload a theme to continue\"],[9],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-theme-table.hbs" } });
});
define("ghost-admin/templates/components/gh-timezone-select", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "2NoxS2Du", "block": "{\"symbols\":[],\"statements\":[[6,\"span\"],[10,\"class\",\"gh-select\"],[11,\"data-select-text\",[27,[[22,[\"selectedTimezone\",\"label\"]]]]],[10,\"tabindex\",\"0\"],[8],[0,\"\\n    \"],[1,[26,\"one-way-select\",null,[[\"id\",\"name\",\"options\",\"optionValuePath\",\"optionLabelPath\",\"value\",\"update\"],[\"activeTimezone\",\"general[activeTimezone]\",[22,[\"selectableTimezones\"]],\"name\",\"label\",[22,[\"selectedTimezone\"]],[26,\"action\",[[21,0,[]],\"setTimezone\"],null]]]],false],[0,\"\\n    \"],[1,[26,\"svg-jar\",[\"arrow-down-small\"],null],false],[0,\"\\n\"],[9],[0,\"\\n\"],[4,\"if\",[[22,[\"hasTimezoneOverride\"]]],null,{\"statements\":[[0,\"    \"],[6,\"p\"],[8],[0,\"Your timezone has been automatically set to \"],[1,[20,\"activeTimezone\"],false],[0,\".\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[6,\"p\"],[8],[0,\"The local time here is currently \"],[1,[20,\"localTime\"],false],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-timezone-select.hbs" } });
});
define("ghost-admin/templates/components/gh-token-input", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "1bEwt9ID", "block": "{\"symbols\":[\"option\",\"term\"],\"statements\":[[4,\"gh-token-input/select-multiple\",null,[[\"afterOptionsComponent\",\"allowClear\",\"ariaDescribedBy\",\"ariaInvalid\",\"ariaLabel\",\"ariaLabelledBy\",\"beforeOptionsComponent\",\"class\",\"closeOnSelect\",\"defaultHighlighted\",\"destination\",\"dir\",\"disabled\",\"dropdownClass\",\"extra\",\"horizontalPosition\",\"initiallyOpened\",\"loadingMessage\",\"matcher\",\"matchTriggerWidth\",\"noMatchesMessage\",\"onblur\",\"onchange\",\"onclose\",\"onfocus\",\"oninput\",\"onkeydown\",\"onopen\",\"options\",\"optionsComponent\",\"placeholder\",\"registerAPI\",\"renderInPlace\",\"search\",\"searchEnabled\",\"searchField\",\"searchMessage\",\"searchPlaceholder\",\"selected\",\"selectedItemComponent\",\"tabindex\",\"triggerClass\",\"triggerComponent\",\"triggerId\",\"verticalPosition\",\"data-test-token-input\"],[[22,[\"afterOptionsComponent\"]],[22,[\"allowClear\"]],[22,[\"ariaDescribedBy\"]],[22,[\"ariaInvalid\"]],[22,[\"ariaLabel\"]],[22,[\"ariaLabelledBy\"]],[22,[\"beforeOptionsComponent\"]],[26,\"concat\",[\"gh-token-input \",[22,[\"class\"]]],null],[22,[\"closeOnSelect\"]],[22,[\"defaultHighlighted\"]],[22,[\"destination\"]],[22,[\"dir\"]],[22,[\"disabled\"]],[22,[\"dropdownClass\"]],[22,[\"extra\"]],[22,[\"horizontalPosition\"]],[22,[\"initiallyOpened\"]],[22,[\"loadingMessage\"]],[22,[\"matcher\"]],[22,[\"matchTriggerWidth\"]],[22,[\"noMatchesMessage\"]],[26,\"action\",[[21,0,[]],\"onblur\"],null],[26,\"action\",[[21,0,[]],[22,[\"selectOrCreate\"]]],null],[22,[\"onclose\"]],[26,\"action\",[[21,0,[]],\"onfocus\"],null],[22,[\"oninput\"]],[26,\"action\",[[21,0,[]],\"handleKeydown\"],null],[22,[\"onopen\"]],[22,[\"optionsWithoutSelected\"]],[26,\"or\",[[22,[\"optionsComponent\"]],\"power-select-vertical-collection-options\"],null],[22,[\"placeholder\"]],[22,[\"registerAPI\"]],[22,[\"renderInPlace\"]],[26,\"action\",[[21,0,[]],[22,[\"searchAndSuggest\"]]],null],[22,[\"searchEnabled\"]],[22,[\"searchField\"]],[22,[\"searchMessage\"]],[22,[\"searchPlaceholder\"]],[22,[\"selected\"]],[22,[\"selectedItemComponent\"]],[22,[\"tabindex\"]],[22,[\"triggerClass\"]],[22,[\"triggerComponent\"]],[22,[\"triggerId\"]],[22,[\"verticalPosition\"]],true]],{\"statements\":[[4,\"if\",[[21,1,[\"__isSuggestion__\"]]],null,{\"statements\":[[0,\"        \"],[1,[26,\"gh-token-input/suggested-option\",null,[[\"option\",\"term\"],[[21,1,[]],[21,2,[]]]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"        \"],[1,[26,\"get\",[[21,1,[]],[22,[\"labelField\"]]],null],false],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[1,2]},null]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-token-input.hbs" } });
});
define("ghost-admin/templates/components/gh-token-input/select-multiple", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "/Ti53ULJ", "block": "{\"symbols\":[\"option\",\"select\",\"option\",\"select\",\"&default\",\"&inverse\"],\"statements\":[[4,\"if\",[[23,6]],null,{\"statements\":[[4,\"gh-token-input/select\",null,[[\"afterOptionsComponent\",\"allowClear\",\"ariaDescribedBy\",\"ariaInvalid\",\"ariaLabel\",\"ariaLabelledBy\",\"beforeOptionsComponent\",\"buildSelection\",\"calculatePosition\",\"class\",\"closeOnSelect\",\"defaultHighlighted\",\"destination\",\"dir\",\"disabled\",\"dropdownClass\",\"extra\",\"horizontalPosition\",\"initiallyOpened\",\"loadingMessage\",\"matcher\",\"matchTriggerWidth\",\"noMatchesMessage\",\"onblur\",\"onchange\",\"onclose\",\"onfocus\",\"oninput\",\"onkeydown\",\"onopen\",\"options\",\"optionsComponent\",\"groupComponent\",\"placeholder\",\"registerAPI\",\"renderInPlace\",\"required\",\"scrollTo\",\"search\",\"searchEnabled\",\"searchField\",\"searchMessage\",\"searchPlaceholder\",\"selected\",\"selectedItemComponent\",\"tabindex\",\"tagName\",\"triggerClass\",\"triggerComponent\",\"triggerId\",\"verticalPosition\"],[[22,[\"afterOptionsComponent\"]],[22,[\"allowClear\"]],[22,[\"ariaDescribedBy\"]],[22,[\"ariaInvalid\"]],[22,[\"ariaLabel\"]],[22,[\"ariaLabelledBy\"]],[22,[\"beforeOptionsComponent\"]],[26,\"action\",[[21,0,[]],\"buildSelection\"],null],[22,[\"calculatePosition\"]],[22,[\"class\"]],[22,[\"closeOnSelect\"]],[22,[\"defaultHighlighted\"]],[22,[\"destination\"]],[22,[\"dir\"]],[22,[\"disabled\"]],[22,[\"dropdownClass\"]],[26,\"assign\",[[22,[\"extra\"]],[26,\"hash\",null,[[\"optionMouseDown\",\"optionTouchStart\"],[[26,\"action\",[[21,0,[]],\"optionMouseDown\"],null],[26,\"action\",[[21,0,[]],\"optionTouchStart\"],null]]]]],null],[22,[\"horizontalPosition\"]],[22,[\"initiallyOpened\"]],[22,[\"loadingMessage\"]],[22,[\"matcher\"]],[22,[\"matchTriggerWidth\"]],[22,[\"noMatchesMessage\"]],[22,[\"onblur\"]],[22,[\"onchange\"]],[22,[\"onclose\"]],[26,\"action\",[[21,0,[]],\"handleFocus\"],null],[22,[\"oninput\"]],[26,\"action\",[[21,0,[]],\"handleKeydown\"],null],[26,\"action\",[[21,0,[]],\"handleOpen\"],null],[22,[\"options\"]],[22,[\"optionsComponent\"]],[22,[\"groupComponent\"]],[22,[\"placeholder\"]],[26,\"readonly\",[[22,[\"registerAPI\"]]],null],[22,[\"renderInPlace\"]],[22,[\"required\"]],[22,[\"scrollTo\"]],[22,[\"search\"]],[22,[\"searchEnabled\"]],[22,[\"searchField\"]],[22,[\"searchMessage\"]],[22,[\"searchPlaceholder\"]],[22,[\"selected\"]],[22,[\"selectedItemComponent\"]],[22,[\"computedTabIndex\"]],[22,[\"tagName\"]],[22,[\"concatenatedTriggerClass\"]],[26,\"component\",[[22,[\"triggerComponent\"]]],[[\"tabindex\"],[[22,[\"tabindex\"]]]]],[22,[\"triggerId\"]],[22,[\"verticalPosition\"]]]],{\"statements\":[[0,\"    \"],[13,5,[[21,3,[]],[21,4,[]]]],[0,\"\\n\"]],\"parameters\":[3,4]},{\"statements\":[[0,\"    \"],[13,6],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},{\"statements\":[[4,\"gh-token-input/select\",null,[[\"afterOptionsComponent\",\"allowClear\",\"ariaDescribedBy\",\"ariaInvalid\",\"ariaLabel\",\"ariaLabelledBy\",\"beforeOptionsComponent\",\"buildSelection\",\"calculatePosition\",\"class\",\"closeOnSelect\",\"defaultHighlighted\",\"destination\",\"dir\",\"disabled\",\"dropdownClass\",\"extra\",\"horizontalPosition\",\"initiallyOpened\",\"loadingMessage\",\"matcher\",\"matchTriggerWidth\",\"noMatchesMessage\",\"onblur\",\"onchange\",\"onclose\",\"onfocus\",\"oninput\",\"onkeydown\",\"onopen\",\"options\",\"optionsComponent\",\"groupComponent\",\"placeholder\",\"registerAPI\",\"renderInPlace\",\"required\",\"scrollTo\",\"search\",\"searchEnabled\",\"searchField\",\"searchMessage\",\"searchPlaceholder\",\"selected\",\"selectedItemComponent\",\"tabindex\",\"tagName\",\"triggerClass\",\"triggerComponent\",\"triggerId\",\"verticalPosition\"],[[22,[\"afterOptionsComponent\"]],[22,[\"allowClear\"]],[22,[\"ariaDescribedBy\"]],[22,[\"ariaInvalid\"]],[22,[\"ariaLabel\"]],[22,[\"ariaLabelledBy\"]],[22,[\"beforeOptionsComponent\"]],[26,\"action\",[[21,0,[]],\"buildSelection\"],null],[22,[\"calculatePosition\"]],[22,[\"class\"]],[22,[\"closeOnSelect\"]],[22,[\"defaultHighlighted\"]],[22,[\"destination\"]],[22,[\"dir\"]],[22,[\"disabled\"]],[22,[\"dropdownClass\"]],[26,\"assign\",[[22,[\"extra\"]],[26,\"hash\",null,[[\"optionMouseDown\",\"optionTouchStart\"],[[26,\"action\",[[21,0,[]],\"optionMouseDown\"],null],[26,\"action\",[[21,0,[]],\"optionTouchStart\"],null]]]]],null],[22,[\"horizontalPosition\"]],[22,[\"initiallyOpened\"]],[22,[\"loadingMessage\"]],[22,[\"matcher\"]],[22,[\"matchTriggerWidth\"]],[22,[\"noMatchesMessage\"]],[22,[\"onblur\"]],[22,[\"onchange\"]],[22,[\"onclose\"]],[26,\"action\",[[21,0,[]],\"handleFocus\"],null],[22,[\"oninput\"]],[26,\"action\",[[21,0,[]],\"handleKeydown\"],null],[26,\"action\",[[21,0,[]],\"handleOpen\"],null],[22,[\"options\"]],[22,[\"optionsComponent\"]],[22,[\"groupComponent\"]],[22,[\"placeholder\"]],[26,\"readonly\",[[22,[\"registerAPI\"]]],null],[22,[\"renderInPlace\"]],[22,[\"required\"]],[22,[\"scrollTo\"]],[22,[\"search\"]],[22,[\"searchEnabled\"]],[22,[\"searchField\"]],[22,[\"searchMessage\"]],[22,[\"searchPlaceholder\"]],[22,[\"selected\"]],[22,[\"selectedItemComponent\"]],[22,[\"computedTabIndex\"]],[22,[\"tagName\"]],[22,[\"concatenatedTriggerClass\"]],[26,\"component\",[[22,[\"triggerComponent\"]]],[[\"tabindex\"],[[22,[\"tabindex\"]]]]],[22,[\"triggerId\"]],[22,[\"verticalPosition\"]]]],{\"statements\":[[0,\"    \"],[13,5,[[21,1,[]],[21,2,[]]]],[0,\"\\n\"]],\"parameters\":[1,2]},null]],\"parameters\":[]}]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-token-input/select-multiple.hbs" } });
});
define("ghost-admin/templates/components/gh-token-input/select", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "GJ2bl/zx", "block": "{\"symbols\":[\"dropdown\",\"option\",\"term\",\"opt\",\"term\",\"&default\",\"&inverse\"],\"statements\":[[4,\"basic-dropdown\",null,[[\"classNames\",\"horizontalPosition\",\"calculatePosition\",\"destination\",\"initiallyOpened\",\"matchTriggerWidth\",\"onClose\",\"onOpen\",\"registerAPI\",\"renderInPlace\",\"verticalPosition\",\"disabled\"],[[26,\"readonly\",[[22,[\"classNames\"]]],null],[26,\"readonly\",[[22,[\"horizontalPosition\"]]],null],[22,[\"calculatePosition\"]],[26,\"readonly\",[[22,[\"destination\"]]],null],[26,\"readonly\",[[22,[\"initiallyOpened\"]]],null],[26,\"readonly\",[[22,[\"matchTriggerWidth\"]]],null],[26,\"action\",[[21,0,[]],\"onClose\"],null],[26,\"action\",[[21,0,[]],\"onOpen\"],null],[26,\"action\",[[21,0,[]],\"registerAPI\"],null],[26,\"readonly\",[[22,[\"renderInPlace\"]]],null],[26,\"readonly\",[[22,[\"verticalPosition\"]]],null],[26,\"readonly\",[[22,[\"disabled\"]]],null]]],{\"statements\":[[0,\"\\n\"],[4,\"component\",[[21,1,[\"trigger\"]]],[[\"tagName\",\"ariaDescribedBy\",\"ariaInvalid\",\"ariaLabel\",\"ariaLabelledBy\",\"ariaRequired\",\"class\",\"id\",\"eventType\",\"onKeyDown\",\"onFocus\",\"onBlur\",\"tabindex\"],[[26,\"readonly\",[[22,[\"_triggerTagName\"]]],null],[26,\"readonly\",[[22,[\"ariaDescribedBy\"]]],null],[26,\"readonly\",[[22,[\"ariaInvalid\"]]],null],[26,\"readonly\",[[22,[\"ariaLabel\"]]],null],[26,\"readonly\",[[22,[\"ariaLabelledBy\"]]],null],[26,\"readonly\",[[22,[\"required\"]]],null],[26,\"readonly\",[[22,[\"concatenatedTriggerClasses\"]]],null],[26,\"readonly\",[[22,[\"triggerId\"]]],null],\"click\",[26,\"action\",[[21,0,[]],\"onTriggerKeydown\"],null],[26,\"action\",[[21,0,[]],\"onTriggerFocus\"],null],[26,\"action\",[[21,0,[]],\"onTriggerBlur\"],null],[26,\"readonly\",[[22,[\"tabindex\"]]],null]]],{\"statements\":[[4,\"component\",[[22,[\"triggerComponent\"]]],[[\"allowClear\",\"buildSelection\",\"extra\",\"listboxId\",\"loadingMessage\",\"onFocus\",\"onBlur\",\"onInput\",\"placeholder\",\"placeholderComponent\",\"onKeydown\",\"searchEnabled\",\"searchField\",\"select\",\"selectedItemComponent\"],[[26,\"readonly\",[[22,[\"allowClear\"]]],null],[26,\"readonly\",[[22,[\"buildSelection\"]]],null],[26,\"readonly\",[[22,[\"extra\"]]],null],[26,\"readonly\",[[22,[\"optionsId\"]]],null],[26,\"readonly\",[[22,[\"loadingMessage\"]]],null],[26,\"action\",[[21,0,[]],\"onFocus\"],null],[26,\"action\",[[21,0,[]],\"onBlur\"],null],[26,\"action\",[[21,0,[]],\"onInput\"],null],[26,\"readonly\",[[22,[\"placeholder\"]]],null],[26,\"readonly\",[[22,[\"placeholderComponent\"]]],null],[26,\"action\",[[21,0,[]],\"onKeydown\"],null],[26,\"readonly\",[[22,[\"searchEnabled\"]]],null],[26,\"readonly\",[[22,[\"searchField\"]]],null],[26,\"readonly\",[[22,[\"publicAPI\"]]],null],[26,\"readonly\",[[22,[\"selectedItemComponent\"]]],null]]],{\"statements\":[[0,\"      \"],[13,6,[[21,4,[]],[21,5,[]]]],[0,\"\\n\"]],\"parameters\":[4,5]},null]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"component\",[[21,1,[\"content\"]]],[[\"_contentTagName\",\"class\"],[[22,[\"_contentTagName\"]],[26,\"readonly\",[[22,[\"concatenatedDropdownClasses\"]]],null]]],{\"statements\":[[0,\"    \"],[1,[26,\"component\",[[22,[\"beforeOptionsComponent\"]]],[[\"extra\",\"listboxId\",\"onInput\",\"onKeydown\",\"searchEnabled\",\"onFocus\",\"onBlur\",\"placeholder\",\"placeholderComponent\",\"searchPlaceholder\",\"select\"],[[26,\"readonly\",[[22,[\"extra\"]]],null],[26,\"readonly\",[[22,[\"optionsId\"]]],null],[26,\"action\",[[21,0,[]],\"onInput\"],null],[26,\"action\",[[21,0,[]],\"onKeydown\"],null],[26,\"readonly\",[[22,[\"searchEnabled\"]]],null],[26,\"action\",[[21,0,[]],\"onFocus\"],null],[26,\"action\",[[21,0,[]],\"onBlur\"],null],[26,\"readonly\",[[22,[\"placeholder\"]]],null],[26,\"readonly\",[[22,[\"placeholderComponent\"]]],null],[26,\"readonly\",[[22,[\"searchPlaceholder\"]]],null],[26,\"readonly\",[[22,[\"publicAPI\"]]],null]]]],false],[0,\"\\n\"],[4,\"if\",[[22,[\"mustShowSearchMessage\"]]],null,{\"statements\":[[0,\"      \"],[1,[26,\"component\",[[22,[\"searchMessageComponent\"]]],[[\"searchMessage\",\"select\"],[[26,\"readonly\",[[22,[\"searchMessage\"]]],null],[26,\"readonly\",[[22,[\"publicAPI\"]]],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[22,[\"mustShowNoMessages\"]]],null,{\"statements\":[[4,\"if\",[[23,7]],null,{\"statements\":[[0,\"        \"],[13,7],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[22,[\"noMatchesMessage\"]]],null,{\"statements\":[[0,\"        \"],[6,\"ul\"],[10,\"class\",\"ember-power-select-options\"],[10,\"role\",\"listbox\"],[8],[0,\"\\n          \"],[6,\"li\"],[10,\"class\",\"ember-power-select-option ember-power-select-option--no-matches-message\"],[10,\"role\",\"option\"],[8],[0,\"\\n            \"],[1,[20,\"noMatchesMessage\"],false],[0,\"\\n          \"],[9],[0,\"\\n        \"],[9],[0,\"\\n      \"]],\"parameters\":[]},null]],\"parameters\":[]}]],\"parameters\":[]},{\"statements\":[[4,\"component\",[[22,[\"optionsComponent\"]]],[[\"class\",\"extra\",\"groupIndex\",\"loadingMessage\",\"id\",\"options\",\"optionsComponent\",\"groupComponent\",\"select\"],[\"ember-power-select-options\",[26,\"readonly\",[[22,[\"extra\"]]],null],\"\",[26,\"readonly\",[[22,[\"loadingMessage\"]]],null],[26,\"readonly\",[[22,[\"optionsId\"]]],null],[26,\"readonly\",[[22,[\"publicAPI\",\"results\"]]],null],[26,\"readonly\",[[22,[\"optionsComponent\"]]],null],[26,\"readonly\",[[22,[\"groupComponent\"]]],null],[26,\"readonly\",[[22,[\"publicAPI\"]]],null]]],{\"statements\":[[0,\"        \"],[13,6,[[21,2,[]],[21,3,[]]]],[0,\"\\n\"]],\"parameters\":[2,3]},null],[0,\"    \"]],\"parameters\":[]}]],\"parameters\":[]}],[0,\"    \"],[1,[26,\"component\",[[22,[\"afterOptionsComponent\"]]],[[\"select\",\"extra\"],[[26,\"readonly\",[[22,[\"publicAPI\"]]],null],[26,\"readonly\",[[22,[\"extra\"]]],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[1]},null]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-token-input/select.hbs" } });
});
define("ghost-admin/templates/components/gh-token-input/suggested-option", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "pq0Zyio7", "block": "{\"symbols\":[],\"statements\":[[1,[22,[\"option\",\"text\"]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-token-input/suggested-option.hbs" } });
});
define("ghost-admin/templates/components/gh-token-input/tag-token", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "qVEHR7+T", "block": "{\"symbols\":[\"&default\"],\"statements\":[[13,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-token-input/tag-token.hbs" } });
});
define("ghost-admin/templates/components/gh-token-input/trigger", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "hdUFbZlp", "block": "{\"symbols\":[\"opt\",\"idx\",\"&default\"],\"statements\":[[4,\"sortable-objects\",null,[[\"tagName\",\"id\",\"class\",\"sortableObjectList\",\"enableSort\",\"useSwap\",\"sortEndAction\"],[\"ul\",[26,\"concat\",[\"ember-power-select-multiple-options-\",[22,[\"select\",\"uniqueId\"]]],null],\"ember-power-select-multiple-options\",[22,[\"select\",\"selected\"]],true,false,[26,\"action\",[[21,0,[]],\"reorderItems\"],null]]],{\"statements\":[[4,\"each\",[[22,[\"select\",\"selected\"]]],null,{\"statements\":[[4,\"component\",[[26,\"or\",[[22,[\"extra\",\"tokenComponent\"]],\"draggable-object\"],null]],[[\"tagName\",\"class\",\"select\",\"content\",\"idx\",\"isSortable\",\"mouseDown\",\"touchStart\"],[\"li\",\"ember-power-select-multiple-option\",[22,[\"select\"]],[26,\"readonly\",[[21,1,[]]],null],[21,2,[]],true,[26,\"action\",[[21,0,[]],\"handleOptionMouseDown\"],null],[26,\"action\",[[21,0,[]],\"handleOptionTouchStart\"],null]]],{\"statements\":[[4,\"if\",[[22,[\"selectedItemComponent\"]]],null,{\"statements\":[[0,\"                \"],[1,[26,\"component\",[[22,[\"selectedItemComponent\"]]],[[\"option\",\"select\"],[[26,\"readonly\",[[21,1,[]]],null],[26,\"readonly\",[[22,[\"select\"]]],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                \"],[13,3,[[21,1,[]],[22,[\"select\"]]]],[0,\"\\n\"]],\"parameters\":[]}],[4,\"unless\",[[22,[\"select\",\"disabled\"]]],null,{\"statements\":[[0,\"                \"],[6,\"span\"],[10,\"role\",\"button\"],[10,\"aria-label\",\"remove element\"],[10,\"class\",\"ember-power-select-multiple-remove-btn\"],[11,\"data-selected-index\",[21,2,[]],null],[8],[0,\"\\n                    \"],[1,[26,\"svg-jar\",[\"close\"],[[\"data-selected-index\"],[[21,2,[]]]]],false],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null]],\"parameters\":[1,2]},{\"statements\":[[4,\"if\",[[26,\"and\",[[22,[\"placeholder\"]],[26,\"not\",[[22,[\"searchEnabled\"]]],null]],null]],null,{\"statements\":[[0,\"            \"],[6,\"span\"],[10,\"class\",\"ember-power-select-placeholder\"],[8],[1,[20,\"placeholder\"],false],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]}],[0,\"\\n\"],[4,\"if\",[[22,[\"searchEnabled\"]]],null,{\"statements\":[[0,\"        \"],[6,\"input\"],[10,\"class\",\"ember-power-select-trigger-multiple-input\"],[10,\"tabindex\",\"0\"],[10,\"autocomplete\",\"off\"],[10,\"autocorrect\",\"off\"],[10,\"autocapitalize\",\"off\"],[10,\"spellcheck\",\"false\"],[11,\"id\",[27,[\"ember-power-select-trigger-multiple-input-\",[22,[\"select\",\"uniqueId\"]]]]],[11,\"value\",[22,[\"select\",\"searchText\"]],null],[11,\"aria-controls\",[20,\"listboxId\"],null],[11,\"style\",[20,\"triggerMultipleInputStyle\"],null],[11,\"placeholder\",[20,\"maybePlaceholder\"],null],[11,\"disabled\",[22,[\"select\",\"disabled\"]],null],[11,\"oninput\",[26,\"action\",[[21,0,[]],\"onInput\"],null],null],[11,\"onFocus\",[20,\"onFocus\"],null],[11,\"onBlur\",[20,\"onBlur\"],null],[11,\"tabindex\",[20,\"tabindex\"],null],[11,\"onkeydown\",[26,\"action\",[[21,0,[]],\"onKeydown\"],null],null],[10,\"type\",\"search\"],[8],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[6,\"span\"],[10,\"class\",\"ember-power-select-status-icon\"],[8],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-token-input/trigger.hbs" } });
});
define("ghost-admin/templates/components/gh-tour-item", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "prYXyQIm", "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[22,[\"isVisible\"]]],null,{\"statements\":[[4,\"liquid-tether\",null,[[\"class\",\"target\",\"attachment\",\"targetAttachment\",\"targetOffset\"],[\"throbber-container\",[22,[\"target\"]],\"middle center\",[22,[\"throbberAttachment\"]],[22,[\"throbberOffset\"]]]],{\"statements\":[[0,\"        \"],[6,\"a\"],[10,\"class\",\"throbber-trigger\"],[10,\"href\",\"#\"],[11,\"id\",[20,\"_throbberElementId\"],null],[3,\"action\",[[21,0,[]],\"open\"]],[8],[0,\"\\n            \"],[6,\"span\"],[10,\"class\",\"throbber\"],[8],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[22,[\"isOpen\"]]],null,{\"statements\":[[4,\"liquid-wormhole\",null,[[\"class\"],[\"tour-container\"]],{\"statements\":[[0,\"            \"],[6,\"div\"],[10,\"class\",\"tour-background\"],[3,\"action\",[[21,0,[]],\"close\"],[[\"on\"],[\"click\"]]],[8],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"liquid-tether\",null,[[\"class\",\"target\",\"attachment\",\"targetAttachment\",\"offset\"],[\"tour\",[22,[\"_throbberElementSelector\"]],[22,[\"_popoverAttachment\"]],[22,[\"_popoverTargetAttachment\"]],[22,[\"_popoverOffset\"]]]],{\"statements\":[[0,\"            \"],[6,\"div\"],[11,\"class\",[27,[\"popover-item popover-triangle-\",[20,\"popoverTriangleClass\"]]]],[8],[0,\"\\n                \"],[6,\"h3\"],[10,\"class\",\"popover-title\"],[8],[1,[22,[\"_throbber\",\"title\"]],false],[9],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"popover-body\"],[8],[0,\"\\n                    \"],[1,[22,[\"_throbber\",\"message\"]],true],[0,\"\\n                \"],[9],[0,\"\\n                \"],[6,\"footer\"],[10,\"class\",\"popover-foot\"],[8],[0,\"\\n                    \"],[6,\"a\"],[10,\"class\",\"tour-optout\"],[10,\"href\",\"#\"],[3,\"action\",[[21,0,[]],\"optOut\"]],[8],[0,\"Not your first time? \"],[6,\"em\"],[8],[0,\"Skip these tips\"],[9],[9],[0,\"\\n                    \"],[6,\"a\"],[10,\"class\",\"tour-dismiss gh-btn gh-btn-black\"],[10,\"href\",\"#\"],[3,\"action\",[[21,0,[]],\"markAsViewed\"]],[8],[6,\"span\"],[8],[0,\"Ok, got it\"],[9],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-tour-item.hbs" } });
});
define("ghost-admin/templates/components/gh-unsplash-photo", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "zVX5V/dF", "block": "{\"symbols\":[],\"statements\":[[6,\"a\"],[10,\"class\",\"gh-unsplash-photo\"],[10,\"href\",\"#\"],[11,\"onclick\",[26,\"action\",[[21,0,[]],\"zoom\"],null],null],[11,\"data-unsplash-zoomed-photo\",[26,\"if\",[[22,[\"zoomed\"]],[22,[\"photo\",\"id\"]]],null],null],[11,\"data-test-unsplash-photo\",[22,[\"photo\",\"id\"]],null],[11,\"style\",[20,\"style\"],null],[8],[0,\"\\n    \"],[6,\"div\"],[10,\"class\",\"gh-unsplash-photo-container\"],[11,\"style\",[20,\"containerStyle\"],null],[10,\"data-test-unsplash-photo-container\",\"\"],[8],[0,\"\\n        \"],[6,\"img\"],[11,\"src\",[20,\"imageUrl\"],null],[11,\"alt\",[22,[\"photo\",\"description\"]],null],[11,\"width\",[20,\"width\"],null],[11,\"height\",[20,\"height\"],null],[10,\"data-test-unsplash-photo-image\",\"\"],[8],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-unsplash-photo-overlay\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-unsplash-photo-header\"],[8],[0,\"\\n                \"],[6,\"a\"],[10,\"class\",\"gh-unsplash-button-likes gh-unsplash-button\"],[11,\"href\",[27,[[22,[\"photo\",\"links\",\"html\"]],\"?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit\"]]],[10,\"target\",\"_blank\"],[8],[1,[26,\"svg-jar\",[\"unsplash-heart\"],null],false],[1,[22,[\"photo\",\"likes\"]],false],[9],[0,\"\\n                \"],[6,\"a\"],[10,\"class\",\"gh-unsplash-button-download gh-unsplash-button\"],[11,\"href\",[27,[[22,[\"photo\",\"links\",\"download\"]],\"/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit&force=true\"]]],[8],[1,[26,\"svg-jar\",[\"download\"],null],false],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-unsplash-photo-footer\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-unsplash-photo-author\"],[8],[0,\"\\n                    \"],[6,\"a\"],[10,\"class\",\"gh-unsplash-photo-author-img\"],[11,\"href\",[27,[[22,[\"photo\",\"user\",\"links\",\"html\"]],\"?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit\"]]],[10,\"target\",\"_blank\"],[8],[0,\"\\n                        \"],[6,\"img\"],[11,\"src\",[27,[[22,[\"photo\",\"user\",\"profile_image\",\"medium\"]]]]],[8],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[6,\"a\"],[10,\"class\",\"gh-unsplash-photo-author-name\"],[11,\"href\",[27,[[22,[\"photo\",\"user\",\"links\",\"html\"]],\"?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit\"]]],[10,\"target\",\"_blank\"],[8],[0,\"\\n                        \"],[1,[22,[\"photo\",\"user\",\"name\"]],false],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[6,\"a\"],[10,\"class\",\"gh-unsplash-button\"],[10,\"href\",\"#\"],[11,\"onclick\",[26,\"action\",[[21,0,[]],\"select\"],null],null],[8],[0,\"Insert image\"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-unsplash-photo.hbs" } });
});
define("ghost-admin/templates/components/gh-unsplash", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "t2PbKfkN", "block": "{\"symbols\":[\"photos\",\"photo\"],\"statements\":[[4,\"liquid-wormhole\",null,[[\"class\"],[\"unsplash\"]],{\"statements\":[[0,\"    \"],[6,\"div\"],[10,\"class\",\"fullscreen-modal-background\"],[10,\"style\",\"z-index: 999\"],[3,\"action\",[[21,0,[]],\"close\"]],[8],[9],[0,\"\\n    \"],[6,\"div\"],[10,\"class\",\"absolute top-8 right-8 bottom-8 left-8 br4 overflow-hidden bg-white z-9999\"],[10,\"data-unsplash\",\"\"],[8],[0,\"\\n\"],[0,\"        \"],[6,\"button\"],[10,\"class\",\"absolute top-6 right-6\"],[10,\"type\",\"button\"],[3,\"action\",[[21,0,[]],\"close\"]],[8],[0,\"\\n            \"],[1,[26,\"svg-jar\",[\"close\"],[[\"class\"],[\"w4 stroke-midlightgrey-l2\"]]],false],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[6,\"div\"],[10,\"class\",\"flex flex-column h-100\"],[8],[0,\"\\n\"],[0,\"            \"],[6,\"header\"],[10,\"class\",\"flex-shrink-0 flex flex-row-l flex-column justify-between pt6 pr8 pb6 pl8 pt10-l pr20-l pb10-l pl20-l items-center\"],[8],[0,\"\\n                \"],[6,\"h1\"],[10,\"class\",\"flex items-center darkgrey-d2 w-100 nudge-top--4\"],[8],[0,\"\\n                    \"],[6,\"a\"],[10,\"class\",\"dib w8 mr2\"],[10,\"href\",\"https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit\"],[10,\"target\",\"_blank\"],[8],[1,[26,\"svg-jar\",[\"unsplash\"],[[\"class\"],[\"fill-darkgrey-d2\"]]],false],[9],[0,\"\\n                    Unsplash\\n                \"],[9],[0,\"\\n                \"],[6,\"span\"],[10,\"class\",\"gh-input-icon mw88-l flex-auto w-100 mt3 mt0-l\"],[8],[0,\"\\n                    \"],[1,[26,\"svg-jar\",[\"search\"],null],false],[0,\"\\n                    \"],[1,[26,\"gh-text-input\",null,[[\"class\",\"name\",\"placeholder\",\"tabindex\",\"autofocus\",\"autocorrect\",\"value\",\"input\",\"focusIn\",\"focus-out\"],[\"gh-unsplash-search\",\"searchKeyword\",\"Search free high-resolution photos\",\"1\",\"autofocus\",\"off\",[26,\"readonly\",[[22,[\"unsplash\",\"searchTerm\"]]],null],[26,\"action\",[[21,0,[]],\"search\"],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"setKeyScope\"],null],[26,\"action\",[[21,0,[]],\"resetKeyScope\"],null]]]],false],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\\n\"],[0,\"            \"],[6,\"div\"],[10,\"class\",\"relative h-100 overflow-hidden\"],[8],[0,\"\\n\"],[0,\"                \"],[6,\"div\"],[10,\"class\",\"overflow-auto h-100 w-100 pr8 pl8 pr20-l pl20-l\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"unsplash\",\"photos\"]]],null,{\"statements\":[[0,\"                        \"],[6,\"section\"],[10,\"class\",\"gh-unsplash-grid\"],[8],[0,\"\\n\"],[4,\"each\",[[22,[\"unsplash\",\"columns\"]]],null,{\"statements\":[[0,\"                                \"],[6,\"div\"],[10,\"class\",\"gh-unsplash-grid-column\"],[8],[0,\"\\n\"],[4,\"each\",[[21,1,[]]],null,{\"statements\":[[0,\"                                        \"],[1,[26,\"gh-unsplash-photo\",null,[[\"photo\",\"zoom\",\"select\"],[[21,2,[]],[26,\"action\",[[21,0,[]],\"zoomPhoto\"],null],[26,\"action\",[[21,0,[]],\"select\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"                                \"],[9],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[26,\"and\",[[22,[\"unsplash\",\"searchTerm\"]],[26,\"not\",[[22,[\"unsplash\",\"error\"]],[22,[\"unsplash\",\"isLoading\"]]],null]],null]],null,{\"statements\":[[0,\"                        \"],[6,\"section\"],[10,\"class\",\"gh-unsplash-error h-100 flex items-center justify-center pb30\"],[8],[0,\"\\n                            \"],[6,\"div\"],[8],[0,\"\\n                                \"],[6,\"img\"],[10,\"class\",\"gh-unsplash-error-404\"],[10,\"src\",\"assets/img/unsplash-404.png\"],[10,\"alt\",\"No photos found\"],[8],[9],[0,\"\\n                                \"],[6,\"h4\"],[8],[0,\"No photos found for '\"],[1,[22,[\"unsplash\",\"searchTerm\"]],false],[0,\"'\"],[9],[0,\"\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"]],\"parameters\":[]},null]],\"parameters\":[]}],[0,\"\\n\"],[4,\"if\",[[22,[\"unsplash\",\"error\"]]],null,{\"statements\":[[0,\"                        \"],[6,\"section\"],[10,\"class\",\"gh-unsplash-error h-100 flex items-center justify-center pb30\"],[8],[0,\"\\n                            \"],[6,\"div\"],[8],[0,\"\\n                                \"],[6,\"img\"],[10,\"class\",\"gh-unsplash-error-404\"],[10,\"src\",\"assets/img/unsplash-404.png\"],[10,\"alt\",\"Network error\"],[8],[9],[0,\"\\n                                \"],[6,\"h4\"],[8],[1,[22,[\"unsplash\",\"error\"]],false],[0,\" (\"],[6,\"a\"],[10,\"href\",\"#\"],[3,\"action\",[[21,0,[]],\"retry\"]],[8],[0,\"retry\"],[9],[0,\")\"],[9],[0,\"\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[22,[\"unsplash\",\"isLoading\"]]],null,{\"statements\":[[0,\"                        \"],[6,\"div\"],[10,\"class\",\"gh-unsplash-loading h-100 flex items-center justify-center pb30\"],[8],[0,\"\\n                            \"],[6,\"div\"],[10,\"class\",\"gh-loading-spinner\"],[8],[9],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n                    \"],[1,[26,\"gh-scroll-trigger\",null,[[\"enter\",\"triggerOffset\"],[[26,\"action\",[[21,0,[]],\"loadNextPage\"],null],1000]]],false],[0,\"\\n                \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"zoomedPhoto\"]]],null,{\"statements\":[[0,\"                    \"],[6,\"div\"],[10,\"class\",\"absolute flex justify-center top-0 right-0 bottom-0 left-0 pr20 pb10 pl20 bg-white overflow-hidden\"],[3,\"action\",[[21,0,[]],\"closeZoom\"]],[8],[0,\"\\n                        \"],[1,[26,\"gh-unsplash-photo\",null,[[\"photo\",\"zoomed\",\"zoom\",\"select\"],[[22,[\"zoomedPhoto\"]],true,[26,\"action\",[[21,0,[]],\"closeZoom\"],null],[26,\"action\",[[21,0,[]],\"select\"],null]]]],false],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-unsplash.hbs" } });
});
define("ghost-admin/templates/components/gh-uploader", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "yLaRvEKN", "block": "{\"symbols\":[\"&default\"],\"statements\":[[13,1,[[26,\"hash\",null,[[\"cancel\",\"errors\",\"files\",\"isUploading\",\"progressBar\",\"setFiles\"],[[26,\"action\",[[21,0,[]],\"cancel\"],null],[22,[\"errors\"]],[22,[\"files\"]],[22,[\"_uploadFiles\",\"isRunning\"]],[26,\"component\",[\"gh-progress-bar\"],[[\"percentage\"],[[22,[\"uploadPercentage\"]]]]],[26,\"action\",[[21,0,[]],\"setFiles\"],null]]]]]],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-uploader.hbs" } });
});
define("ghost-admin/templates/components/gh-url-preview", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "uwmhw27g", "block": "{\"symbols\":[],\"statements\":[[1,[20,\"url\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-url-preview.hbs" } });
});
define("ghost-admin/templates/components/gh-user-active", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "q3ZIictZ", "block": "{\"symbols\":[\"&default\"],\"statements\":[[13,1,[[21,0,[]]]],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-user-active.hbs" } });
});
define("ghost-admin/templates/components/gh-user-invited", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "XdVcgkY6", "block": "{\"symbols\":[\"&default\"],\"statements\":[[13,1,[[21,0,[]]]],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-user-invited.hbs" } });
});
define("ghost-admin/templates/components/gh-user-list-item", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "UuMR0MY4", "block": "{\"symbols\":[\"role\"],\"statements\":[[6,\"div\"],[10,\"class\",\"apps-grid-cell\"],[8],[0,\"\\n\"],[4,\"link-to\",[\"team.user\",[22,[\"user\",\"slug\"]]],[[\"data-test-user-id\"],[[22,[\"user\",\"id\"]]]],{\"statements\":[[0,\"    \"],[6,\"article\"],[10,\"class\",\"apps-card-app\"],[8],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"apps-card-left\"],[8],[0,\"\\n            \"],[6,\"span\"],[10,\"class\",\"user-list-item-figure\"],[11,\"style\",[26,\"background-image-style\",[[22,[\"user\",\"profileImageUrl\"]]],null],null],[8],[0,\"\\n                \"],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Photo of \"],[1,[22,[\"user\",\"name\"]],false],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"apps-card-meta\"],[8],[0,\"\\n                \"],[6,\"h3\"],[10,\"class\",\"apps-card-app-title\"],[8],[1,[22,[\"user\",\"name\"]],false],[9],[0,\"\\n                \"],[6,\"p\"],[10,\"class\",\"apps-card-app-desc\"],[8],[0,\"Last seen: \"],[1,[22,[\"component\",\"lastLoginUTC\"]],false],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"apps-card-right\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"apps-configured\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"user\",\"isLocked\"]]],null,{\"statements\":[[0,\"                    \"],[6,\"span\"],[10,\"class\",\"gh-badge author\"],[8],[0,\"Locked\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"unless\",[[22,[\"session\",\"user\",\"isAuthorOrContributor\"]]],null,{\"statements\":[[4,\"each\",[[22,[\"user\",\"roles\"]]],null,{\"statements\":[[0,\"                        \"],[6,\"span\"],[11,\"class\",[27,[\"gh-badge \",[21,1,[\"lowerCaseName\"]]]]],[10,\"data-test-role-name\",\"\"],[8],[1,[21,1,[\"name\"]],false],[9],[0,\"\\n\"]],\"parameters\":[1]},null]],\"parameters\":[]},null],[0,\"                \"],[1,[26,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-user-list-item.hbs" } });
});
define("ghost-admin/templates/components/gh-view-title", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "VRGlJ7O2", "block": "{\"symbols\":[\"&default\"],\"statements\":[[6,\"button\"],[10,\"class\",\"gh-mobilemenu-button\"],[10,\"role\",\"presentation\"],[3,\"action\",[[21,0,[]],\"openMobileMenu\"],[[\"target\"],[[22,[\"ui\"]]]]],[8],[1,[26,\"svg-jar\",[\"icon\"],[[\"class\"],[\"icon-gh\"]]],false],[6,\"span\"],[10,\"class\",\"sr-only\"],[8],[0,\"Menu\"],[9],[9],[0,\"\\n\"],[13,1],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-view-title.hbs" } });
});
define("ghost-admin/templates/components/infinity-loader", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Ro1cnbwL", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[23,1]],null,{\"statements\":[[0,\"    \"],[13,1],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[22,[\"infinityModel\",\"reachedInfinity\"]]],null,{\"statements\":[],\"parameters\":[]},{\"statements\":[[0,\"        \"],[6,\"div\"],[10,\"class\",\"gh-loading-spinner\"],[8],[9],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]}]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/infinity-loader.hbs" } });
});
define("ghost-admin/templates/components/modal-delete-all", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "s8viHr0e", "block": "{\"symbols\":[],\"statements\":[[6,\"header\"],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[6,\"h1\"],[8],[0,\"Would you really like to delete all content from your blog?\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"a\"],[10,\"class\",\"close\"],[10,\"href\",\"\"],[10,\"title\",\"Close\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[1,[26,\"svg-jar\",[\"close\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[6,\"p\"],[8],[0,\"This is permanent! No backups, no restores, no magic undo button. We warned you, k?\"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[6,\"button\"],[10,\"class\",\"gh-btn\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[6,\"span\"],[8],[0,\"Cancel\"],[9],[9],[0,\"\\n    \"],[1,[26,\"gh-task-button\",[\"Delete\"],[[\"successText\",\"task\",\"class\"],[\"Deleted\",[22,[\"deleteAll\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],false],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modal-delete-all.hbs" } });
});
define("ghost-admin/templates/components/modal-delete-post", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "CaSksYbh", "block": "{\"symbols\":[],\"statements\":[[6,\"header\"],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[6,\"h1\"],[8],[0,\"Are you sure you want to delete this post?\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"a\"],[10,\"class\",\"close\"],[10,\"href\",\"\"],[10,\"title\",\"Close\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[1,[26,\"svg-jar\",[\"close\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[6,\"p\"],[8],[0,\"\\n        You're about to delete \\\"\"],[6,\"strong\"],[8],[1,[22,[\"post\",\"title\"]],false],[9],[0,\"\\\". This is permanent! We warned you, k?\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[6,\"button\"],[10,\"class\",\"gh-btn\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[6,\"span\"],[8],[0,\"Cancel\"],[9],[9],[0,\"\\n    \"],[1,[26,\"gh-task-button\",[\"Delete\"],[[\"successText\",\"task\",\"class\"],[\"Deleted\",[22,[\"deletePost\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],false],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modal-delete-post.hbs" } });
});
define("ghost-admin/templates/components/modal-delete-subscriber", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "RMlxevom", "block": "{\"symbols\":[],\"statements\":[[6,\"header\"],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[6,\"h1\"],[8],[0,\"Are you sure?\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"a\"],[10,\"class\",\"close\"],[10,\"href\",\"\"],[10,\"title\",\"Close\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[1,[26,\"svg-jar\",[\"close\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[6,\"strong\"],[8],[0,\"WARNING:\"],[9],[0,\" All data for this subscriber will be deleted. There is no way to recover this.\\n\"],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[6,\"button\"],[10,\"class\",\"gh-btn\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[6,\"span\"],[8],[0,\"Cancel\"],[9],[9],[0,\"\\n    \"],[1,[26,\"gh-task-button\",[\"Delete\"],[[\"successText\",\"task\",\"class\"],[\"Deleted\",[22,[\"deleteSubscriber\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],false],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modal-delete-subscriber.hbs" } });
});
define("ghost-admin/templates/components/modal-delete-tag", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "DSVk+FuC", "block": "{\"symbols\":[],\"statements\":[[6,\"header\"],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[6,\"h1\"],[8],[0,\"Are you sure you want to delete this tag?\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"a\"],[10,\"class\",\"close\"],[10,\"href\",\"\"],[10,\"title\",\"Close\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[1,[26,\"svg-jar\",[\"close\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-body\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"tag\",\"post_count\"]]],null,{\"statements\":[[0,\"        \"],[6,\"span\"],[10,\"class\",\"red\"],[8],[0,\"This tag is attached to \"],[1,[22,[\"tag\",\"count\",\"posts\"]],false],[0,\" \"],[1,[20,\"postInflection\"],false],[0,\".\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    You're about to delete \\\"\"],[6,\"strong\"],[8],[1,[22,[\"tag\",\"name\"]],false],[9],[0,\"\\\". This is permanent! We warned you, k?\\n\"],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[6,\"button\"],[10,\"class\",\"gh-btn\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[6,\"span\"],[8],[0,\"Cancel\"],[9],[9],[0,\"\\n    \"],[1,[26,\"gh-task-button\",[\"Delete\"],[[\"successText\",\"task\",\"class\"],[\"Deleted\",[22,[\"deleteTag\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],false],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modal-delete-tag.hbs" } });
});
define("ghost-admin/templates/components/modal-delete-theme", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "iziNIH42", "block": "{\"symbols\":[],\"statements\":[[6,\"header\"],[10,\"class\",\"modal-header\"],[10,\"data-test-delete-theme-modal\",\"\"],[8],[0,\"\\n    \"],[6,\"h1\"],[8],[0,\"Are you sure you want to delete this\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"a\"],[10,\"class\",\"close\"],[10,\"href\",\"\"],[10,\"title\",\"Close\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[1,[26,\"svg-jar\",[\"close\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[6,\"p\"],[8],[0,\"You're about to delete \\\"\"],[6,\"strong\"],[8],[1,[22,[\"theme\",\"label\"]],false],[9],[0,\"\\\". This is permanent! We warned you, k? Maybe \"],[6,\"a\"],[10,\"href\",\"#\"],[3,\"action\",[[21,0,[]],[22,[\"download\"]]]],[8],[0,\"Download your theme before continuing\"],[9],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[6,\"button\"],[10,\"class\",\"gh-btn\"],[10,\"data-test-cancel-button\",\"\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[6,\"span\"],[8],[0,\"Cancel\"],[9],[9],[0,\"\\n    \"],[1,[26,\"gh-task-button\",[\"Delete\"],[[\"successText\",\"task\",\"class\",\"data-test-delete-button\"],[\"Deleted\",[22,[\"deleteTheme\"]],\"gh-btn gh-btn-red gh-btn-icon\",true]]],false],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modal-delete-theme.hbs" } });
});
define("ghost-admin/templates/components/modal-delete-user", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "b9kRekC8", "block": "{\"symbols\":[],\"statements\":[[6,\"header\"],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[6,\"h1\"],[8],[0,\"Are you sure you want to delete this user?\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"a\"],[10,\"class\",\"close\"],[10,\"href\",\"\"],[10,\"title\",\"Close\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[1,[26,\"svg-jar\",[\"close\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[6,\"p\"],[8],[6,\"strong\"],[8],[0,\"WARNING:\"],[9],[0,\" You are about to delete the user '\"],[6,\"strong\"],[8],[1,[22,[\"user\",\"name\"]],false],[9],[0,\"'. There is no way to recover this.\"],[9],[0,\"\\n\"],[4,\"if\",[[22,[\"user\",\"count\",\"posts\"]]],null,{\"statements\":[[0,\"        \"],[6,\"ul\"],[8],[0,\"\\n            \"],[6,\"li\"],[8],[0,\"The user will not have access to this blog anymore\"],[9],[0,\"\\n            \"],[6,\"li\"],[8],[6,\"strong\"],[8],[1,[26,\"pluralize\",[[22,[\"user\",\"count\",\"posts\"]],\"post\"],null],false],[9],[0,\" created by this user will be deleted\"],[9],[0,\"\\n            \"],[6,\"li\"],[8],[0,\"All other user data will be deleted\"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"        \"],[6,\"ul\"],[8],[0,\"\\n            \"],[6,\"li\"],[8],[0,\"User will not have access to this blog anymore\"],[9],[0,\"\\n            \"],[6,\"li\"],[8],[0,\"All user data will be deleted.\"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[6,\"button\"],[10,\"class\",\"gh-btn\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[6,\"span\"],[8],[0,\"Cancel\"],[9],[9],[0,\"\\n\"],[4,\"if\",[[22,[\"user\",\"count\",\"posts\"]]],null,{\"statements\":[[0,\"        \"],[1,[26,\"gh-task-button\",[\"Delete user and their posts\"],[[\"successText\",\"task\",\"class\"],[\"Deleted\",[22,[\"deleteUser\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"        \"],[1,[26,\"gh-task-button\",[\"Delete user\"],[[\"successText\",\"task\",\"class\"],[\"Deleted\",[22,[\"deleteUser\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],false],[0,\"\\n\"]],\"parameters\":[]}],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modal-delete-user.hbs" } });
});
define("ghost-admin/templates/components/modal-import-subscribers", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "0cACjNm1", "block": "{\"symbols\":[],\"statements\":[[6,\"header\"],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[6,\"h1\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"response\"]]],null,{\"statements\":[[0,\"            Import Successful\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"            Import Subscribers\\n\"]],\"parameters\":[]}],[0,\"    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"a\"],[10,\"class\",\"close\"],[10,\"href\",\"\"],[10,\"title\",\"Close\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[1,[26,\"svg-jar\",[\"close\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-body\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"response\"]]],null,{\"statements\":[[0,\"        \"],[6,\"table\"],[10,\"class\",\"subscribers-import-results\"],[8],[0,\"\\n            \"],[6,\"tr\"],[8],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"Imported:\"],[9],[0,\"\\n                \"],[6,\"td\"],[10,\"align\",\"left\"],[8],[1,[22,[\"response\",\"imported\"]],false],[9],[0,\"\\n            \"],[9],[0,\"\\n\"],[4,\"if\",[[22,[\"response\",\"duplicates\"]]],null,{\"statements\":[[0,\"                \"],[6,\"tr\"],[8],[0,\"\\n                    \"],[6,\"td\"],[8],[0,\"Duplicates:\"],[9],[0,\"\\n                    \"],[6,\"td\"],[10,\"align\",\"left\"],[8],[1,[22,[\"response\",\"duplicates\"]],false],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"if\",[[22,[\"response\",\"invalid\"]]],null,{\"statements\":[[0,\"                \"],[6,\"tr\"],[8],[0,\"\\n                    \"],[6,\"td\"],[8],[0,\"Invalid:\"],[9],[0,\"\\n                    \"],[6,\"td\"],[10,\"align\",\"left\"],[8],[1,[22,[\"response\",\"invalid\"]],false],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"        \"],[1,[26,\"gh-file-uploader\",null,[[\"url\",\"paramName\",\"labelText\",\"uploadStarted\",\"uploadFinished\",\"uploadSuccess\"],[[22,[\"uploadUrl\"]],\"subscribersfile\",\"Select or drag-and-drop a CSV file.\",[26,\"action\",[[21,0,[]],\"uploadStarted\"],null],[26,\"action\",[[21,0,[]],\"uploadFinished\"],null],[26,\"action\",[[21,0,[]],\"uploadSuccess\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[]}],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[6,\"button\"],[11,\"disabled\",[20,\"closeDisabled\"],null],[10,\"class\",\"gh-btn\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[0,\"\\n        \"],[6,\"span\"],[8],[4,\"if\",[[22,[\"response\"]]],null,{\"statements\":[[0,\"Close\"]],\"parameters\":[]},{\"statements\":[[0,\"Cancel\"]],\"parameters\":[]}],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modal-import-subscribers.hbs" } });
});
define("ghost-admin/templates/components/modal-invite-new-user", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "0EJTJmzm", "block": "{\"symbols\":[],\"statements\":[[6,\"header\"],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[6,\"h1\"],[8],[0,\"Invite a New User\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"a\"],[10,\"class\",\"close\"],[10,\"href\",\"\"],[10,\"title\",\"Close\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[1,[26,\"svg-jar\",[\"close\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[6,\"fieldset\"],[8],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"errors\"]],[22,[\"hasValidated\"]],\"email\"]],{\"statements\":[[0,\"            \"],[6,\"label\"],[10,\"for\",\"new-user-email\"],[8],[0,\"Email Address\"],[9],[0,\"\\n            \"],[1,[26,\"gh-text-input\",null,[[\"class\",\"id\",\"type\",\"placeholder\",\"name\",\"autofocus\",\"autocapitalize\",\"autocorrect\",\"value\",\"input\",\"keyEvents\",\"focus-out\"],[\"email\",\"new-user-email\",\"email\",\"Email Address\",\"email\",\"autofocus\",\"off\",\"off\",[26,\"readonly\",[[22,[\"email\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"email\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"hash\",null,[[\"Enter\"],[[26,\"action\",[[21,0,[]],\"confirm\"],null]]]],[26,\"action\",[[21,0,[]],\"validate\",\"email\"],null]]]],false],[0,\"\\n            \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"errors\"]],\"email\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"form-group for-select\"],[8],[0,\"\\n            \"],[6,\"label\"],[10,\"for\",\"new-user-role\"],[8],[0,\"Role\"],[9],[0,\"\\n            \"],[6,\"span\"],[10,\"class\",\"gh-select\"],[8],[0,\"\\n                \"],[1,[26,\"one-way-select\",null,[[\"id\",\"name\",\"options\",\"optionValuePath\",\"optionLabelPath\",\"value\",\"update\"],[\"new-user-role\",\"role\",[22,[\"roles\"]],\"id\",\"name\",[22,[\"role\"]],[26,\"action\",[[21,0,[]],\"setRole\"],null]]]],false],[0,\"\\n                \"],[1,[26,\"svg-jar\",[\"arrow-down-small\"],null],false],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[1,[26,\"gh-task-button\",[\"Send invitation now\"],[[\"successText\",\"task\",\"class\"],[\"Sent\",[22,[\"sendInvitation\"]],\"gh-btn gh-btn-green gh-btn-icon\"]]],false],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modal-invite-new-user.hbs" } });
});
define("ghost-admin/templates/components/modal-leave-editor", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "LAA0J6v0", "block": "{\"symbols\":[],\"statements\":[[6,\"header\"],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[6,\"h1\"],[8],[0,\"Are you sure you want to leave this page?\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"a\"],[10,\"class\",\"close\"],[10,\"href\",\"\"],[10,\"title\",\"Close\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[1,[26,\"svg-jar\",[\"close\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[6,\"p\"],[8],[0,\"\\n        Hey there! It looks like you're in the middle of writing something and\\n        you haven't saved all of your content.\\n    \"],[9],[0,\"\\n\\n    \"],[6,\"p\"],[8],[0,\"Save before you go!\"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[6,\"button\"],[10,\"class\",\"gh-btn\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[6,\"span\"],[8],[0,\"Stay\"],[9],[9],[0,\"\\n    \"],[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-red\"],[3,\"action\",[[21,0,[]],\"confirm\"]],[8],[6,\"span\"],[8],[0,\"Leave\"],[9],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modal-leave-editor.hbs" } });
});
define("ghost-admin/templates/components/modal-leave-settings", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "h7JIFJ5l", "block": "{\"symbols\":[],\"statements\":[[6,\"header\"],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[6,\"h1\"],[8],[0,\"Are you sure you want to leave this page?\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"a\"],[10,\"class\",\"close\"],[10,\"href\",\"\"],[10,\"title\",\"Close\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[1,[26,\"svg-jar\",[\"close\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[6,\"p\"],[8],[0,\"\\n        Hey there! It looks like you didn't save the changes you made.\\n    \"],[9],[0,\"\\n\\n    \"],[6,\"p\"],[8],[0,\"Save before you go!\"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[6,\"button\"],[10,\"class\",\"gh-btn\"],[10,\"data-test-stay-button\",\"\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[6,\"span\"],[8],[0,\"Stay\"],[9],[9],[0,\"\\n    \"],[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-red\"],[10,\"data-test-leave-button\",\"\"],[3,\"action\",[[21,0,[]],\"confirm\"]],[8],[6,\"span\"],[8],[0,\"Leave\"],[9],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modal-leave-settings.hbs" } });
});
define("ghost-admin/templates/components/modal-markdown-help", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "zZtsTiDw", "block": "{\"symbols\":[],\"statements\":[[6,\"header\"],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[6,\"h1\"],[8],[0,\"Markdown Help\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"a\"],[10,\"class\",\"close\"],[10,\"href\",\"\"],[10,\"title\",\"Close\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[1,[26,\"svg-jar\",[\"close\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[6,\"section\"],[10,\"class\",\"markdown-help-container\"],[8],[0,\"\\n        \"],[6,\"table\"],[10,\"class\",\"modal-markdown-help-table\"],[8],[0,\"\\n            \"],[6,\"thead\"],[8],[0,\"\\n            \"],[6,\"tr\"],[8],[0,\"\\n                \"],[6,\"th\"],[8],[0,\"Markdown\"],[9],[0,\"\\n                \"],[6,\"th\"],[8],[0,\"Result\"],[9],[0,\"\\n                \"],[6,\"th\"],[8],[0,\"Shortcut\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"tbody\"],[8],[0,\"\\n            \"],[6,\"tr\"],[8],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"**text**\"],[9],[0,\"\\n                \"],[6,\"td\"],[8],[6,\"strong\"],[8],[0,\"Bold\"],[9],[9],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"Ctrl/⌘ + B\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"tr\"],[8],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"*text*\"],[9],[0,\"\\n                \"],[6,\"td\"],[8],[6,\"em\"],[8],[0,\"Emphasize\"],[9],[9],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"Ctrl/⌘ + I\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"tr\"],[8],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"~~text~~\"],[9],[0,\"\\n                \"],[6,\"td\"],[8],[6,\"del\"],[8],[0,\"Strike-through\"],[9],[9],[0,\"\\n                \"],[6,\"td\"],[8],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"tr\"],[8],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"[title](http://)\"],[9],[0,\"\\n                \"],[6,\"td\"],[8],[6,\"a\"],[10,\"href\",\"#\"],[8],[0,\"Link\"],[9],[9],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"Ctrl/⌘ + K\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"tr\"],[8],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"`code`\"],[9],[0,\"\\n                \"],[6,\"td\"],[8],[6,\"code\"],[8],[0,\"Inline Code\"],[9],[9],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"Ctrl/⌘ + Alt + C\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"tr\"],[8],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"![alt](http://)\"],[9],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"Image\"],[9],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"Ctrl/⌘ + Shift + I\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"tr\"],[8],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"* item\"],[9],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"List\"],[9],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"Ctrl/⌘ + L\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"tr\"],[8],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"1. item\"],[9],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"Ordered List\"],[9],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"Ctrl/⌘ + Alt + L\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"tr\"],[8],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"> quote\"],[9],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"Blockquote\"],[9],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"Ctrl/⌘ + '\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"tr\"],[8],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"==Highlight==\"],[9],[0,\"\\n                \"],[6,\"td\"],[8],[6,\"mark\"],[8],[0,\"Highlight\"],[9],[9],[0,\"\\n                \"],[6,\"td\"],[8],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"tr\"],[8],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"# Heading\"],[9],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"H1\"],[9],[0,\"\\n                \"],[6,\"td\"],[8],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"tr\"],[8],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"## Heading\"],[9],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"H2\"],[9],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"Ctrl/⌘ + H\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"tr\"],[8],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"### Heading\"],[9],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"H3\"],[9],[0,\"\\n                \"],[6,\"td\"],[8],[0,\"Ctrl/⌘ + H (x2)\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n        For further Markdown syntax reference: \"],[6,\"a\"],[10,\"href\",\"https://help.ghost.org/hc/en-us/articles/224410728-Markdown-Guide\"],[10,\"target\",\"_blank\"],[8],[0,\"Markdown Documentation\"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modal-markdown-help.hbs" } });
});
define("ghost-admin/templates/components/modal-new-subscriber", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "q1f53sIz", "block": "{\"symbols\":[],\"statements\":[[6,\"header\"],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[6,\"h1\"],[8],[0,\"Add a Subscriber\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"a\"],[10,\"class\",\"close\"],[10,\"href\",\"\"],[10,\"title\",\"Close\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[1,[26,\"svg-jar\",[\"close\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[6,\"fieldset\"],[8],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"subscriber\",\"errors\"]],[22,[\"subscriber\",\"hasValidated\"]],\"email\"]],{\"statements\":[[0,\"            \"],[6,\"label\"],[10,\"for\",\"new-subscriber-email\"],[8],[0,\"Email Address\"],[9],[0,\"\\n            \"],[6,\"input\"],[11,\"value\",[22,[\"subscriber\",\"email\"]],null],[11,\"oninput\",[26,\"action\",[[21,0,[]],\"updateEmail\"],[[\"value\"],[\"target.value\"]]],null],[10,\"id\",\"new-subscriber-email\"],[10,\"class\",\"gh-input email\"],[10,\"placeholder\",\"Email Address\"],[10,\"name\",\"email\"],[10,\"autofocus\",\"autofocus\"],[10,\"autocapitalize\",\"off\"],[10,\"autocorrect\",\"off\"],[10,\"type\",\"email\"],[8],[9],[0,\"\\n            \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"subscriber\",\"errors\"]],\"email\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[6,\"button\"],[10,\"class\",\"gh-btn\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[6,\"span\"],[8],[0,\"Cancel\"],[9],[9],[0,\"\\n    \"],[1,[26,\"gh-task-button\",[\"Add\"],[[\"successText\",\"task\",\"class\"],[\"Added\",[22,[\"addSubscriber\"]],\"gh-btn gh-btn-green gh-btn-icon\"]]],false],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modal-new-subscriber.hbs" } });
});
define("ghost-admin/templates/components/modal-re-authenticate", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "y6R5D4PP", "block": "{\"symbols\":[],\"statements\":[[6,\"header\"],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[6,\"h1\"],[8],[0,\"Please re-authenticate\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"a\"],[10,\"class\",\"close\"],[10,\"href\",\"\"],[10,\"title\",\"Close\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[1,[26,\"svg-jar\",[\"close\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[6,\"div\"],[11,\"class\",[27,[\"modal-body \",[26,\"if\",[[22,[\"authenticationError\"]],\"error\"],null]]]],[8],[0,\"\\n\\n    \"],[6,\"form\"],[10,\"id\",\"login\"],[10,\"class\",\"login-form\"],[10,\"method\",\"post\"],[10,\"novalidate\",\"novalidate\"],[3,\"action\",[[21,0,[]],\"confirm\"],[[\"on\"],[\"submit\"]]],[8],[0,\"\\n\"],[4,\"gh-validation-status-container\",null,[[\"class\",\"errors\",\"property\",\"hasValidated\"],[\"password-wrap\",[22,[\"errors\"]],\"password\",[22,[\"hasValidated\"]]]],{\"statements\":[[0,\"            \"],[1,[26,\"gh-text-input\",null,[[\"class\",\"type\",\"placeholder\",\"name\",\"value\",\"input\"],[\"password\",\"password\",\"Password\",\"password\",[26,\"readonly\",[[22,[\"password\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"password\"]]],null]],[[\"value\"],[\"target.value\"]]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[6,\"div\"],[8],[0,\"\\n            \"],[1,[26,\"gh-task-button\",[\"Log in\"],[[\"task\",\"class\",\"type\"],[[22,[\"reauthenticate\"]],\"gh-btn gh-btn-blue gh-btn-icon\",\"submit\"]]],false],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"authenticationError\"]]],null,{\"statements\":[[0,\"     \"],[6,\"p\"],[10,\"class\",\"response\"],[8],[1,[20,\"authenticationError\"],false],[9],[0,\"\\n\"]],\"parameters\":[]},null],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modal-re-authenticate.hbs" } });
});
define("ghost-admin/templates/components/modal-suspend-user", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "7n5Z7HTr", "block": "{\"symbols\":[],\"statements\":[[6,\"header\"],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[6,\"h1\"],[8],[0,\"Are you sure you want to suspend this user?\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"a\"],[10,\"class\",\"close\"],[10,\"href\",\"\"],[10,\"title\",\"Close\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[1,[26,\"svg-jar\",[\"close\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[6,\"strong\"],[8],[0,\"WARNING:\"],[9],[0,\" This user will no longer be able to log in but their posts will be kept.\\n\"],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[6,\"button\"],[10,\"class\",\"gh-btn\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[6,\"span\"],[8],[0,\"Cancel\"],[9],[9],[0,\"\\n    \"],[1,[26,\"gh-task-button\",[\"Suspend\"],[[\"successText\",\"task\",\"class\",\"data-test-modal-confirm\"],[\"Suspended\",[22,[\"suspendUser\"]],\"gh-btn gh-btn-red gh-btn-icon\",true]]],false],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modal-suspend-user.hbs" } });
});
define("ghost-admin/templates/components/modal-theme-warnings", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "XVmcETZ2", "block": "{\"symbols\":[\"error\",\"error\",\"error\"],\"statements\":[[6,\"header\"],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[6,\"h1\"],[10,\"data-test-theme-warnings-title\",\"\"],[8],[0,\"\\n\"],[4,\"unless\",[[22,[\"canActivate\"]]],null,{\"statements\":[[0,\"            \"],[1,[20,\"title\"],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"            \"],[1,[20,\"title\"],false],[0,\" with \"],[4,\"if\",[[22,[\"errors\"]]],null,{\"statements\":[[0,\"errors\"]],\"parameters\":[]},{\"statements\":[[0,\"warnings\"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[]}],[0,\"    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"a\"],[10,\"class\",\"close\"],[10,\"href\",\"#\"],[10,\"title\",\"Close\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[1,[26,\"svg-jar\",[\"close\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[6,\"ul\"],[10,\"class\",\"theme-validation-errors\"],[10,\"data-test-theme-warnings\",\"\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"message\"]]],null,{\"statements\":[[0,\"            \"],[6,\"li\"],[8],[0,\"\\n                \"],[6,\"p\"],[10,\"data-test-theme-warnings-message\",\"\"],[8],[1,[20,\"message\"],false],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"if\",[[22,[\"fatalErrors\"]]],null,{\"statements\":[[0,\"            \"],[6,\"div\"],[10,\"class\",\"theme-validation-errordescription\"],[8],[0,\"\\n                \"],[6,\"h2\"],[10,\"class\",\"theme-validation-errortype fatal\"],[8],[0,\"Fatal Errors\"],[9],[0,\"\\n                \"],[6,\"p\"],[8],[6,\"em\"],[8],[0,\"(Must-fix to activate theme)\"],[9],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"each\",[[22,[\"fatalErrors\"]]],null,{\"statements\":[[0,\"            \"],[6,\"li\"],[10,\"class\",\"theme-validation-item\"],[8],[0,\"\\n                \"],[1,[26,\"gh-theme-error-li\",null,[[\"error\"],[[21,3,[]]]]],false],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[3]},null],[0,\"\\n\"],[4,\"if\",[[22,[\"errors\"]]],null,{\"statements\":[[0,\"            \"],[6,\"div\"],[10,\"class\",\"theme-validation-errordescription\"],[8],[0,\"\\n                \"],[6,\"h2\"],[10,\"class\",\"theme-validation-errortype\"],[8],[0,\"Errors\"],[9],[0,\"\\n                \"],[6,\"p\"],[8],[6,\"em\"],[8],[0,\"(Very recommended to fix, functionality \"],[6,\"span\"],[8],[0,\"could\"],[9],[0,\" be restricted)\"],[9],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"each\",[[22,[\"errors\"]]],null,{\"statements\":[[0,\"            \"],[6,\"li\"],[10,\"class\",\"theme-validation-item\"],[8],[0,\"\\n                \"],[1,[26,\"gh-theme-error-li\",null,[[\"error\"],[[21,2,[]]]]],false],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"\\n\"],[4,\"if\",[[22,[\"warnings\"]]],null,{\"statements\":[[0,\"            \"],[6,\"div\"],[10,\"class\",\"theme-validation-errordescription\"],[8],[0,\"\\n                \"],[6,\"h2\"],[10,\"class\",\"theme-validation-errortype\"],[8],[0,\"Warnings\"],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"each\",[[22,[\"warnings\"]]],null,{\"statements\":[[0,\"            \"],[6,\"li\"],[10,\"class\",\"theme-validation-item\"],[8],[0,\"\\n                \"],[1,[26,\"gh-theme-error-li\",null,[[\"error\"],[[21,1,[]]]]],false],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[6,\"button\"],[10,\"class\",\"gh-btn\"],[10,\"data-test-modal-close-button\",\"\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[0,\"\\n        \"],[6,\"span\"],[8],[0,\"Close\"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modal-theme-warnings.hbs" } });
});
define("ghost-admin/templates/components/modal-transfer-owner", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "VXlLS2Br", "block": "{\"symbols\":[],\"statements\":[[6,\"header\"],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[6,\"h1\"],[8],[0,\"Transfer Ownership\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"a\"],[10,\"class\",\"close\"],[10,\"href\",\"\"],[10,\"title\",\"Close\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[1,[26,\"svg-jar\",[\"close\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[6,\"p\"],[8],[0,\"\\n        Are you sure you want to transfer the ownership of this blog?\\n        You will not be able to undo this action.\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[6,\"button\"],[10,\"class\",\"gh-btn\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[6,\"span\"],[8],[0,\"Cancel\"],[9],[9],[0,\"\\n    \"],[1,[26,\"gh-task-button\",[\"Yep - I'm sure\"],[[\"task\",\"class\"],[[22,[\"transferOwnership\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],false],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modal-transfer-owner.hbs" } });
});
define("ghost-admin/templates/components/modal-unsuspend-user", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "aZ1lyXN0", "block": "{\"symbols\":[],\"statements\":[[6,\"header\"],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[6,\"h1\"],[8],[0,\"Are you sure you want to un-suspend this user?\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"a\"],[10,\"class\",\"close\"],[10,\"href\",\"\"],[10,\"title\",\"Close\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[1,[26,\"svg-jar\",[\"close\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[6,\"strong\"],[8],[0,\"WARNING:\"],[9],[0,\" This user will be able to log in again and will have the same permissions they had previously.\\n\"],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[6,\"button\"],[10,\"class\",\"gh-btn\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[6,\"span\"],[8],[0,\"Cancel\"],[9],[9],[0,\"\\n    \"],[1,[26,\"gh-task-button\",[\"Un-suspend\"],[[\"successText\",\"task\",\"class\",\"data-test-modal-confirm\"],[\"Suspended\",[22,[\"unsuspendUser\"]],\"gh-btn gh-btn-red gh-btn-icon\",true]]],false],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modal-unsuspend-user.hbs" } });
});
define("ghost-admin/templates/components/modal-upload-image", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "956atlix", "block": "{\"symbols\":[],\"statements\":[[6,\"div\"],[10,\"class\",\"modal-body\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"url\"]]],null,{\"statements\":[[0,\"        \"],[6,\"div\"],[10,\"class\",\"gh-image-uploader -with-image\"],[8],[0,\"\\n            \"],[6,\"div\"],[8],[6,\"img\"],[11,\"src\",[20,\"url\"],null],[8],[9],[9],[0,\"\\n            \"],[6,\"a\"],[10,\"class\",\"image-cancel\"],[10,\"title\",\"Delete\"],[3,\"action\",[[21,0,[]],\"removeImage\"]],[8],[0,\"\\n                \"],[1,[26,\"svg-jar\",[\"trash\"],null],false],[0,\"\\n                \"],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Delete\"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"        \"],[1,[26,\"gh-image-uploader\",null,[[\"image\",\"saveButton\",\"update\",\"uploadStarted\",\"uploadFinished\",\"accept\",\"extensions\",\"uploadUrl\"],[[22,[\"newUrl\"]],false,[26,\"action\",[[21,0,[]],\"fileUploaded\"],null],[26,\"action\",[[21,0,[]],\"isUploading\"],null],[26,\"action\",[[21,0,[]],\"isUploading\"],null],[22,[\"model\",\"accept\"]],[22,[\"model\",\"extensions\"]],[22,[\"model\",\"uploadUrl\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]}],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[6,\"button\"],[10,\"class\",\"gh-btn\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[6,\"span\"],[8],[0,\"Cancel\"],[9],[9],[0,\"\\n\"],[4,\"if\",[[22,[\"_isUploading\"]]],null,{\"statements\":[[0,\"        \"],[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-blue right gh-btn-icon disabled\"],[8],[6,\"span\"],[8],[0,\"Save\"],[9],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"        \"],[1,[26,\"gh-task-button\",null,[[\"task\",\"class\",\"data-test-modal-accept-button\"],[[22,[\"uploadImage\"]],\"gh-btn gh-btn-blue right gh-btn-icon\",true]]],false],[0,\"\\n\"]],\"parameters\":[]}],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modal-upload-image.hbs" } });
});
define("ghost-admin/templates/components/modal-upload-theme", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "BfgTMJJx", "block": "{\"symbols\":[\"error\",\"error\",\"error\",\"error\"],\"statements\":[[6,\"header\"],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[6,\"h1\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"theme\"]]],null,{\"statements\":[[4,\"if\",[[22,[\"hasWarningsOrErrors\"]]],null,{\"statements\":[[0,\"                Upload successful with \"],[4,\"if\",[[22,[\"validationErrors\"]]],null,{\"statements\":[[0,\"errors\"]],\"parameters\":[]},{\"statements\":[[0,\"warnings\"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                Upload successful!\\n\"]],\"parameters\":[]}]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[26,\"or\",[[22,[\"validationErrors\"]],[22,[\"fatalValidationErrors\"]]],null]],null,{\"statements\":[[0,\"            Invalid theme\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"            Upload a theme\\n        \"]],\"parameters\":[]}]],\"parameters\":[]}],[0,\"    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[6,\"a\"],[10,\"class\",\"close\"],[10,\"href\",\"#\"],[10,\"title\",\"Close\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[1,[26,\"svg-jar\",[\"close\"],null],false],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-body\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"theme\"]]],null,{\"statements\":[[4,\"if\",[[22,[\"hasWarningsOrErrors\"]]],null,{\"statements\":[[0,\"             \"],[6,\"ul\"],[10,\"class\",\"theme-validation-errors\"],[8],[0,\"\\n                \"],[6,\"li\"],[8],[0,\"\\n                    \"],[6,\"p\"],[8],[0,\"\\n                        \\\"\"],[1,[20,\"themeName\"],false],[0,\"\\\" uploaded successfully but some \"],[4,\"if\",[[22,[\"validationErrors\"]]],null,{\"statements\":[[0,\"errors\"]],\"parameters\":[]},{\"statements\":[[0,\"warnings\"]],\"parameters\":[]}],[0,\" were detected.\\n                        You are still able to use and activate the theme. Here's your report...\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"validationErrors\"]]],null,{\"statements\":[[0,\"                    \"],[6,\"div\"],[10,\"class\",\"theme-validation-errordescription\"],[8],[0,\"\\n                        \"],[6,\"h2\"],[10,\"class\",\"theme-validation-errortype\"],[8],[0,\"Errors\"],[9],[0,\"\\n                        \"],[6,\"p\"],[8],[6,\"em\"],[8],[0,\"(Very recommended to fix, functionality \"],[6,\"span\"],[8],[0,\"could\"],[9],[0,\" be restricted)\"],[9],[9],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"each\",[[22,[\"validationErrors\"]]],null,{\"statements\":[[0,\"                    \"],[6,\"li\"],[10,\"class\",\"theme-validation-item\"],[8],[0,\"\\n                        \"],[1,[26,\"gh-theme-error-li\",null,[[\"error\"],[[21,4,[]]]]],false],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[4]},null],[0,\"\\n\"],[4,\"if\",[[22,[\"validationWarnings\"]]],null,{\"statements\":[[0,\"                    \"],[6,\"div\"],[10,\"class\",\"theme-validation-errordescription\"],[8],[0,\"\\n                        \"],[6,\"h2\"],[10,\"class\",\"theme-validation-errortype\"],[8],[0,\"Warnings\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"each\",[[22,[\"validationWarnings\"]]],null,{\"statements\":[[0,\"                    \"],[6,\"li\"],[10,\"class\",\"theme-validation-item\"],[8],[0,\"\\n                        \"],[1,[26,\"gh-theme-error-li\",null,[[\"error\"],[[21,3,[]]]]],false],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[3]},null],[0,\"            \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"            \"],[6,\"p\"],[8],[0,\"\\n                \\\"\"],[1,[20,\"themeName\"],false],[0,\"\\\" uploaded successfully.\\n                \"],[4,\"if\",[[22,[\"canActivateTheme\"]]],null,{\"statements\":[[0,\"Do you want to activate it now?\"]],\"parameters\":[]},null],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[22,[\"displayOverwriteWarning\"]]],null,{\"statements\":[[0,\"        \"],[6,\"p\"],[8],[0,\"\\n            \\\"\"],[1,[20,\"fileThemeName\"],false],[0,\"\\\" will overwrite an existing theme of the same name. Are you sure?\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[26,\"or\",[[22,[\"validationErrors\"]],[22,[\"fatalValidationErrors\"]]],null]],null,{\"statements\":[[0,\"        \"],[6,\"ul\"],[10,\"class\",\"theme-validation-errors\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"fatalValidationErrors\"]]],null,{\"statements\":[[0,\"                \"],[6,\"div\"],[10,\"class\",\"theme-validation-errordescription\"],[8],[0,\"\\n                    \"],[6,\"h2\"],[10,\"class\",\"theme-validation-errortype fatal\"],[8],[0,\"Fatal Errors\"],[9],[0,\"\\n                    \"],[6,\"p\"],[8],[6,\"em\"],[8],[0,\"(Must-fix to activate theme)\"],[9],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"each\",[[22,[\"fatalValidationErrors\"]]],null,{\"statements\":[[0,\"                \"],[6,\"li\"],[10,\"class\",\"theme-validation-item\"],[8],[0,\"\\n                    \"],[1,[26,\"gh-theme-error-li\",null,[[\"error\"],[[21,2,[]]]]],false],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"\\n\"],[4,\"if\",[[22,[\"validationErrors\"]]],null,{\"statements\":[[0,\"                \"],[6,\"div\"],[10,\"class\",\"theme-validation-errordescription\"],[8],[0,\"\\n                    \"],[6,\"h2\"],[10,\"class\",\"theme-validation-errortype\"],[8],[0,\"Errors\"],[9],[0,\"\\n                    \"],[6,\"p\"],[8],[6,\"em\"],[8],[0,\"(Very recommended to fix, functionality \"],[6,\"span\"],[8],[0,\"could\"],[9],[0,\" be restricted)\"],[9],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"each\",[[22,[\"validationErrors\"]]],null,{\"statements\":[[0,\"                \"],[6,\"li\"],[10,\"class\",\"theme-validation-item\"],[8],[0,\"\\n                    \"],[1,[26,\"gh-theme-error-li\",null,[[\"error\"],[[21,1,[]]]]],false],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"        \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"        \"],[1,[26,\"gh-file-uploader\",null,[[\"url\",\"paramName\",\"accept\",\"labelText\",\"validate\",\"uploadStarted\",\"uploadFinished\",\"uploadSuccess\",\"uploadFailed\",\"listenTo\"],[[22,[\"uploadUrl\"]],\"theme\",[22,[\"accept\"]],\"Click to select or drag-and-drop your theme zip file here.\",[26,\"action\",[[21,0,[]],\"validateTheme\"],null],[26,\"action\",[[21,0,[]],\"uploadStarted\"],null],[26,\"action\",[[21,0,[]],\"uploadFinished\"],null],[26,\"action\",[[21,0,[]],\"uploadSuccess\"],null],[26,\"action\",[[21,0,[]],\"uploadFailed\"],null],\"themeUploader\"]]],false],[0,\"\\n    \"]],\"parameters\":[]}]],\"parameters\":[]}]],\"parameters\":[]}],[9],[0,\"\\n\\n\"],[6,\"div\"],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[6,\"button\"],[11,\"disabled\",[20,\"closeDisabled\"],null],[10,\"class\",\"gh-btn\"],[10,\"data-test-close-button\",\"\"],[3,\"action\",[[21,0,[]],\"closeModal\"]],[8],[0,\"\\n        \"],[6,\"span\"],[8],[4,\"if\",[[22,[\"theme\"]]],null,{\"statements\":[[0,\"Close\"]],\"parameters\":[]},{\"statements\":[[0,\"Cancel\"]],\"parameters\":[]}],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[4,\"if\",[[22,[\"displayOverwriteWarning\"]]],null,{\"statements\":[[0,\"        \"],[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-red\"],[10,\"data-test-overwrite-button\",\"\"],[3,\"action\",[[21,0,[]],\"confirmOverwrite\"]],[8],[0,\"\\n            \"],[6,\"span\"],[8],[0,\"Overwrite\"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"if\",[[22,[\"validationErrors\"]]],null,{\"statements\":[[0,\"        \"],[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-green\"],[10,\"data-test-try-again-button\",\"\"],[3,\"action\",[[21,0,[]],\"reset\"]],[8],[0,\"\\n            \"],[6,\"span\"],[8],[0,\"Try Again\"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"if\",[[22,[\"canActivateTheme\"]]],null,{\"statements\":[[0,\"        \"],[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-green\"],[10,\"data-test-activate-now-button\",\"\"],[3,\"action\",[[21,0,[]],\"activate\"]],[8],[0,\"\\n            \"],[6,\"span\"],[8],[0,\"Activate Now\"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modal-upload-theme.hbs" } });
});
define("ghost-admin/templates/components/object-bin", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "9xK7fu7M", "block": "{\"symbols\":[\"obj\",\"&default\"],\"statements\":[[4,\"draggable-object-target\",null,[[\"action\"],[\"handleObjectDropped\"]],{\"statements\":[[0,\"  \"],[6,\"div\"],[10,\"class\",\"object-bin-title\"],[8],[1,[20,\"name\"],false],[9],[0,\"\\n  \"],[6,\"br\"],[8],[9],[0,\"\\n\"],[4,\"each\",[[22,[\"model\"]]],null,{\"statements\":[[4,\"draggable-object\",null,[[\"action\",\"content\"],[\"handleObjectDragged\",[21,1,[]]]],{\"statements\":[[0,\"      \"],[13,2,[[21,1,[]]]],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[1]},null]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/object-bin.hbs" } });
});
define("ghost-admin/templates/components/power-select-vertical-collection-options", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "RLfLhf6h", "block": "{\"symbols\":[\"opt\",\"index\",\"&default\"],\"statements\":[[4,\"if\",[[22,[\"select\",\"loading\"]]],null,{\"statements\":[[4,\"if\",[[22,[\"loadingMessage\"]]],null,{\"statements\":[[0,\"        \"],[6,\"li\"],[10,\"class\",\"ember-power-select-option ember-power-select-option--loading-message\"],[10,\"role\",\"option\"],[8],[1,[20,\"loadingMessage\"],false],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"vertical-collection\",[[22,[\"options\"]]],[[\"minHeight\",\"estimateHeight\",\"bufferSize\"],[30,6,10]],{\"statements\":[[0,\"    \"],[6,\"li\"],[10,\"class\",\"ember-power-select-option\"],[11,\"aria-selected\",[27,[[26,\"ember-power-select-is-selected\",[[21,1,[]],[22,[\"select\",\"selected\"]]],null]]]],[11,\"aria-disabled\",[26,\"ember-power-select-true-string-if-present\",[[21,1,[\"disabled\"]]],null],null],[11,\"aria-current\",[27,[[26,\"eq\",[[21,1,[]],[22,[\"select\",\"highlighted\"]]],null]]]],[11,\"data-option-index\",[27,[[20,\"groupIndex\"],[21,2,[]]]]],[10,\"role\",\"option\"],[8],[0,\"\\n        \"],[13,3,[[21,1,[]],[22,[\"select\"]]]],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[1,2]},null]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/power-select-vertical-collection-options.hbs" } });
});
define("ghost-admin/templates/components/power-select/trigger", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "f5wGK3+U", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[22,[\"select\",\"selected\"]]],null,{\"statements\":[[4,\"if\",[[22,[\"selectedItemComponent\"]]],null,{\"statements\":[[0,\"        \"],[1,[26,\"component\",[[22,[\"selectedItemComponent\"]]],[[\"option\",\"select\"],[[26,\"readonly\",[[22,[\"select\",\"selected\"]]],null],[26,\"readonly\",[[22,[\"select\"]]],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"        \"],[6,\"span\"],[10,\"class\",\"ember-power-select-selected-item\"],[8],[13,1,[[22,[\"select\",\"selected\"]],[22,[\"select\"]]]],[9],[0,\"\\n\"]],\"parameters\":[]}],[4,\"if\",[[26,\"and\",[[22,[\"allowClear\"]],[26,\"not\",[[22,[\"select\",\"disabled\"]]],null]],null]],null,{\"statements\":[[0,\"        \"],[6,\"span\"],[10,\"class\",\"ember-power-select-clear-btn\"],[11,\"onmousedown\",[26,\"action\",[[21,0,[]],\"clear\"],null],null],[11,\"ontouchstart\",[26,\"action\",[[21,0,[]],\"clear\"],null],null],[8],[0,\"×\"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[1,[26,\"component\",[[22,[\"placeholderComponent\"]]],[[\"placeholder\"],[[22,[\"placeholder\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]}],[1,[26,\"svg-jar\",[\"arrow-down-small\"],null],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/power-select/trigger.hbs" } });
});
define("ghost-admin/templates/components/sortable-objects", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Afdq/VDE", "block": "{\"symbols\":[\"&default\"],\"statements\":[[13,1]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/components/sortable-objects.hbs" } });
});
define("ghost-admin/templates/editor", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "j9BIUWfW", "block": "{\"symbols\":[\"editor\",\"post\",\"countdown\"],\"statements\":[[4,\"if\",[[22,[\"post\"]]],null,{\"statements\":[[4,\"gh-editor\",null,[[\"tagName\",\"class\",\"navIsClosed\"],[\"section\",\"gh-editor gh-view\",[22,[\"navIsClosed\"]]]],{\"statements\":[[0,\"        \"],[6,\"header\"],[11,\"class\",[27,[\"gh-editor-header br2 pe-none \",[21,1,[\"headerClass\"]],\" \",[26,\"if\",[[22,[\"infoMessage\"]],\"bg-white\"],null]]]],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"flex items-center pe-auto\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"ui\",\"isFullScreen\"]]],null,{\"statements\":[[0,\"                    \"],[6,\"div\"],[11,\"class\",[27,[[26,\"ui-text\",[\"ts\"],null],\" h9 br b--lightgrey pl3 pr4 flex items-center br2 br--left \",[26,\"unless\",[[22,[\"infoMessage\"]],\"bg-white\"],null]]]],[8],[0,\"\\n\"],[4,\"link-to\",[\"posts\"],[[\"classNames\"],[\"blue link fw4 flex items-center\"]],{\"statements\":[[0,\"                            \"],[1,[26,\"svg-jar\",[\"arrow-left\"],[[\"class\"],[\"w3 fill-blue mr1 nudge-right--2\"]]],false],[0,\"\\n                            Stories\\n\"]],\"parameters\":[]},null],[0,\"                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                \"],[6,\"div\"],[11,\"class\",[27,[\"flex items-center pl4 pr4 f8 nudge-left--1 h9 br2 br--right \",[26,\"unless\",[[22,[\"infoMessage\"]],\"bg-white\"],null]]]],[8],[0,\"\\n                    \"],[6,\"span\"],[10,\"class\",\"fw3 midgrey-l2\"],[8],[0,\"\\n                        \"],[1,[26,\"gh-editor-post-status\",null,[[\"post\",\"isSaving\"],[[22,[\"post\"]],[26,\"or\",[[22,[\"autosave\",\"isRunning\"]],[22,[\"saveTasks\",\"isRunning\"]]],null]]]],false],[0,\"\\n                    \"],[9],[0,\"\\n\"],[4,\"gh-scheduled-post-countdown\",null,[[\"post\"],[[22,[\"post\"]]]],{\"statements\":[[0,\"                    \"],[6,\"time\"],[11,\"datetime\",[27,[[21,2,[\"publishedAtUTC\"]]]]],[10,\"class\",\"green f8 ml5\"],[10,\"data-test-schedule-countdown\",\"\"],[8],[0,\"\\n                        Post will go live \"],[1,[21,3,[]],false],[0,\".\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[2,3]},null],[0,\"                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"infoMessage\"]]],null,{\"statements\":[[0,\"            \"],[6,\"div\"],[10,\"class\",\"gh-koenig-info miw88 flex flex-auto justify-center\"],[10,\"style\",\"pointer-events: auto\"],[8],[0,\"\\n                \"],[6,\"div\"],[11,\"class\",[27,[\"midgrey inline-flex tracked-1 center pa1 pl4 pr4 br3 justify-center items-start \",[26,\"if\",[[26,\"eq\",[[21,1,[\"headerClass\"]],\"gh-editor-header-small\"],null],\"bg-white\"],null]]]],[8],[0,\"\\n                    \"],[1,[26,\"svg-jar\",[\"idea\"],[[\"class\"],[\"w7 h7 fill-blue\"]]],false],[0,\"\\n                    \"],[6,\"p\"],[10,\"class\",\"ma0 pa0 ml1 nudge-top--2\"],[8],[0,\"\\n                        \"],[1,[20,\"infoMessage\"],false],[0,\"\\n                        \"],[6,\"button\"],[10,\"class\",\"blue fw5\"],[10,\"type\",\"button\"],[3,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"infoMessage\"]],\"\"],null]]],[8],[0,\"Got it\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n            \"],[6,\"section\"],[11,\"class\",[27,[\"view-actions br2 \",[26,\"unless\",[[22,[\"infoMessage\"]],\"bg-white\"],null]]]],[10,\"style\",\"pointer-events: auto\"],[8],[0,\"\\n\"],[4,\"unless\",[[22,[\"post\",\"isNew\"]]],null,{\"statements\":[[4,\"if\",[[22,[\"session\",\"user\",\"isContributor\"]]],null,{\"statements\":[[0,\"                        \"],[1,[26,\"gh-task-button\",[\"Save\"],[[\"task\",\"runningText\",\"class\",\"data-test-contributor-save\"],[[22,[\"save\"]],\"Saving\",\"gh-btn gh-btn-blue gh-btn-icon contributor-save-button\",true]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                        \"],[1,[26,\"gh-publishmenu\",null,[[\"post\",\"postStatus\",\"saveTask\",\"setSaveType\",\"onOpen\"],[[22,[\"post\"]],[22,[\"post\",\"status\"]],[22,[\"save\"]],[26,\"action\",[[21,0,[]],\"setSaveType\"],null],[26,\"action\",[[21,0,[]],\"cancelAutosave\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[0,\"\\n                \"],[6,\"button\"],[10,\"class\",\"post-settings\"],[10,\"title\",\"Settings\"],[10,\"data-test-psm-trigger\",\"\"],[10,\"type\",\"button\"],[3,\"action\",[[21,0,[]],\"openSettingsMenu\"],[[\"target\"],[[22,[\"ui\"]]]]],[8],[0,\"\\n                    \"],[1,[26,\"svg-jar\",[\"settings\"],null],false],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n\"],[0,\"        \"],[1,[26,\"gh-koenig-editor\",null,[[\"title\",\"titlePlaceholder\",\"onTitleChange\",\"onTitleBlur\",\"body\",\"bodyPlaceholder\",\"bodyAutofocus\",\"onBodyChange\",\"headerOffset\",\"scrollContainerSelector\",\"scrollOffsetTopSelector\",\"scrollOffsetBottomSelector\",\"onEditorCreated\",\"onWordCountChange\"],[[26,\"readonly\",[[22,[\"post\",\"titleScratch\"]]],null],\"Story Title\",[26,\"action\",[[21,0,[]],\"updateTitleScratch\"],null],[26,\"action\",[[21,0,[]],[26,\"perform\",[[22,[\"saveTitle\"]]],null]],null],[26,\"readonly\",[[22,[\"post\",\"scratch\"]]],null],\"Begin writing your story...\",[22,[\"shouldFocusEditor\"]],[26,\"action\",[[21,0,[]],\"updateScratch\"],null],[21,1,[\"headerHeight\"]],\".gh-koenig-editor\",\".gh-editor-header-small\",\".gh-mobile-nav-bar\",[26,\"action\",[[21,0,[]],\"setKoenigEditor\"],null],[26,\"action\",[[21,0,[]],\"updateWordCount\"],null]]]],false],[0,\"\\n\\n        \"],[6,\"div\"],[11,\"class\",[27,[\"absolute flex items-center br3 bg-white \",[26,\"if\",[[21,1,[\"headerClass\"]],\"right-4 bottom-4\",\"right-6 bottom-6\"],null]]]],[8],[0,\"\\n            \"],[6,\"div\"],[11,\"class\",[27,[\"midgrey-l2 \",[26,\"if\",[[21,1,[\"headerClass\"]],\"f-supersmall pl2 pr2\",\"f8 pl4 pr3\"],null],\" fw3\"]]],[8],[0,\"\\n                \"],[1,[26,\"pluralize\",[[22,[\"wordCount\",\"wordCount\"]],\"word\"],null],false],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"a\"],[10,\"href\",\"https://help.ghost.org/article/29-ghost-editor-overview\"],[11,\"class\",[27,[\"flex \",[26,\"if\",[[21,1,[\"headerClass\"]],\"pa2\",\"pa3\"],null]]]],[10,\"target\",\"_blank\"],[8],[1,[26,\"svg-jar\",[\"help\"],[[\"class\"],[\"w4 h4 stroke-midgrey-l2\"]]],false],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n\"]],\"parameters\":[1]},null],[0,\"\\n\"],[4,\"if\",[[22,[\"showDeletePostModal\"]]],null,{\"statements\":[[0,\"        \"],[1,[26,\"gh-fullscreen-modal\",[\"delete-post\"],[[\"model\",\"close\",\"modifier\"],[[26,\"hash\",null,[[\"post\",\"onSuccess\"],[[22,[\"post\"]],[26,\"route-action\",[\"redirectToContentScreen\"],null]]]],[26,\"action\",[[21,0,[]],\"toggleDeletePostModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[22,[\"showLeaveEditorModal\"]]],null,{\"statements\":[[0,\"        \"],[1,[26,\"gh-fullscreen-modal\",[\"leave-editor\"],[[\"confirm\",\"close\",\"modifier\"],[[26,\"action\",[[21,0,[]],\"leaveEditor\"],null],[26,\"action\",[[21,0,[]],\"toggleLeaveEditorModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[22,[\"showReAuthenticateModal\"]]],null,{\"statements\":[[0,\"        \"],[1,[26,\"gh-fullscreen-modal\",[\"re-authenticate\"],[[\"close\",\"modifier\"],[[26,\"action\",[[21,0,[]],\"toggleReAuthenticateModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"liquid-wormhole\",null,null,{\"statements\":[[0,\"        \"],[1,[26,\"gh-post-settings-menu\",null,[[\"post\",\"showSettingsMenu\",\"deletePost\",\"updateSlug\",\"savePost\"],[[22,[\"post\"]],[22,[\"ui\",\"showSettingsMenu\"]],[26,\"action\",[[21,0,[]],\"toggleDeletePostModal\"],null],[22,[\"updateSlug\"]],[22,[\"savePost\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"\\n\"],[1,[20,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/editor.hbs" } });
});
define("ghost-admin/templates/editor/edit-loading", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "2rLhVroj", "block": "{\"symbols\":[],\"statements\":[[6,\"div\"],[10,\"class\",\"gh-view\"],[8],[0,\"\\n    \"],[6,\"div\"],[10,\"class\",\"gh-content\"],[8],[0,\"\\n        \"],[1,[20,\"gh-loading-spinner\"],false],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/editor/edit-loading.hbs" } });
});
define("ghost-admin/templates/error", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "A+JOqMe7", "block": "{\"symbols\":[\"item\"],\"statements\":[[6,\"div\"],[10,\"class\",\"gh-view\"],[8],[0,\"\\n    \"],[6,\"section\"],[10,\"class\",\"error-content error-404 js-error-container\"],[8],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"error-details\"],[8],[0,\"\\n             \"],[6,\"img\"],[10,\"class\",\"error-ghost\"],[10,\"src\",\"assets/img/404-ghost@2x.png\"],[10,\"srcset\",\"assets/img/404-ghost.png 1x, assets/img/404-ghost@2x.png 2x\"],[8],[9],[0,\"\\n             \"],[6,\"section\"],[10,\"class\",\"error-message\"],[8],[0,\"\\n                 \"],[6,\"h1\"],[10,\"class\",\"error-code\"],[8],[1,[20,\"code\"],false],[9],[0,\"\\n                 \"],[6,\"h2\"],[10,\"class\",\"error-description\"],[8],[1,[20,\"message\"],false],[9],[0,\"\\n             \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"stack\"]]],null,{\"statements\":[[0,\"        \"],[6,\"section\"],[10,\"class\",\"error-stack\"],[8],[0,\"\\n            \"],[6,\"h3\"],[8],[0,\"Stack Trace\"],[9],[0,\"\\n            \"],[6,\"p\"],[8],[6,\"strong\"],[8],[1,[20,\"message\"],false],[9],[9],[0,\"\\n            \"],[6,\"ul\"],[10,\"class\",\"error-stack-list\"],[8],[0,\"\\n\"],[4,\"each\",[[22,[\"stack\"]]],null,{\"statements\":[[0,\"                    \"],[6,\"li\"],[8],[0,\"\\n                        at\\n                        \"],[4,\"if\",[[21,1,[\"function\"]]],null,{\"statements\":[[6,\"em\"],[10,\"class\",\"error-stack-function\"],[8],[1,[21,1,[\"function\"]],false],[9]],\"parameters\":[]},null],[0,\"\\n                        \"],[6,\"span\"],[10,\"class\",\"error-stack-file\"],[8],[0,\"(\"],[1,[21,1,[\"at\"]],false],[0,\")\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/error.hbs" } });
});
define("ghost-admin/templates/posts-loading", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "ID2qFf2c", "block": "{\"symbols\":[\"order\",\"tag\",\"author\",\"type\"],\"statements\":[[6,\"section\"],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[6,\"header\"],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[6,\"h2\"],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"Your stories\"],[9],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[4,\"link-to\",[\"editor.new\"],[[\"class\",\"data-test-new-post-button\"],[\"gh-btn gh-btn-green\",true]],{\"statements\":[[6,\"span\"],[8],[0,\"New story\"],[9]],\"parameters\":[]},null],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[6,\"div\"],[10,\"class\",\"gh-contentfilter\"],[8],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-contentfilter-left\"],[8],[0,\"\\n\"],[4,\"power-select\",null,[[\"placeholder\",\"selected\",\"options\",\"searchField\",\"onchange\",\"tagName\",\"classNames\",\"triggerClass\",\"dropdownClass\",\"matchTriggerWidth\",\"data-test-type-select\"],[\"All posts\",[22,[\"selectedType\"]],[22,[\"availableTypes\"]],\"name\",[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"k\"]]],null]],null],\"div\",\"gh-contentfilter-menu gh-contentfilter-type\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",false,true]],{\"statements\":[[0,\"                \"],[1,[21,4,[\"name\"]],false],[0,\"\\n\"]],\"parameters\":[4]},null],[0,\"\\n\"],[4,\"unless\",[[22,[\"session\",\"user\",\"isAuthorOrContributor\"]]],null,{\"statements\":[[4,\"power-select\",null,[[\"placeholder\",\"selected\",\"options\",\"searchField\",\"onchange\",\"tagName\",\"classNames\",\"triggerClass\",\"dropdownClass\",\"matchTriggerWidth\",\"data-test-author-select\"],[\"All authors\",[22,[\"selectedAuthor\"]],[22,[\"availableAuthors\"]],\"name\",[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"k\"]]],null]],null],\"div\",\"gh-contentfilter-menu gh-contentfilter-author\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",false,true]],{\"statements\":[[0,\"                \"],[1,[21,3,[\"name\"]],false],[0,\"\\n\"]],\"parameters\":[3]},null]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"power-select\",null,[[\"placeholder\",\"selected\",\"options\",\"searchField\",\"onchange\",\"tagName\",\"classNames\",\"triggerClass\",\"dropdownClass\",\"searchPlaceholder\",\"matchTriggerWidth\",\"data-test-tag-select\"],[\"All tags\",[22,[\"selectedTag\"]],[22,[\"availableTags\"]],\"name\",[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"k\"]]],null]],null],\"div\",\"gh-contentfilter-menu gh-contentfilter-tag\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",\"Search tags\",false,true]],{\"statements\":[[0,\"                \"],[1,[21,2,[\"name\"]],false],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"        \"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-contentfilter-right\"],[8],[0,\"\\n            Sort by:\\n\"],[4,\"power-select\",null,[[\"selected\",\"options\",\"searchEnabled\",\"onchange\",\"tagName\",\"classNames\",\"triggerClass\",\"dropdownClass\",\"horizontalPosition\",\"matchTriggerWidth\",\"data-test-order-select\"],[[22,[\"selectedOrder\"]],[22,[\"availableOrders\"]],false,[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"k\"]]],null]],null],\"div\",\"gh-contentfilter-menu gh-contentfilter-sort\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",\"right\",false,true]],{\"statements\":[[0,\"                \"],[1,[21,1,[\"name\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[6,\"div\"],[10,\"class\",\"gh-content\"],[8],[0,\"\\n        \"],[1,[20,\"gh-loading-spinner\"],false],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/posts-loading.hbs" } });
});
define("ghost-admin/templates/posts", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "SoGnGK9A", "block": "{\"symbols\":[\"post\",\"order\",\"tag\",\"author\",\"type\"],\"statements\":[[6,\"section\"],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[6,\"header\"],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[6,\"h2\"],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"Your stories\"],[9],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[4,\"link-to\",[\"editor.new\"],[[\"class\",\"data-test-new-post-button\"],[\"gh-btn gh-btn-green\",true]],{\"statements\":[[6,\"span\"],[8],[0,\"New story\"],[9]],\"parameters\":[]},null],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n    \"],[6,\"div\"],[10,\"class\",\"gh-contentfilter\"],[8],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-contentfilter-left\"],[8],[0,\"\\n\"],[4,\"unless\",[[22,[\"session\",\"user\",\"isContributor\"]]],null,{\"statements\":[[4,\"power-select\",null,[[\"selected\",\"options\",\"searchEnabled\",\"onchange\",\"tagName\",\"classNames\",\"triggerClass\",\"dropdownClass\",\"matchTriggerWidth\",\"data-test-type-select\"],[[22,[\"selectedType\"]],[22,[\"availableTypes\"]],false,[26,\"action\",[[21,0,[]],\"changeType\"],null],\"div\",\"gh-contentfilter-menu gh-contentfilter-type\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",false,true]],{\"statements\":[[0,\"                \"],[1,[21,5,[\"name\"]],false],[0,\"\\n\"]],\"parameters\":[5]},null]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"unless\",[[22,[\"session\",\"user\",\"isAuthorOrContributor\"]]],null,{\"statements\":[[4,\"power-select\",null,[[\"selected\",\"options\",\"searchField\",\"onchange\",\"tagName\",\"classNames\",\"triggerClass\",\"dropdownClass\",\"searchPlaceholder\",\"matchTriggerWidth\",\"data-test-author-select\"],[[22,[\"selectedAuthor\"]],[22,[\"availableAuthors\"]],\"name\",[26,\"action\",[[21,0,[]],\"changeAuthor\"],null],\"div\",\"gh-contentfilter-menu gh-contentfilter-author\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",\"Search authors\",false,true]],{\"statements\":[[0,\"                \"],[1,[21,4,[\"name\"]],false],[0,\"\\n\"]],\"parameters\":[4]},null]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"unless\",[[22,[\"session\",\"user\",\"isContributor\"]]],null,{\"statements\":[[4,\"power-select\",null,[[\"selected\",\"options\",\"searchField\",\"onchange\",\"tagName\",\"classNames\",\"triggerClass\",\"dropdownClass\",\"searchPlaceholder\",\"matchTriggerWidth\",\"optionsComponent\",\"data-test-tag-select\"],[[22,[\"selectedTag\"]],[22,[\"availableTags\"]],\"name\",[26,\"action\",[[21,0,[]],\"changeTag\"],null],\"div\",\"gh-contentfilter-menu gh-contentfilter-tag\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",\"Search tags\",false,\"power-select-vertical-collection-options\",true]],{\"statements\":[[0,\"                \"],[1,[21,3,[\"name\"]],false],[0,\"\\n\"]],\"parameters\":[3]},null]],\"parameters\":[]},null],[0,\"        \"],[9],[0,\"\\n\\n        \"],[6,\"div\"],[10,\"class\",\"gh-contentfilter-right\"],[8],[0,\"\\n            Sort by:\\n\"],[4,\"power-select\",null,[[\"selected\",\"options\",\"searchEnabled\",\"onchange\",\"tagName\",\"classNames\",\"triggerClass\",\"dropdownClass\",\"horizontalPosition\",\"matchTriggerWidth\",\"data-test-order-select\"],[[22,[\"selectedOrder\"]],[22,[\"availableOrders\"]],false,[26,\"action\",[[21,0,[]],\"changeOrder\"],null],\"div\",\"gh-contentfilter-menu gh-contentfilter-sort\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",\"right\",false,true]],{\"statements\":[[0,\"                \"],[1,[21,2,[\"name\"]],false],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[6,\"section\"],[10,\"class\",\"content-list\"],[8],[0,\"\\n        \"],[6,\"ol\"],[10,\"class\",\"posts-list\"],[8],[0,\"\\n\"],[4,\"each\",[[22,[\"postsInfinityModel\"]]],null,{\"statements\":[[0,\"                \"],[1,[26,\"gh-posts-list-item\",null,[[\"post\",\"onDoubleClick\",\"data-test-post-id\"],[[21,1,[]],[26,\"action\",[[21,0,[]],\"openEditor\"],null],[21,1,[\"id\"]]]]],false],[0,\"\\n\"]],\"parameters\":[1]},{\"statements\":[[0,\"                \"],[6,\"li\"],[10,\"class\",\"no-posts-box\"],[8],[0,\"\\n                    \"],[6,\"div\"],[10,\"class\",\"no-posts\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"showingAll\"]]],null,{\"statements\":[[0,\"                            \"],[6,\"h3\"],[8],[0,\"You haven't written any stories yet!\"],[9],[0,\"\\n                            \"],[4,\"link-to\",[\"editor.new\"],null,{\"statements\":[[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-green gh-btn-lg\"],[10,\"type\",\"button\"],[8],[6,\"span\"],[8],[0,\"Write a new Story\"],[9],[9]],\"parameters\":[]},null],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                            \"],[6,\"h3\"],[8],[0,\"No stories match the current filter\"],[9],[0,\"\\n                            \"],[4,\"link-to\",[\"posts.index\",[26,\"query-params\",null,[[\"type\",\"author\",\"tag\"],[null,null,null]]]],null,{\"statements\":[[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-lg\"],[10,\"type\",\"button\"],[8],[6,\"span\"],[8],[0,\"Show all stories\"],[9],[9]],\"parameters\":[]},null],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"        \"],[9],[0,\"\\n\\n        \"],[1,[26,\"infinity-loader\",null,[[\"infinityModel\",\"scrollable\",\"triggerOffset\"],[[22,[\"postsInfinityModel\"]],\".gh-main\",1000]]],false],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[1,[20,\"outlet\"],false],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/posts.hbs" } });
});
define("ghost-admin/templates/reset", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Pd91tIQR", "block": "{\"symbols\":[],\"statements\":[[6,\"div\"],[10,\"class\",\"gh-flow\"],[8],[0,\"\\n    \"],[6,\"div\"],[10,\"class\",\"gh-flow-content-wrap\"],[8],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"gh-flow-content fade-in\"],[8],[0,\"\\n            \"],[6,\"form\"],[10,\"id\",\"reset\"],[10,\"class\",\"gh-signin\"],[10,\"method\",\"post\"],[10,\"novalidate\",\"novalidate\"],[3,\"action\",[[21,0,[]],\"submit\"],[[\"on\"],[\"submit\"]]],[8],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"errors\"]],[22,[\"hasValidated\"]],\"newPassword\"]],{\"statements\":[[0,\"                    \"],[6,\"span\"],[10,\"class\",\"gh-input-icon gh-icon-lock\"],[8],[0,\"\\n                        \"],[1,[26,\"svg-jar\",[\"lock\"],null],false],[0,\"\\n                        \"],[1,[26,\"gh-text-input\",null,[[\"type\",\"name\",\"placeholder\",\"class\",\"autocorrect\",\"autofocus\",\"value\",\"input\"],[\"password\",\"newpassword\",\"Password\",\"password\",\"off\",\"autofocus\",[26,\"readonly\",[[22,[\"newPassword\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"newPassword\"]]],null]],[[\"value\"],[\"target.value\"]]]]]],false],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"errors\"]],[22,[\"hasValidated\"]],\"ne2Password\"]],{\"statements\":[[0,\"                    \"],[6,\"span\"],[10,\"class\",\"gh-input-icon gh-icon-lock\"],[8],[0,\"\\n                        \"],[1,[26,\"svg-jar\",[\"lock\"],null],false],[0,\"\\n                        \"],[1,[26,\"gh-text-input\",null,[[\"type\",\"name\",\"placeholder\",\"class\",\"autocorrect\",\"autofocus\",\"value\",\"input\"],[\"password\",\"ne2password\",\"Confirm Password\",\"password\",\"off\",\"autofocus\",[26,\"readonly\",[[22,[\"ne2Password\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"ne2Password\"]]],null]],[[\"value\"],[\"target.value\"]]]]]],false],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n                \"],[1,[26,\"gh-task-button\",[\"Reset Password\"],[[\"task\",\"class\",\"type\",\"autoWidth\"],[[22,[\"resetPassword\"]],\"gh-btn gh-btn-blue gh-btn-block gh-btn-icon\",\"submit\",\"false\"]]],false],[0,\"\\n            \"],[9],[0,\"\\n\\n            \"],[6,\"p\"],[10,\"class\",\"main-error\"],[8],[1,[20,\"flowErrors\"],false],[0,\" \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/reset.hbs" } });
});
define("ghost-admin/templates/settings/apps-loading", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "5XwjCitf", "block": "{\"symbols\":[],\"statements\":[[6,\"div\"],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[6,\"div\"],[10,\"class\",\"gh-content\"],[8],[0,\"\\n        \"],[1,[20,\"gh-loading-spinner\"],false],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/apps-loading.hbs" } });
});
define("ghost-admin/templates/settings/apps", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "aDTUtrBf", "block": "{\"symbols\":[],\"statements\":[[1,[20,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/apps.hbs" } });
});
define("ghost-admin/templates/settings/apps/amp", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "y5bowFbx", "block": "{\"symbols\":[],\"statements\":[[6,\"section\"],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[6,\"header\"],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[6,\"h2\"],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            \"],[4,\"link-to\",[\"settings.apps.index\"],null,{\"statements\":[[0,\"Apps\"]],\"parameters\":[]},null],[0,\"\\n            \"],[6,\"span\"],[8],[1,[26,\"svg-jar\",[\"arrow-right\"],null],false],[9],[0,\"\\n            AMP\\n        \"],[9],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[1,[26,\"gh-task-button\",null,[[\"task\",\"class\",\"data-test-save-button\"],[[22,[\"save\"]],\"gh-btn gh-btn-blue gh-btn-icon\",true]]],false],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"showLeaveSettingsModal\"]]],null,{\"statements\":[[0,\"        \"],[1,[26,\"gh-fullscreen-modal\",[\"leave-settings\"],[[\"confirm\",\"close\",\"modifier\"],[[26,\"action\",[[21,0,[]],\"leaveSettings\"],null],[26,\"action\",[[21,0,[]],\"toggleLeaveSettingsModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n    \"],[6,\"section\"],[10,\"class\",\"view-container\"],[8],[0,\"\\n        \"],[6,\"br\"],[8],[9],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"app-grid\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"app-cell\"],[8],[0,\"\\n                \"],[6,\"img\"],[10,\"class\",\"app-icon\"],[10,\"src\",\"assets/img/ampicon.png\"],[8],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"app-cell\"],[8],[0,\"\\n                \"],[6,\"h3\"],[8],[0,\"AMP\"],[9],[0,\"\\n                \"],[6,\"p\"],[8],[0,\"Accelerated Mobile Pages\"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting-header\"],[8],[0,\"AMP configuration\"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Enable AMP\"],[9],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Enable \"],[6,\"a\"],[10,\"href\",\"https://ampproject.org\"],[10,\"target\",\"_blank\"],[8],[0,\"Google Accelerated Mobile Pages\"],[9],[0,\" for your posts\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"for-checkbox\"],[8],[0,\"\\n                    \"],[6,\"label\"],[10,\"for\",\"amp\"],[10,\"class\",\"checkbox\"],[8],[0,\"\\n                        \"],[6,\"input\"],[11,\"checked\",[20,\"ampSettings\"],null],[10,\"id\",\"amp\"],[10,\"name\",\"amp\"],[11,\"onclick\",[26,\"action\",[[21,0,[]],\"update\"],[[\"value\"],[\"target.checked\"]]],null],[10,\"data-test-amp-checkbox\",\"\"],[10,\"type\",\"checkbox\"],[8],[9],[0,\"\\n                        \"],[6,\"span\"],[10,\"class\",\"input-toggle-component\"],[8],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/apps/amp.hbs" } });
});
define("ghost-admin/templates/settings/apps/index", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "iwZxW+L7", "block": "{\"symbols\":[],\"statements\":[[6,\"section\"],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[6,\"header\"],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[6,\"h2\"],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"Apps\"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[6,\"section\"],[10,\"class\",\"apps-grid-container\"],[8],[0,\"\\n        \"],[6,\"span\"],[10,\"class\",\"apps-grid-title\"],[8],[0,\"Available integrations\"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"apps-grid\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"apps-grid-cell\"],[10,\"data-test-app\",\"slack\"],[8],[0,\"\\n\"],[4,\"link-to\",[\"settings.apps.slack\"],[[\"data-test-link\"],[\"slack\"]],{\"statements\":[[0,\"                \"],[6,\"article\"],[10,\"class\",\"apps-card-app\"],[8],[0,\"\\n                    \"],[6,\"div\"],[10,\"class\",\"apps-card-left\"],[8],[0,\"\\n                        \"],[6,\"figure\"],[10,\"class\",\"apps-card-app-icon\"],[10,\"style\",\"background-image:url(assets/img/slackicon.png)\"],[8],[9],[0,\"\\n                        \"],[6,\"div\"],[10,\"class\",\"apps-card-meta\"],[8],[0,\"\\n                            \"],[6,\"h3\"],[10,\"class\",\"apps-card-app-title\"],[8],[0,\"Slack\"],[9],[0,\"\\n                            \"],[6,\"p\"],[10,\"class\",\"apps-card-app-desc\"],[8],[0,\"A messaging app for teams\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[6,\"div\"],[10,\"class\",\"gh-card-right\"],[8],[0,\"\\n                        \"],[6,\"div\"],[10,\"class\",\"apps-configured\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"settings\",\"slack\",\"isActive\"]]],null,{\"statements\":[[0,\"                                \"],[6,\"span\"],[10,\"class\",\"green\"],[10,\"data-test-app-status\",\"\"],[8],[0,\"Active\"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                \"],[6,\"span\"],[10,\"data-test-app-status\",\"\"],[8],[0,\"Configure\"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                            \"],[1,[26,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[9],[0,\"\\n\\n            \"],[6,\"div\"],[10,\"class\",\"apps-grid-cell\"],[10,\"data-test-app\",\"amp\"],[8],[0,\"\\n\"],[4,\"link-to\",[\"settings.apps.amp\"],[[\"data-test-link\"],[\"amp\"]],{\"statements\":[[0,\"                \"],[6,\"article\"],[10,\"class\",\"apps-card-app\"],[8],[0,\"\\n                    \"],[6,\"div\"],[10,\"class\",\"apps-card-left\"],[8],[0,\"\\n                        \"],[6,\"figure\"],[10,\"class\",\"apps-card-app-icon\"],[10,\"style\",\"background-image:url(assets/img/ampicon.png)\"],[8],[9],[0,\"\\n                        \"],[6,\"div\"],[10,\"class\",\"apps-card-meta\"],[8],[0,\"\\n                            \"],[6,\"h3\"],[10,\"class\",\"apps-card-app-title\"],[8],[0,\"AMP\"],[9],[0,\"\\n                            \"],[6,\"p\"],[10,\"class\",\"apps-card-app-desc\"],[8],[0,\"Google Accelerated Mobile Pages\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[6,\"div\"],[10,\"class\",\"gh-card-right\"],[8],[0,\"\\n                        \"],[6,\"div\"],[10,\"class\",\"apps-configured\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"settings\",\"amp\"]]],null,{\"statements\":[[0,\"                                \"],[6,\"span\"],[10,\"class\",\"green\"],[10,\"data-test-app-status\",\"\"],[8],[0,\"Active\"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                \"],[6,\"span\"],[10,\"data-test-app-status\",\"\"],[8],[0,\"Configure\"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                            \"],[1,[26,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[9],[0,\"\\n\\n            \"],[6,\"div\"],[10,\"class\",\"apps-grid-cell\"],[10,\"data-test-app\",\"unsplash\"],[8],[0,\"\\n\"],[4,\"link-to\",[\"settings.apps.unsplash\"],[[\"data-test-link\"],[\"unsplash\"]],{\"statements\":[[0,\"                \"],[6,\"article\"],[10,\"class\",\"apps-card-app\"],[8],[0,\"\\n                    \"],[6,\"div\"],[10,\"class\",\"apps-card-left\"],[8],[0,\"\\n                        \"],[6,\"figure\"],[10,\"class\",\"apps-card-app-icon\"],[10,\"style\",\"background-image:url(assets/img/unsplashicon.png);background-size:45px;\"],[8],[9],[0,\"\\n                        \"],[6,\"div\"],[10,\"class\",\"apps-card-meta\"],[8],[0,\"\\n                            \"],[6,\"h3\"],[10,\"class\",\"apps-card-app-title\"],[8],[0,\"Unsplash\"],[9],[0,\"\\n                            \"],[6,\"p\"],[10,\"class\",\"apps-card-app-desc\"],[8],[0,\"Beautiful, free photos\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[6,\"div\"],[10,\"class\",\"gh-card-right\"],[8],[0,\"\\n                        \"],[6,\"div\"],[10,\"class\",\"apps-configured\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"settings\",\"unsplash\",\"isActive\"]]],null,{\"statements\":[[0,\"                                \"],[6,\"span\"],[10,\"class\",\"green\"],[10,\"data-test-app-status\",\"\"],[8],[0,\"Active\"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                \"],[6,\"span\"],[10,\"data-test-app-status\",\"\"],[8],[0,\"Configure\"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                            \"],[1,[26,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[9],[0,\"\\n\\n            \"],[6,\"div\"],[10,\"class\",\"apps-grid-cell\"],[10,\"data-test-app\",\"zapier\"],[8],[0,\"\\n\"],[4,\"link-to\",[\"settings.apps.zapier\"],[[\"data-test-link\"],[\"zapier\"]],{\"statements\":[[0,\"                \"],[6,\"article\"],[10,\"class\",\"apps-card-app\"],[8],[0,\"\\n                    \"],[6,\"div\"],[10,\"class\",\"apps-card-left\"],[8],[0,\"\\n                        \"],[6,\"figure\"],[10,\"class\",\"apps-card-app-icon\"],[10,\"style\",\"background-image:url(assets/img/zapiericon.png);background-size:45px;\"],[8],[9],[0,\"\\n                        \"],[6,\"div\"],[10,\"class\",\"apps-card-meta\"],[8],[0,\"\\n                            \"],[6,\"h3\"],[10,\"class\",\"apps-card-app-title\"],[8],[0,\"Zapier\"],[9],[0,\"\\n                            \"],[6,\"p\"],[10,\"class\",\"apps-card-app-desc\"],[8],[0,\"Automation for your favourite apps\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[6,\"div\"],[10,\"class\",\"gh-card-right\"],[8],[0,\"\\n                        \"],[6,\"div\"],[10,\"class\",\"apps-configured\"],[8],[0,\"\\n                            \"],[6,\"span\"],[10,\"data-test-app-status\",\"\"],[8],[0,\"Configure\"],[9],[0,\"\\n                            \"],[1,[26,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[6,\"p\"],[10,\"class\",\"apps-grid-note\"],[8],[0,\"(More coming soon!)\"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/apps/index.hbs" } });
});
define("ghost-admin/templates/settings/apps/slack", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "/E6OksM8", "block": "{\"symbols\":[],\"statements\":[[6,\"section\"],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[6,\"header\"],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[6,\"h2\"],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            \"],[4,\"link-to\",[\"settings.apps.index\"],null,{\"statements\":[[0,\"Apps\"]],\"parameters\":[]},null],[0,\"\\n            \"],[6,\"span\"],[8],[1,[26,\"svg-jar\",[\"arrow-right\"],null],false],[9],[0,\"\\n            Slack\\n        \"],[9],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[1,[26,\"gh-task-button\",null,[[\"task\",\"class\",\"data-test-save-button\"],[[22,[\"save\"]],\"gh-btn gh-btn-blue gh-btn-icon\",true]]],false],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"showLeaveSettingsModal\"]]],null,{\"statements\":[[0,\"        \"],[1,[26,\"gh-fullscreen-modal\",[\"leave-settings\"],[[\"confirm\",\"close\",\"modifier\"],[[26,\"action\",[[21,0,[]],\"leaveSettings\"],null],[26,\"action\",[[21,0,[]],\"toggleLeaveSettingsModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n    \"],[6,\"section\"],[10,\"class\",\"view-container\"],[8],[0,\"\\n        \"],[6,\"br\"],[8],[9],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"app-grid\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"app-cell\"],[8],[0,\"\\n                \"],[6,\"img\"],[10,\"class\",\"app-icon\"],[10,\"src\",\"assets/img/slackicon.png\"],[8],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"app-cell\"],[8],[0,\"\\n                \"],[6,\"h3\"],[8],[0,\"Slack\"],[9],[0,\"\\n                \"],[6,\"p\"],[8],[0,\"A messaging app for teams\"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[6,\"form\"],[10,\"class\",\"app-config-form\"],[10,\"id\",\"slack-settings\"],[10,\"novalidate\",\"novalidate\"],[3,\"action\",[[21,0,[]],\"save\"],[[\"on\"],[\"submit\"]]],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-header\"],[8],[0,\"Slack configuration\"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-content gh-setting-content--no-action\"],[8],[0,\"\\n                    \"],[6,\"div\"],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Webhook URL\"],[9],[0,\"\\n                    \"],[6,\"div\"],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Automatically send newly published posts to a channel in Slack or any Slack-compatible service like Discord or Mattermost.\"],[9],[0,\"\\n                    \"],[6,\"div\"],[10,\"class\",\"gh-setting-content-extended\"],[8],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"slackSettings\",\"errors\"]],[22,[\"slackSettings\",\"hasValidated\"]],\"url\"]],{\"statements\":[[0,\"                            \"],[1,[26,\"gh-text-input\",null,[[\"placeholder\",\"name\",\"value\",\"input\",\"keyEvents\",\"focus-out\",\"data-test-slack-url-input\"],[\"https://hooks.slack.com/services/...\",\"slack[url]\",[26,\"readonly\",[[22,[\"slackSettings\",\"url\"]]],null],[26,\"action\",[[21,0,[]],\"updateURL\"],[[\"value\"],[\"target.value\"]]],[26,\"hash\",null,[[\"Enter\"],[[26,\"action\",[[21,0,[]],\"save\"],null]]]],[26,\"action\",[[21,0,[]],\"triggerDirtyState\"],null],true]]],false],[0,\"\\n\"],[4,\"unless\",[[22,[\"slackSettings\",\"errors\",\"url\"]]],null,{\"statements\":[[0,\"                                \"],[6,\"p\"],[8],[0,\"Set up a new incoming webhook \"],[6,\"a\"],[10,\"href\",\"https://my.slack.com/apps/new/A0F7XDUAZ-incoming-webhooks\"],[10,\"target\",\"_blank\"],[8],[0,\"here\"],[9],[0,\", and grab the URL.\"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"slackSettings\",\"errors\"]],\"url\"]]],false],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[0,\"                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[1,[26,\"gh-task-button\",[\"Send test notification\"],[[\"task\",\"successText\",\"class\",\"disabled\",\"data-test-send-notification-button\"],[[22,[\"sendTestNotification\"]],\"Sent\",\"gh-btn gh-btn-green gh-btn-icon\",[22,[\"testNotificationDisabled\"]],true]]],false],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/apps/slack.hbs" } });
});
define("ghost-admin/templates/settings/apps/unsplash", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "1+nfiP/q", "block": "{\"symbols\":[],\"statements\":[[6,\"section\"],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[6,\"header\"],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[6,\"h2\"],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            \"],[4,\"link-to\",[\"settings.apps.index\"],null,{\"statements\":[[0,\"Apps\"]],\"parameters\":[]},null],[0,\"\\n            \"],[6,\"span\"],[8],[1,[26,\"svg-jar\",[\"arrow-right\"],null],false],[9],[0,\"\\n            Unsplash\\n        \"],[9],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[1,[26,\"gh-task-button\",null,[[\"task\",\"class\",\"data-test-save-button\"],[[22,[\"save\"]],\"gh-btn gh-btn-blue gh-btn-icon\",true]]],false],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"showLeaveSettingsModal\"]]],null,{\"statements\":[[0,\"        \"],[1,[26,\"gh-fullscreen-modal\",[\"leave-settings\"],[[\"confirm\",\"close\",\"modifier\"],[[26,\"action\",[[21,0,[]],\"leaveSettings\"],null],[26,\"action\",[[21,0,[]],\"toggleLeaveSettingsModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n    \"],[6,\"section\"],[10,\"class\",\"view-container\"],[8],[0,\"\\n        \"],[6,\"br\"],[8],[9],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"app-grid\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"app-cell\"],[8],[0,\"\\n                \"],[6,\"img\"],[10,\"class\",\"app-icon\"],[10,\"src\",\"assets/img/unsplashicon.png\"],[8],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"app-cell\"],[8],[0,\"\\n                \"],[6,\"h3\"],[8],[0,\"Unsplash\"],[9],[0,\"\\n                \"],[6,\"p\"],[8],[0,\"Beautiful, free photos\"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting-header\"],[8],[0,\"Unsplash configuration\"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting\"],[10,\"id\",\"unsplash-toggle\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Enable Unsplash\"],[9],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Enable \"],[6,\"a\"],[10,\"href\",\"https://unsplash.com\"],[10,\"target\",\"_blank\"],[8],[0,\"Unsplash\"],[9],[0,\" image integration for your posts\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"form-group right\"],[8],[0,\"\\n                    \"],[6,\"div\"],[10,\"class\",\"for-checkbox\"],[8],[0,\"\\n                        \"],[6,\"label\"],[10,\"for\",\"isActive\"],[10,\"class\",\"checkbox\"],[8],[0,\"\\n                                \"],[6,\"input\"],[11,\"checked\",[22,[\"unsplashSettings\",\"isActive\"]],null],[10,\"id\",\"isActive\"],[10,\"name\",\"isActive\"],[11,\"onclick\",[26,\"action\",[[21,0,[]],\"update\"],[[\"value\"],[\"target.checked\"]]],null],[10,\"data-test-checkbox\",\"unsplash\"],[10,\"type\",\"checkbox\"],[8],[9],[0,\"\\n                                \"],[6,\"span\"],[10,\"class\",\"input-toggle-component\"],[8],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/apps/unsplash.hbs" } });
});
define("ghost-admin/templates/settings/apps/zapier", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "ZGljmlg/", "block": "{\"symbols\":[],\"statements\":[[6,\"section\"],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[6,\"header\"],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[6,\"h2\"],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            \"],[4,\"link-to\",[\"settings.apps.index\"],null,{\"statements\":[[0,\"Apps\"]],\"parameters\":[]},null],[0,\"\\n            \"],[6,\"span\"],[8],[1,[26,\"svg-jar\",[\"arrow-right\"],null],false],[9],[0,\"\\n            Zapier\\n        \"],[9],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[1,[26,\"gh-task-button\",null,[[\"task\",\"class\",\"data-test-save-button\"],[[22,[\"save\"]],\"gh-btn gh-btn-blue gh-btn-icon\",true]]],false],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[6,\"section\"],[10,\"class\",\"view-container\"],[8],[0,\"\\n        \"],[6,\"br\"],[8],[9],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"app-grid\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"app-cell\"],[8],[0,\"\\n                \"],[6,\"img\"],[10,\"class\",\"app-icon\"],[10,\"src\",\"assets/img/zapiericon.png\"],[8],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"app-cell\"],[8],[0,\"\\n                \"],[6,\"h3\"],[8],[0,\"Zapier\"],[9],[0,\"\\n                \"],[6,\"p\"],[8],[0,\"Automation for your favourite apps\"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting-header\"],[8],[0,\"Zapier configuration\"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting\"],[10,\"id\",\"zapier-toggle\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-content gh-setting-content--no-action\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Zapier Templates\"],[9],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Explore pre-built templates for common automation tasks\"],[9],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-content-extended\"],[8],[0,\"\\n                    \"],[6,\"div\"],[10,\"id\",\"zapier-templates\"],[8],[0,\"\\n                        \"],[6,\"script\"],[10,\"src\",\"https://zapier.com/apps/embed/widget.js?services=ghost&container=true&limit=10&html_id=zapier-templates\"],[8],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/apps/zapier.hbs" } });
});
define("ghost-admin/templates/settings/code-injection-loading", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "9Bigzs3X", "block": "{\"symbols\":[],\"statements\":[[6,\"section\"],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[6,\"header\"],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[6,\"h2\"],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"Code injection\"],[9],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[1,[26,\"gh-task-button\",null,[[\"task\",\"class\",\"disabled\",\"data-test-save-button\"],[[22,[\"save\"]],\"gh-btn gh-btn-blue gh-btn-icon\",true,true]]],false],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[6,\"section\"],[10,\"class\",\"gh-content\"],[8],[0,\"\\n        \"],[1,[20,\"gh-loading-spinner\"],false],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/code-injection-loading.hbs" } });
});
define("ghost-admin/templates/settings/code-injection", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "DmHu/TCw", "block": "{\"symbols\":[],\"statements\":[[6,\"section\"],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[6,\"header\"],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[6,\"h2\"],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"Code injection\"],[9],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[1,[26,\"gh-task-button\",null,[[\"task\",\"class\",\"data-test-save-button\"],[[22,[\"save\"]],\"gh-btn gh-btn-blue gh-btn-icon\",true]]],false],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"showLeaveSettingsModal\"]]],null,{\"statements\":[[0,\"        \"],[1,[26,\"gh-fullscreen-modal\",[\"leave-settings\"],[[\"confirm\",\"close\",\"modifier\"],[[26,\"action\",[[21,0,[]],\"leaveSettings\"],null],[26,\"action\",[[21,0,[]],\"toggleLeaveSettingsModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n    \"],[6,\"section\"],[10,\"class\",\"view-continer\"],[8],[0,\"\\n        \"],[6,\"form\"],[10,\"id\",\"settings-code\"],[10,\"novalidate\",\"novalidate\"],[8],[0,\"\\n            \"],[6,\"fieldset\"],[8],[0,\"\\n                \"],[6,\"p\"],[8],[0,\"\\n                    Ghost allows you to inject code into the top and bottom of your theme files without editing them. This allows for quick modifications to insert useful things like tracking codes and meta tags.\\n                \"],[9],[0,\"\\n\\n                \"],[6,\"div\"],[10,\"class\",\"form-group settings-code\"],[8],[0,\"\\n                    \"],[6,\"label\"],[10,\"for\",\"ghost-head\"],[8],[0,\"Blog Header\"],[9],[0,\"\\n                    \"],[6,\"p\"],[8],[0,\"Code here will be injected into the \"],[6,\"code\"],[8],[0,\"{{ghost_head}}\"],[9],[0,\" tag on every page of your blog\"],[9],[0,\"\\n                    \"],[1,[26,\"gh-cm-editor\",[[22,[\"settings\",\"ghostHead\"]]],[[\"id\",\"class\",\"name\",\"type\",\"update\"],[\"ghost-head\",\"gh-input settings-code-editor\",\"codeInjection[ghost_head]\",\"text\",[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"settings\",\"ghostHead\"]]],null]],null]]]],false],[0,\"\\n                \"],[9],[0,\"\\n\\n                \"],[6,\"div\"],[10,\"class\",\"form-group settings-code\"],[8],[0,\"\\n                    \"],[6,\"label\"],[10,\"for\",\"ghost-foot\"],[8],[0,\"Blog Footer\"],[9],[0,\"\\n                    \"],[6,\"p\"],[8],[0,\"Code here will be injected into the \"],[6,\"code\"],[8],[0,\"{{ghost_foot}}\"],[9],[0,\" tag on every page of your blog\"],[9],[0,\"\\n                    \"],[1,[26,\"gh-cm-editor\",[[22,[\"settings\",\"ghostFoot\"]]],[[\"id\",\"class\",\"name\",\"type\",\"update\"],[\"ghost-foot\",\"gh-input settings-code-editor\",\"codeInjection[ghost_foot]\",\"text\",[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"settings\",\"ghostFoot\"]]],null]],null]]]],false],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/code-injection.hbs" } });
});
define("ghost-admin/templates/settings/design-loading", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "6dTO7Xe1", "block": "{\"symbols\":[],\"statements\":[[6,\"section\"],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[6,\"header\"],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[6,\"h2\"],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"Design\"],[9],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[1,[26,\"gh-task-button\",null,[[\"task\",\"class\",\"disabled\"],[[22,[\"save\"]],\"gh-btn gh-btn-blue gh-btn-icon\",true]]],false],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[6,\"section\"],[10,\"class\",\"gh-content\"],[8],[0,\"\\n        \"],[1,[20,\"gh-loading-spinner\"],false],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/design-loading.hbs" } });
});
define("ghost-admin/templates/settings/design", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Z44mYTDU", "block": "{\"symbols\":[\"navItem\"],\"statements\":[[6,\"section\"],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[6,\"header\"],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[6,\"h2\"],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"Design\"],[9],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[1,[26,\"gh-task-button\",null,[[\"task\",\"class\",\"data-test-save-button\"],[[22,[\"save\"]],\"gh-btn gh-btn-blue gh-btn-icon\",true]]],false],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"showLeaveSettingsModal\"]]],null,{\"statements\":[[0,\"        \"],[1,[26,\"gh-fullscreen-modal\",[\"leave-settings\"],[[\"confirm\",\"close\",\"modifier\"],[[26,\"action\",[[21,0,[]],\"leaveSettings\"],null],[26,\"action\",[[21,0,[]],\"toggleLeaveSettingsModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n    \"],[6,\"section\"],[10,\"class\",\"view-container\"],[8],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting-header\"],[8],[0,\"Navigation\"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-blognav-container\"],[8],[0,\"\\n            \"],[6,\"form\"],[10,\"id\",\"settings-navigation\"],[10,\"class\",\"gh-blognav\"],[10,\"novalidate\",\"novalidate\"],[8],[0,\"\\n\"],[4,\"sortable-objects\",null,[[\"sortableObjectList\",\"useSwap\"],[[22,[\"settings\",\"navigation\"]],false]],{\"statements\":[[4,\"each\",[[22,[\"settings\",\"navigation\"]]],null,{\"statements\":[[4,\"draggable-object\",null,[[\"content\",\"dragHandle\",\"isSortable\"],[[21,1,[]],\".gh-blognav-grab\",true]],{\"statements\":[[0,\"                            \"],[1,[26,\"gh-navitem\",null,[[\"navItem\",\"baseUrl\",\"addItem\",\"deleteItem\",\"updateUrl\",\"updateLabel\"],[[21,1,[]],[22,[\"blogUrl\"]],[26,\"action\",[[21,0,[]],\"addNavItem\"],null],[26,\"action\",[[21,0,[]],\"deleteNavItem\"],null],[26,\"action\",[[21,0,[]],\"updateUrl\"],null],[26,\"action\",[[21,0,[]],\"updateLabel\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[1]},null]],\"parameters\":[]},null],[0,\"                \"],[1,[26,\"gh-navitem\",null,[[\"navItem\",\"baseUrl\",\"addItem\",\"updateUrl\"],[[22,[\"newNavItem\"]],[22,[\"blogUrl\"]],[26,\"action\",[[21,0,[]],\"addNavItem\"],null],[26,\"action\",[[21,0,[]],\"updateUrl\"],null]]]],false],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting-header\"],[8],[0,\"Themes\"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-themes-container\"],[8],[0,\"\\n            \"],[1,[26,\"gh-theme-table\",null,[[\"themes\",\"activateTheme\",\"downloadTheme\",\"deleteTheme\"],[[22,[\"themes\"]],[26,\"action\",[[21,0,[]],\"activateTheme\"],null],[26,\"action\",[[21,0,[]],\"downloadTheme\"],null],[26,\"action\",[[21,0,[]],\"deleteTheme\"],null]]]],false],[0,\"\\n\\n\"],[4,\"link-to\",[\"settings.design.uploadtheme\"],[[\"class\",\"data-test-upload-theme-button\"],[\"gh-btn gh-btn-green gh-themes-uploadbtn\",true]],{\"statements\":[[0,\"                \"],[6,\"span\"],[8],[0,\"Upload a theme\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"showDeleteThemeModal\"]]],null,{\"statements\":[[0,\"                \"],[1,[26,\"gh-fullscreen-modal\",[\"delete-theme\"],[[\"model\",\"close\",\"confirm\",\"modifier\"],[[26,\"hash\",null,[[\"theme\",\"download\"],[[22,[\"themeToDelete\"]],[26,\"action\",[[21,0,[]],\"downloadTheme\",[22,[\"themeToDelete\"]]],null]]]],[26,\"action\",[[21,0,[]],\"hideDeleteThemeModal\"],null],[26,\"action\",[[21,0,[]],\"deleteTheme\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[22,[\"showThemeWarningsModal\"]]],null,{\"statements\":[[0,\"                \"],[1,[26,\"gh-fullscreen-modal\",[\"theme-warnings\"],[[\"model\",\"close\",\"modifier\"],[[26,\"hash\",null,[[\"title\",\"warnings\",\"errors\",\"message\",\"canActivate\"],[\"Activation successful\",[22,[\"themeWarnings\"]],[22,[\"themeErrors\"]],[22,[\"message\"]],true]]],[26,\"action\",[[21,0,[]],\"hideThemeWarningsModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[22,[\"showThemeErrorsModal\"]]],null,{\"statements\":[[0,\"                \"],[1,[26,\"gh-fullscreen-modal\",[\"theme-warnings\"],[[\"model\",\"close\",\"modifier\"],[[26,\"hash\",null,[[\"title\",\"errors\",\"fatalErrors\",\"canActivate\"],[\"Activation failed\",[22,[\"themeErrors\"]],[22,[\"themeFatalErrors\"]],false]]],[26,\"action\",[[21,0,[]],\"hideThemeWarningsModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[9],[0,\"\\n\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[1,[20,\"outlet\"],false],[0,\"\\n\\n\"],[1,[26,\"gh-tour-item\",[\"upload-a-theme\"],[[\"target\",\"throbberAttachment\",\"popoverTriangleClass\"],[\".gh-themes-uploadbtn\",\"top middle\",\"bottom\"]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/design.hbs" } });
});
define("ghost-admin/templates/settings/design/uploadtheme", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "vijhZugG", "block": "{\"symbols\":[],\"statements\":[[1,[26,\"gh-fullscreen-modal\",[\"upload-theme\"],[[\"model\",\"close\",\"modifier\"],[[26,\"hash\",null,[[\"themes\",\"activate\"],[[22,[\"themes\"]],[26,\"route-action\",[\"activateTheme\"],null]]]],[26,\"route-action\",[\"cancel\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/design/uploadtheme.hbs" } });
});
define("ghost-admin/templates/settings/general-loading", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Zl9uJ+na", "block": "{\"symbols\":[],\"statements\":[[6,\"section\"],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[6,\"header\"],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[6,\"h2\"],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"General\"],[9],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[1,[26,\"gh-task-button\",[\"Save settings\"],[[\"task\",\"class\",\"disabled\",\"data-test-save-button\"],[[22,[\"save\"]],\"gh-btn gh-btn-blue gh-btn-icon\",true,true]]],false],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[6,\"section\"],[10,\"class\",\"gh-content\"],[8],[0,\"\\n        \"],[1,[20,\"gh-loading-spinner\"],false],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/general-loading.hbs" } });
});
define("ghost-admin/templates/settings/general", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Z2OqfLeN", "block": "{\"symbols\":[\"uploader\",\"error\",\"uploader\",\"error\",\"uploader\",\"error\"],\"statements\":[[6,\"section\"],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[6,\"header\"],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[6,\"h2\"],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"General\"],[9],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[1,[26,\"gh-task-button\",[\"Save settings\"],[[\"task\",\"class\",\"data-test-save-button\"],[[22,[\"save\"]],\"gh-btn gh-btn-blue gh-btn-icon\",true]]],false],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"showLeaveSettingsModal\"]]],null,{\"statements\":[[0,\"        \"],[1,[26,\"gh-fullscreen-modal\",[\"leave-settings\"],[[\"confirm\",\"close\",\"modifier\"],[[26,\"action\",[[21,0,[]],\"leaveSettings\"],null],[26,\"action\",[[21,0,[]],\"toggleLeaveSettingsModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n    \"],[6,\"section\"],[10,\"class\",\"view-container\"],[8],[0,\"\\n\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting-header\"],[8],[0,\"Publication info\"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Title & description\"],[9],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"The details used to identify your publication around the web\"],[9],[0,\"\\n\"],[4,\"liquid-if\",[[22,[\"pubInfoOpen\"]]],null,{\"statements\":[[0,\"                \"],[6,\"div\"],[10,\"class\",\"gh-setting-content-extended\"],[8],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"settings\",\"errors\"]],[22,[\"settings\",\"hasValidated\"]],\"title\"]],{\"statements\":[[0,\"                        \"],[1,[26,\"gh-text-input\",null,[[\"value\",\"input\",\"focus-out\",\"data-test-title-input\"],[[26,\"readonly\",[[22,[\"settings\",\"title\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"settings\",\"title\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"validate\",\"title\"],[[\"target\"],[[22,[\"settings\"]]]]],true]]],false],[0,\"\\n                        \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"settings\",\"errors\"]],\"title\"]]],false],[0,\"\\n                        \"],[6,\"p\"],[8],[0,\"The name of your site\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\",\"class\"],[[22,[\"settings\",\"errors\"]],[22,[\"settings\",\"hasValidated\"]],\"description\",\"description-container\"]],{\"statements\":[[0,\"                        \"],[1,[26,\"gh-text-input\",null,[[\"value\",\"input\",\"focus-out\",\"data-test-description-input\"],[[26,\"readonly\",[[22,[\"settings\",\"description\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"settings\",\"description\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"validate\",\"description\"],[[\"target\"],[[22,[\"settings\"]]]]],true]]],false],[0,\"\\n                        \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"settings\",\"errors\"]],\"description\"]]],false],[0,\"\\n                        \"],[6,\"p\"],[8],[0,\"Used in your theme, meta data and search results\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                \"],[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-hover-blue\"],[10,\"data-test-toggle-pub-info\",\"\"],[10,\"type\",\"button\"],[3,\"action\",[[21,0,[]],[26,\"toggle\",[\"pubInfoOpen\",[21,0,[]]],null]]],[8],[6,\"span\"],[8],[1,[26,\"if\",[[22,[\"pubInfoOpen\"]],\"Close\",\"Expand\"],null],false],[9],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Site timezone\"],[9],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Set the time and date of your publication, used for all published posts\"],[9],[0,\"\\n\"],[4,\"liquid-if\",[[22,[\"timezoneOpen\"]]],null,{\"statements\":[[0,\"                \"],[6,\"div\"],[10,\"class\",\"gh-setting-content-extended\"],[8],[0,\"\\n                    \"],[1,[26,\"gh-timezone-select\",null,[[\"activeTimezone\",\"availableTimezones\",\"update\"],[[22,[\"settings\",\"activeTimezone\"]],[22,[\"availableTimezones\"]],[26,\"action\",[[21,0,[]],\"setTimezone\"],null]]]],false],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                \"],[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-hover-blue\"],[10,\"data-test-toggle-timezone\",\"\"],[10,\"type\",\"button\"],[3,\"action\",[[21,0,[]],[26,\"toggle\",[\"timezoneOpen\",[21,0,[]]],null]]],[8],[6,\"span\"],[8],[1,[26,\"if\",[[22,[\"timezoneOpen\"]],\"Close\",\"Expand\"],null],false],[9],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Publication Language\"],[9],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Set the language/locale which is used on your site\"],[9],[0,\"\\n\"],[4,\"liquid-if\",[[22,[\"defaultLocaleOpen\"]]],null,{\"statements\":[[0,\"                \"],[6,\"div\"],[10,\"class\",\"gh-setting-content-extended\"],[8],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"settings\",\"errors\"]],[22,[\"settings\",\"hasValidated\"]],\"defaultLocale\"]],{\"statements\":[[0,\"                        \"],[1,[26,\"gh-text-input\",null,[[\"value\",\"input\",\"focus-out\",\"data-test-default-locale-input\"],[[26,\"readonly\",[[22,[\"settings\",\"defaultLocale\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"settings\",\"defaultLocale\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"validate\",\"defaultLocale\"],[[\"target\"],[[22,[\"settings\"]]]]],true]]],false],[0,\"\\n                        \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"settings\",\"errors\"]],\"defaultLocale\"]]],false],[0,\"\\n                        \"],[6,\"p\"],[8],[0,\"Default: English (\"],[6,\"strong\"],[8],[0,\"en\"],[9],[0,\"); you can add translation files to your theme for \"],[6,\"a\"],[10,\"href\",\"https://themes.ghost.org/docs/i18n\"],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener\"],[8],[0,\"any language\"],[9],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                \"],[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-hover-blue\"],[10,\"data-test-toggle-default-locale\",\"\"],[10,\"type\",\"button\"],[3,\"action\",[[21,0,[]],[26,\"toggle\",[\"defaultLocaleOpen\",[21,0,[]]],null]]],[8],[6,\"span\"],[8],[1,[26,\"if\",[[22,[\"defaultLocaleOpen\"]],\"Close\",\"Expand\"],null],false],[9],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting-header\"],[8],[0,\"Publication identity\"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting\"],[10,\"data-test-setting\",\"icon\"],[8],[0,\"\\n\"],[4,\"gh-uploader\",null,[[\"extensions\",\"uploadUrl\",\"onComplete\"],[[22,[\"iconExtensions\"]],\"/uploads/icon/\",[26,\"action\",[[21,0,[]],\"imageUploaded\",\"icon\"],null]]],{\"statements\":[[0,\"            \"],[6,\"div\"],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Publication icon\"],[9],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"A square, social icon used in the UI of your publication, at least 60x60px\"],[9],[0,\"\\n\"],[4,\"each\",[[21,5,[\"errors\"]]],null,{\"statements\":[[0,\"                    \"],[6,\"div\"],[10,\"class\",\"gh-setting-error\"],[10,\"data-test-error\",\"icon\"],[8],[1,[21,6,[\"message\"]],false],[9],[0,\"\\n\"]],\"parameters\":[6]},null],[0,\"            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-action gh-setting-action-smallimg\"],[8],[0,\"\\n\"],[4,\"if\",[[21,5,[\"isUploading\"]]],null,{\"statements\":[[0,\"                    \"],[1,[21,5,[\"progressBar\"]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[22,[\"settings\",\"icon\"]]],null,{\"statements\":[[0,\"                    \"],[6,\"img\"],[10,\"class\",\"blog-icon\"],[11,\"src\",[27,[[22,[\"settings\",\"icon\"]]]]],[11,\"onclick\",[26,\"action\",[[21,0,[]],\"triggerFileDialog\"],null],null],[10,\"alt\",\"icon\"],[10,\"data-test-icon-img\",\"\"],[8],[9],[0,\"\\n                    \"],[6,\"button\"],[10,\"class\",\"gh-setting-action-smallimg-delete\"],[10,\"data-test-delete-image\",\"icon\"],[10,\"type\",\"button\"],[3,\"action\",[[21,0,[]],\"removeImage\",\"icon\"]],[8],[0,\"\\n                        \"],[6,\"span\"],[8],[0,\"delete\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                    \"],[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-hover-blue\"],[11,\"onclick\",[26,\"action\",[[21,0,[]],\"triggerFileDialog\"],null],null],[10,\"data-test-image-upload-btn\",\"icon\"],[10,\"type\",\"button\"],[8],[0,\"\\n                        \"],[6,\"span\"],[8],[0,\"Upload Image\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"]],\"parameters\":[]}]],\"parameters\":[]}],[0,\"                \"],[6,\"div\"],[10,\"style\",\"display:none\"],[8],[0,\"\\n                    \"],[1,[26,\"gh-file-input\",null,[[\"multiple\",\"action\",\"accept\",\"data-test-file-input\"],[false,[21,5,[\"setFiles\"]],[22,[\"iconMimeTypes\"]],\"icon\"]]],false],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[5]},null],[0,\"        \"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting\"],[10,\"data-test-setting\",\"logo\"],[8],[0,\"\\n\"],[4,\"gh-uploader\",null,[[\"extensions\",\"onComplete\"],[[22,[\"imageExtensions\"]],[26,\"action\",[[21,0,[]],\"imageUploaded\",\"logo\"],null]]],{\"statements\":[[0,\"            \"],[6,\"div\"],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Publication logo\"],[9],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"The primary logo for your brand displayed across your theme, should be transparent and at least 600px x 72px\"],[9],[0,\"\\n\"],[4,\"each\",[[21,3,[\"errors\"]]],null,{\"statements\":[[0,\"                    \"],[6,\"div\"],[10,\"class\",\"gh-setting-error\"],[10,\"data-test-error\",\"logo\"],[8],[1,[21,4,[\"message\"]],false],[9],[0,\"\\n\"]],\"parameters\":[4]},null],[0,\"            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-action gh-setting-action-smallimg\"],[8],[0,\"\\n\"],[4,\"if\",[[21,3,[\"isUploading\"]]],null,{\"statements\":[[0,\"                    \"],[1,[21,3,[\"progressBar\"]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[22,[\"settings\",\"logo\"]]],null,{\"statements\":[[0,\"                    \"],[6,\"img\"],[10,\"class\",\"blog-logo\"],[11,\"src\",[27,[[22,[\"settings\",\"logo\"]]]]],[11,\"onclick\",[26,\"action\",[[21,0,[]],\"triggerFileDialog\"],null],null],[10,\"alt\",\"logo\"],[10,\"data-test-logo-img\",\"\"],[8],[9],[0,\"\\n                    \"],[6,\"button\"],[10,\"class\",\"gh-setting-action-smallimg-delete\"],[10,\"data-test-delete-image\",\"logo\"],[10,\"type\",\"button\"],[3,\"action\",[[21,0,[]],\"removeImage\",\"logo\"]],[8],[0,\"\\n                        \"],[6,\"span\"],[8],[0,\"delete\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                    \"],[6,\"button\"],[10,\"class\",\"gh-btn\"],[11,\"onclick\",[26,\"action\",[[21,0,[]],\"triggerFileDialog\"],null],null],[10,\"data-test-image-upload-btn\",\"logo\"],[10,\"type\",\"button\"],[8],[0,\"\\n                        \"],[6,\"span\"],[8],[0,\"Upload Image\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"]],\"parameters\":[]}]],\"parameters\":[]}],[0,\"                \"],[6,\"div\"],[10,\"style\",\"display:none\"],[8],[0,\"\\n                    \"],[1,[26,\"gh-file-input\",null,[[\"multiple\",\"action\",\"accept\",\"data-test-file-input\"],[false,[21,3,[\"setFiles\"]],[22,[\"imageMimeTypes\"]],\"logo\"]]],false],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[3]},null],[0,\"        \"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting\"],[10,\"data-test-setting\",\"coverImage\"],[8],[0,\"\\n\"],[4,\"gh-uploader\",null,[[\"extensions\",\"onComplete\"],[[22,[\"imageExtensions\"]],[26,\"action\",[[21,0,[]],\"imageUploaded\",\"coverImage\"],null]]],{\"statements\":[[0,\"            \"],[6,\"div\"],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Publication cover\"],[9],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"An optional large background image for your site\"],[9],[0,\"\\n\"],[4,\"each\",[[21,1,[\"errors\"]]],null,{\"statements\":[[0,\"                    \"],[6,\"div\"],[10,\"class\",\"gh-setting-error\"],[10,\"data-test-error\",\"coverImage\"],[8],[1,[21,2,[\"message\"]],false],[9],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-action gh-setting-action-largeimg\"],[8],[0,\"\\n\"],[4,\"if\",[[21,1,[\"isUploading\"]]],null,{\"statements\":[[0,\"                    \"],[1,[21,1,[\"progressBar\"]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[22,[\"settings\",\"coverImage\"]]],null,{\"statements\":[[0,\"                    \"],[6,\"img\"],[10,\"class\",\"blog-cover\"],[11,\"src\",[27,[[22,[\"settings\",\"coverImage\"]]]]],[11,\"onclick\",[26,\"action\",[[21,0,[]],\"triggerFileDialog\"],null],null],[10,\"alt\",\"cover photo\"],[10,\"data-test-cover-img\",\"\"],[8],[9],[0,\"\\n                    \"],[6,\"button\"],[10,\"class\",\"gh-setting-action-largeimg-delete\"],[10,\"data-test-delete-image\",\"coverImage\"],[10,\"type\",\"button\"],[3,\"action\",[[21,0,[]],\"removeImage\",\"coverImage\"]],[8],[0,\"\\n                        \"],[6,\"span\"],[8],[0,\"delete\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                    \"],[6,\"button\"],[10,\"class\",\"gh-btn\"],[11,\"onclick\",[26,\"action\",[[21,0,[]],\"triggerFileDialog\"],null],null],[10,\"data-test-image-upload-btn\",\"coverImage\"],[10,\"type\",\"button\"],[8],[0,\"\\n                        \"],[6,\"span\"],[8],[0,\"Upload Image\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"]],\"parameters\":[]}]],\"parameters\":[]}],[0,\"                \"],[6,\"div\"],[10,\"style\",\"display:none\"],[8],[0,\"\\n                    \"],[1,[26,\"gh-file-input\",null,[[\"multiple\",\"action\",\"accept\",\"data-test-file-input\"],[false,[21,1,[\"setFiles\"]],[22,[\"imageMimeTypes\"]],\"coverImage\"]]],false],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"        \"],[9],[0,\"\\n\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting-header\"],[8],[0,\"Social accounts\"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Social accounts\"],[9],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Link your social accounts for full structured data and rich card support\"],[9],[0,\"\\n\"],[4,\"liquid-if\",[[22,[\"socialOpen\"]]],null,{\"statements\":[[0,\"                \"],[6,\"div\"],[10,\"class\",\"gh-setting-content-extended\"],[8],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"settings\",\"errors\"]],[22,[\"settings\",\"hasValidated\"]],\"facebook\"]],{\"statements\":[[0,\"                        \"],[1,[26,\"gh-text-input\",null,[[\"type\",\"placeholder\",\"autocorrect\",\"value\",\"input\",\"focus-out\",\"data-test-facebook-input\"],[\"url\",\"https://www.facebook.com/ghost\",\"off\",[26,\"readonly\",[[22,[\"settings\",\"facebook\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"_scratchFacebook\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"validateFacebookUrl\"],null],true]]],false],[0,\"\\n                        \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\",\"data-test-facebook-error\"],[[22,[\"settings\",\"errors\"]],\"facebook\",true]]],false],[0,\"\\n                        \"],[6,\"p\"],[8],[0,\"URL of your publication's Facebook Page\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"settings\",\"errors\"]],[22,[\"settings\",\"hasValidated\"]],\"twitter\"]],{\"statements\":[[0,\"                        \"],[1,[26,\"gh-text-input\",null,[[\"type\",\"placeholder\",\"autocorrect\",\"value\",\"input\",\"focus-out\",\"data-test-twitter-input\"],[\"url\",\"https://twitter.com/tryghost\",\"off\",[26,\"readonly\",[[22,[\"settings\",\"twitter\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"_scratchTwitter\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"validateTwitterUrl\"],null],true]]],false],[0,\"\\n                        \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\",\"data-test-twitter-error\"],[[22,[\"settings\",\"errors\"]],\"twitter\",true]]],false],[0,\"\\n                        \"],[6,\"p\"],[8],[0,\"URL of your publication's Twitter profile\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                \"],[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-hover-blue\"],[10,\"data-test-toggle-social\",\"\"],[10,\"type\",\"button\"],[3,\"action\",[[21,0,[]],[26,\"toggle\",[\"socialOpen\",[21,0,[]]],null]]],[8],[6,\"span\"],[8],[1,[26,\"if\",[[22,[\"socialOpen\"]],\"Close\",\"Expand\"],null],false],[9],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting-header\"],[8],[0,\"Advanced settings\"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Make this site private\"],[9],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"\\n                    Enable protection with simple shared password. All search engine optimization and social features will be disabled.\\n\\n\"],[4,\"if\",[[22,[\"settings\",\"isPrivate\"]]],null,{\"statements\":[[0,\"                        \"],[6,\"span\"],[10,\"class\",\"avoid-break-out\"],[8],[0,\"\\n                            \"],[6,\"br\"],[8],[9],[6,\"br\"],[8],[9],[0,\"\\n                            A private RSS feed is available at\\n                            \"],[6,\"a\"],[11,\"href\",[27,[[20,\"privateRSSUrl\"]]]],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener\"],[8],[1,[20,\"privateRSSUrl\"],false],[9],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"settings\",\"isPrivate\"]]],null,{\"statements\":[[0,\"                    \"],[6,\"div\"],[10,\"class\",\"gh-setting-content-extended\"],[8],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"settings\",\"errors\"]],[22,[\"settings\",\"hasValidated\"]],\"password\"]],{\"statements\":[[0,\"                            \"],[1,[26,\"gh-text-input\",null,[[\"value\",\"name\",\"focus-out\",\"input\",\"data-test-password-input\"],[[26,\"readonly\",[[22,[\"settings\",\"password\"]]],null],\"general[password]\",[26,\"action\",[[21,0,[]],\"validate\",\"password\"],[[\"target\"],[[22,[\"settings\"]]]]],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"settings\",\"password\"]]],null]],[[\"value\"],[\"target.value\"]]],true]]],false],[0,\"\\n                            \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\",\"data-test-password-error\"],[[22,[\"settings\",\"errors\"]],\"password\",true]]],false],[0,\"\\n                            \"],[6,\"p\"],[8],[0,\"Set the password for this site\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"for-checkbox\"],[8],[0,\"\\n                    \"],[6,\"label\"],[10,\"class\",\"checkbox\"],[10,\"for\",\"settings-private\"],[8],[0,\"\\n                        \"],[6,\"input\"],[11,\"checked\",[22,[\"settings\",\"isPrivate\"]],null],[10,\"id\",\"settings-private\"],[11,\"onclick\",[26,\"action\",[[21,0,[]],\"toggleIsPrivate\"],[[\"value\"],[\"target.checked\"]]],null],[10,\"data-test-private-checkbox\",\"\"],[10,\"type\",\"checkbox\"],[8],[9],[0,\"\\n                        \"],[6,\"span\"],[10,\"class\",\"input-toggle-component\"],[8],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[1,[20,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/general.hbs" } });
});
define("ghost-admin/templates/settings/labs-loading", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "x/t0MZAP", "block": "{\"symbols\":[],\"statements\":[[6,\"section\"],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[6,\"header\"],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[6,\"h2\"],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"Labs\"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[6,\"div\"],[10,\"class\",\"gh-content\"],[8],[0,\"\\n        \"],[1,[20,\"gh-loading-spinner\"],false],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/labs-loading.hbs" } });
});
define("ghost-admin/templates/settings/labs", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "j7yaFKZF", "block": "{\"symbols\":[\"uploader\",\"error\",\"uploader\",\"error\",\"error\"],\"statements\":[[6,\"section\"],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[6,\"header\"],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[6,\"h2\"],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"Labs\"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[6,\"section\"],[10,\"class\",\"view-container settings-debug\"],[8],[0,\"\\n        \"],[6,\"p\"],[10,\"class\",\"gh-box gh-box-info\"],[8],[1,[26,\"svg-jar\",[\"idea\"],null],false],[0,\"This is a testing ground for experimental features which aren't quite ready for primetime. They may change, break or inexplicably disappear at any time.\"],[9],[0,\"\\n\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting-header\"],[8],[0,\"Migration options\"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Import content\"],[9],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Import posts from another Ghost installation\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                \"],[6,\"form\"],[10,\"id\",\"settings-import\"],[10,\"enctype\",\"multipart/form-data\"],[8],[0,\"\\n                    \"],[1,[26,\"gh-file-upload\",null,[[\"id\",\"classNames\",\"uploadButtonText\",\"onUpload\",\"acceptEncoding\",\"data-test-file-input\"],[\"importfile\",\"flex\",[22,[\"uploadButtonText\"]],[26,\"action\",[[21,0,[]],\"onUpload\"],null],[22,[\"importMimeType\"]],\"import\"]]],false],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"importErrors\"]]],null,{\"statements\":[[0,\"            \"],[6,\"div\"],[11,\"class\",[27,[\"gh-import-errors \",[26,\"if\",[[22,[\"importSuccessful\"]],\"gh-import-errors-warning\"],null]]]],[10,\"data-test-import-errors\",\"\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-import-errors-title\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"importSuccessful\"]]],null,{\"statements\":[[0,\"                        Import successful with warnings\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                        Import failed\\n\"]],\"parameters\":[]}],[0,\"                \"],[9],[0,\"\\n\\n\"],[4,\"each\",[[22,[\"importErrors\"]]],null,{\"statements\":[[0,\"                    \"],[6,\"div\"],[10,\"class\",\"gh-import-error\"],[10,\"data-test-import-error\",\"\"],[8],[0,\"\\n                        \"],[6,\"p\"],[10,\"class\",\"gh-import-error-message\"],[10,\"data-test-import-error-message\",\"\"],[8],[0,\"\\n                            \"],[4,\"if\",[[21,5,[\"help\"]]],null,{\"statements\":[[1,[21,5,[\"help\"]],false],[0,\": \"]],\"parameters\":[]},null],[1,[21,5,[\"message\"]],false],[0,\"\\n                        \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[21,5,[\"context\"]]],null,{\"statements\":[[0,\"                            \"],[6,\"div\"],[10,\"class\",\"gh-import-error-entry\"],[10,\"data-test-import-error-context\",\"\"],[8],[0,\"\\n                                \"],[6,\"pre\"],[8],[1,[21,5,[\"context\"]],false],[9],[0,\"\\n                            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                    \"],[9],[0,\"\\n\"]],\"parameters\":[5]},null],[0,\"            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Export your content\"],[9],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Download all of your posts and settings in a single, glorious JSON file\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                \"],[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-hover-blue\"],[10,\"type\",\"button\"],[3,\"action\",[[21,0,[]],\"downloadFile\",\"db\"]],[8],[6,\"span\"],[8],[0,\"Export\"],[9],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Delete all content\"],[9],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Permanently delete all posts and tags from the database, a hard reset\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                \"],[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-hover-red js-delete\"],[10,\"type\",\"button\"],[3,\"action\",[[21,0,[]],\"toggleDeleteAllModal\"]],[8],[6,\"span\"],[8],[0,\"Delete\"],[9],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting-header\"],[8],[0,\"Testing tools\"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Test email configuration\"],[9],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Send yourself a test email to make sure everything is working\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                \"],[1,[26,\"gh-task-button\",[\"Send\"],[[\"successText\",\"task\",\"class\"],[\"Sent\",[22,[\"sendTestEmail\"]],\"gh-btn gh-btn-hover-blue gh-btn-icon\"]]],false],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting-header\"],[8],[0,\"Beta features\"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Public API\"],[9],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"For full instructions, read the \"],[6,\"a\"],[10,\"href\",\"https://help.ghost.org/hc/en-us/articles/115000301672-Public-API-Beta\"],[8],[0,\"developer guide\"],[9],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"for-checkbox\"],[8],[1,[26,\"gh-feature-flag\",[\"publicAPI\"],null],false],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Night shift\"],[9],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Swap Ghost admin's colours to a dark background which is easy on the eyes\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"for-checkbox\"],[8],[1,[26,\"gh-feature-flag\",[\"nightShift\"],null],false],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Subscribers\"],[9],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Collect email addresses from your readers, more info in \"],[6,\"a\"],[10,\"href\",\"https://help.ghost.org/hc/en-us/articles/224089787-Subscribers-Beta\"],[8],[0,\"the docs\"],[9],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"for-checkbox\"],[8],[1,[26,\"gh-feature-flag\",[\"subscribers\"],null],false],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting\"],[8],[0,\"\\n\"],[4,\"gh-uploader\",null,[[\"extensions\",\"uploadUrl\",\"paramName\",\"onUploadSuccess\",\"onUploadFailure\"],[[22,[\"jsonExtension\"]],\"/redirects/json/\",\"redirects\",[26,\"perform\",[[22,[\"redirectUploadResult\"]],true],null],[26,\"perform\",[[22,[\"redirectUploadResult\"]],false],null]]],{\"statements\":[[0,\"            \"],[6,\"div\"],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Redirects\"],[9],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Configure redirects for old or moved content, more info in \"],[6,\"a\"],[10,\"href\",\"https://docs.ghost.org/docs/redirects\"],[8],[0,\"the docs\"],[9],[9],[0,\"\\n\"],[4,\"each\",[[21,3,[\"errors\"]]],null,{\"statements\":[[0,\"                    \"],[6,\"div\"],[10,\"class\",\"gh-setting-error\"],[10,\"data-test-error\",\"redirects\"],[8],[1,[21,4,[\"message\"]],false],[9],[0,\"\\n\"]],\"parameters\":[4]},null],[0,\"            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-action\"],[10,\"style\",\"display: flex; flex-direction: column\"],[8],[0,\"\\n\"],[4,\"if\",[[21,3,[\"isUploading\"]]],null,{\"statements\":[[0,\"                    \"],[1,[21,3,[\"progressBar\"]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                    \"],[6,\"button\"],[11,\"class\",[27,[\"gh-btn gh-btn-icon \",[26,\"if\",[[22,[\"redirectSuccess\"]],\"gh-btn-green\"],null],\" \",[26,\"if\",[[22,[\"redirectFailure\"]],\"gh-btn-red\"],null]]]],[11,\"onclick\",[26,\"action\",[[21,0,[]],\"triggerFileDialog\"],null],null],[10,\"data-test-button\",\"upload-redirects\"],[10,\"type\",\"button\"],[8],[0,\"\\n                        \"],[6,\"span\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"redirectSuccess\"]]],null,{\"statements\":[[0,\"                                \"],[1,[26,\"svg-jar\",[\"check-circle\"],null],false],[0,\" Uploaded\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[22,[\"redirectFailure\"]]],null,{\"statements\":[[0,\"                                \"],[1,[26,\"svg-jar\",[\"retry\"],null],false],[0,\" Upload Failed\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                Upload redirects JSON\\n                            \"]],\"parameters\":[]}]],\"parameters\":[]}],[0,\"                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[6,\"span\"],[8],[6,\"a\"],[10,\"href\",\"#\"],[10,\"data-test-link\",\"download-redirects\"],[3,\"action\",[[21,0,[]],\"downloadFile\",\"redirects/json\"]],[8],[0,\"Download current redirects\"],[9],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n                \"],[6,\"div\"],[10,\"style\",\"display:none\"],[8],[0,\"\\n                    \"],[1,[26,\"gh-file-input\",null,[[\"multiple\",\"action\",\"accept\",\"data-test-file-input\"],[false,[21,3,[\"setFiles\"]],[22,[\"jsonMimeType\"]],\"redirects\"]]],false],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[3]},null],[0,\"        \"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"gh-setting\"],[8],[0,\"\\n\"],[4,\"gh-uploader\",null,[[\"extensions\",\"uploadUrl\",\"paramName\",\"onUploadSuccess\",\"onUploadFailure\"],[[22,[\"yamlExtension\"]],\"/settings/routes/yaml/\",\"routes\",[26,\"perform\",[[22,[\"routesUploadResult\"]],true],null],[26,\"perform\",[[22,[\"routesUploadResult\"]],false],null]]],{\"statements\":[[0,\"            \"],[6,\"div\"],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Routes\"],[9],[0,\"\\n                \"],[6,\"div\"],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Configure dynamic routing by modifying the routes.yaml file\"],[9],[0,\"\\n\"],[4,\"each\",[[21,1,[\"errors\"]]],null,{\"statements\":[[0,\"                    \"],[6,\"div\"],[10,\"class\",\"gh-setting-error\"],[10,\"data-test-error\",\"routes\"],[8],[1,[21,2,[\"message\"]],false],[9],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"            \"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-setting-action\"],[10,\"style\",\"display: flex; flex-direction: column\"],[8],[0,\"\\n\"],[4,\"if\",[[21,1,[\"isUploading\"]]],null,{\"statements\":[[0,\"                    \"],[1,[21,1,[\"progressBar\"]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                    \"],[6,\"button\"],[11,\"class\",[27,[\"gh-btn gh-btn-icon \",[26,\"if\",[[22,[\"routesSuccess\"]],\"gh-btn-green\"],null],\" \",[26,\"if\",[[22,[\"routesFailure\"]],\"gh-btn-red\"],null]]]],[11,\"onclick\",[26,\"action\",[[21,0,[]],\"triggerFileDialog\"],null],null],[10,\"data-test-button\",\"upload-routes\"],[10,\"type\",\"button\"],[8],[0,\"\\n                        \"],[6,\"span\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"routesSuccess\"]]],null,{\"statements\":[[0,\"                                \"],[1,[26,\"svg-jar\",[\"check-circle\"],null],false],[0,\" Uploaded\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[22,[\"routesFailure\"]]],null,{\"statements\":[[0,\"                                \"],[1,[26,\"svg-jar\",[\"retry\"],null],false],[0,\" Upload Failed\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                Upload routes YAML\\n                            \"]],\"parameters\":[]}]],\"parameters\":[]}],[0,\"                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[6,\"span\"],[8],[6,\"a\"],[10,\"href\",\"#\"],[10,\"data-test-link\",\"download-routes\"],[3,\"action\",[[21,0,[]],\"downloadFile\",\"settings/routes/yaml\"]],[8],[0,\"Download current routes.yml\"],[9],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n                \"],[6,\"div\"],[10,\"style\",\"display:none\"],[8],[0,\"\\n                    \"],[1,[26,\"gh-file-input\",null,[[\"multiple\",\"action\",\"accept\",\"data-test-file-input\"],[false,[21,1,[\"setFiles\"]],[22,[\"yamlMimeType\"]],\"routes\"]]],false],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"showDeleteAllModal\"]]],null,{\"statements\":[[0,\"    \"],[1,[26,\"gh-fullscreen-modal\",[\"delete-all\"],[[\"close\",\"modifier\"],[[26,\"action\",[[21,0,[]],\"toggleDeleteAllModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/labs.hbs" } });
});
define("ghost-admin/templates/settings/tags-loading", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "BSJd2Kh6", "block": "{\"symbols\":[],\"statements\":[[6,\"section\"],[10,\"class\",\"gh-view\"],[8],[0,\"\\n    \"],[6,\"header\"],[10,\"class\",\"view-header\"],[8],[0,\"\\n        \"],[4,\"gh-view-title\",null,null,{\"statements\":[[6,\"span\"],[8],[0,\"Tags\"],[9]],\"parameters\":[]},null],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[4,\"link-to\",[\"settings.tags.new\"],[[\"class\"],[\"gh-btn gh-btn-green\"]],{\"statements\":[[6,\"span\"],[8],[0,\"New Tag\"],[9]],\"parameters\":[]},null],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[6,\"div\"],[10,\"class\",\"gh-content\"],[8],[0,\"\\n        \"],[1,[20,\"gh-loading-spinner\"],false],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/tags-loading.hbs" } });
});
define("ghost-admin/templates/settings/tags", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "nEwYQkfK", "block": "{\"symbols\":[\"container\",\"tag\"],\"statements\":[[6,\"section\"],[10,\"class\",\"gh-view\"],[8],[0,\"\\n    \"],[6,\"header\"],[10,\"class\",\"view-header\"],[8],[0,\"\\n        \"],[4,\"gh-view-title\",null,null,{\"statements\":[[6,\"span\"],[8],[0,\"Tags\"],[9]],\"parameters\":[]},null],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[4,\"link-to\",[\"settings.tags.new\"],[[\"class\"],[\"gh-btn gh-btn-green\"]],{\"statements\":[[6,\"span\"],[8],[0,\"New Tag\"],[9]],\"parameters\":[]},null],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n\"],[4,\"gh-tags-management-container\",null,[[\"tags\",\"selectedTag\",\"enteredMobile\",\"leftMobile\"],[[22,[\"tags\"]],[22,[\"selectedTag\"]],\"enteredMobile\",[26,\"action\",[[21,0,[]],\"leftMobile\"],null]]],{\"statements\":[[0,\"        \"],[6,\"div\"],[10,\"class\",\"tag-list\"],[8],[0,\"\\n            \"],[6,\"section\"],[11,\"class\",[27,[\"tag-list-content settings-tags \",[26,\"if\",[[22,[\"tagListFocused\"]],\"keyboard-focused\"],null]]]],[8],[0,\"\\n\"],[4,\"vertical-collection\",[[22,[\"sortedTags\"]]],[[\"estimateHeight\",\"minHeight\",\"bufferSize\",\"containerSelector\"],[16,67,5,\".tag-list\"]],{\"statements\":[[0,\"                    \"],[1,[26,\"gh-tag\",null,[[\"tag\"],[[21,2,[]]]]],false],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[6,\"section\"],[11,\"class\",[27,[\"settings-menu-container tag-settings \",[26,\"if\",[[22,[\"tagContentFocused\"]],\"keyboard-focused\"],null],\" \",[26,\"if\",[[21,1,[\"displaySettingsPane\"]],\"tag-settings-in\"],null]]]],[8],[0,\"\\n            \"],[1,[20,\"outlet\"],false],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[1]},null],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/tags.hbs" } });
});
define("ghost-admin/templates/settings/tags/index", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "s7Afjdzo", "block": "{\"symbols\":[],\"statements\":[[6,\"div\"],[10,\"class\",\"no-posts-box\"],[8],[0,\"\\n    \"],[6,\"div\"],[10,\"class\",\"no-posts\"],[8],[0,\"\\n        \"],[6,\"h3\"],[8],[0,\"You haven't added any tags yet!\"],[9],[0,\"\\n        \"],[4,\"link-to\",[\"settings.tags.new\"],null,{\"statements\":[[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-green btn-lg\"],[10,\"title\",\"New Tag\"],[10,\"type\",\"button\"],[8],[6,\"span\"],[8],[0,\"Add a tag\"],[9],[9]],\"parameters\":[]},null],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/tags/index.hbs" } });
});
define("ghost-admin/templates/settings/tags/tag", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "Alw9FYwc", "block": "{\"symbols\":[],\"statements\":[[1,[26,\"gh-tag-settings-form\",null,[[\"tag\",\"setProperty\",\"showDeleteTagModal\"],[[22,[\"tag\"]],[26,\"action\",[[21,0,[]],\"setProperty\"],null],[26,\"action\",[[21,0,[]],\"toggleDeleteTagModal\"],null]]]],false],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"showDeleteTagModal\"]]],null,{\"statements\":[[0,\"    \"],[1,[26,\"gh-fullscreen-modal\",[\"delete-tag\"],[[\"model\",\"confirm\",\"close\",\"modifier\"],[[22,[\"tag\"]],[26,\"action\",[[21,0,[]],\"deleteTag\"],null],[26,\"action\",[[21,0,[]],\"toggleDeleteTagModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/tags/tag.hbs" } });
});
define("ghost-admin/templates/setup", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "3ZRYWO8g", "block": "{\"symbols\":[],\"statements\":[[6,\"div\"],[10,\"class\",\"gh-flow\"],[8],[0,\"\\n    \"],[6,\"header\"],[10,\"class\",\"gh-flow-head\"],[8],[0,\"\\n        \"],[6,\"nav\"],[10,\"class\",\"gh-flow-nav\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"showBackLink\"]]],null,{\"statements\":[[0,\"                \"],[4,\"link-to\",[[22,[\"backRoute\"]]],[[\"classNames\"],[\"gh-flow-back\"]],{\"statements\":[[1,[26,\"svg-jar\",[\"arrow-left-small\"],null],false],[0,\" Back\"]],\"parameters\":[]},null],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[6,\"ol\"],[8],[0,\"\\n\"],[4,\"gh-activating-list-item\",null,[[\"route\",\"linkClasses\"],[\"setup.one\",\"step\"]],{\"statements\":[[0,\"                    \"],[1,[26,\"svg-jar\",[\"check-circle\"],null],false],[6,\"span\"],[10,\"class\",\"num\"],[8],[0,\"1\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                \"],[6,\"li\"],[10,\"class\",\"divider\"],[8],[9],[0,\"\\n\"],[4,\"gh-activating-list-item\",null,[[\"route\",\"linkClasses\"],[\"setup.two\",\"step\"]],{\"statements\":[[0,\"                    \"],[1,[26,\"svg-jar\",[\"check-circle\"],null],false],[6,\"span\"],[10,\"class\",\"num\"],[8],[0,\"2\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                \"],[6,\"li\"],[10,\"class\",\"divider\"],[8],[9],[0,\"\\n\"],[4,\"gh-activating-list-item\",null,[[\"route\",\"linkClasses\"],[\"setup.three\",\"step\"]],{\"statements\":[[0,\"                    \"],[1,[26,\"svg-jar\",[\"check-circle\"],null],false],[6,\"span\"],[10,\"class\",\"num\"],[8],[0,\"3\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n    \"],[6,\"div\"],[10,\"class\",\"gh-flow-content-wrap\"],[8],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"gh-flow-content\"],[8],[0,\"\\n            \"],[1,[20,\"outlet\"],false],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/setup.hbs" } });
});
define("ghost-admin/templates/setup/one", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "GfVFksY6", "block": "{\"symbols\":[],\"statements\":[[6,\"header\"],[8],[0,\"\\n    \"],[6,\"h1\"],[8],[0,\"Welcome to \"],[6,\"strong\"],[8],[0,\"Ghost\"],[9],[0,\"!\"],[9],[0,\"\\n    \"],[6,\"p\"],[8],[0,\"All over the world, people have started \"],[6,\"em\"],[8],[1,[20,\"gh-download-count\"],false],[9],[0,\" incredible blogs with Ghost. Today, we’re starting yours.\"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[6,\"figure\"],[10,\"class\",\"gh-flow-screenshot\"],[8],[0,\"\\n    \"],[6,\"img\"],[10,\"src\",\"assets/img/install-welcome.png\"],[10,\"alt\",\"Ghost screenshot\"],[8],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[4,\"link-to\",[\"setup.two\"],[[\"classNames\"],[\"gh-btn gh-btn-green gh-btn-lg gh-btn-icon gh-btn-icon-right\"]],{\"statements\":[[0,\"    \"],[6,\"span\"],[8],[0,\"Create your account \"],[1,[26,\"svg-jar\",[\"arrow-right-small\"],null],false],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/setup/one.hbs" } });
});
define("ghost-admin/templates/setup/three", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "T5XCosYl", "block": "{\"symbols\":[\"task\"],\"statements\":[[6,\"header\"],[8],[0,\"\\n    \"],[6,\"h1\"],[8],[0,\"Invite your team\"],[9],[0,\"\\n    \"],[6,\"p\"],[8],[0,\"Ghost works best when shared with others. Collaborate, get feedback on your posts & work together on ideas.\"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[6,\"div\"],[8],[6,\"img\"],[10,\"class\",\"gh-flow-faces\"],[10,\"src\",\"assets/img/users.png\"],[10,\"alt\",\"\"],[8],[9],[9],[0,\"\\n\\n\"],[6,\"form\"],[10,\"class\",\"gh-flow-invite\"],[3,\"action\",[[21,0,[]],\"invite\"],[[\"on\"],[\"submit\"]]],[8],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"errors\"]],[22,[\"hasValidated\"]],\"users\"]],{\"statements\":[[0,\"        \"],[6,\"label\"],[10,\"for\",\"users\"],[8],[0,\"Enter one email address per line, we’ll handle the rest! \"],[1,[26,\"svg-jar\",[\"email\"],null],false],[9],[0,\"\\n        \"],[1,[26,\"gh-textarea\",null,[[\"name\",\"required\",\"value\",\"input\",\"focus-out\"],[\"users\",\"required\",[26,\"readonly\",[[22,[\"users\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"users\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"validate\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-task-button\",null,[[\"task\",\"type\",\"successClass\",\"failureClass\",\"class\"],[[22,[\"invite\"]],\"submit\",\"\",\"\",[26,\"concat\",[\"gh-btn\",\" \",\"gh-btn-default\",\" \",\"gh-btn-lg\",\" \",\"gh-btn-block\",\" \",[26,\"if\",[[22,[\"buttonClass\"]],[26,\"-normalize-class\",[\"buttonClass\",[22,[\"buttonClass\"]]],null]],null],\" \"],null]]],{\"statements\":[[0,\"        \"],[6,\"span\"],[8],[0,\"\\n\"],[4,\"if\",[[21,1,[\"isRunning\"]]],null,{\"statements\":[[0,\"                \"],[1,[26,\"svg-jar\",[\"spinner\"],[[\"class\"],[\"no-margin\"]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                \"],[1,[20,\"buttonText\"],false],[0,\"\\n\"]],\"parameters\":[]}],[0,\"        \"],[9],[0,\"\\n\"]],\"parameters\":[1]},null],[9],[0,\"\\n\\n\"],[6,\"button\"],[10,\"class\",\"gh-flow-skip\"],[3,\"action\",[[21,0,[]],\"skipInvite\"]],[8],[0,\"\\n    I'll do this later, take me to my blog!\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/setup/three.hbs" } });
});
define("ghost-admin/templates/setup/two", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "MW8zCcwS", "block": "{\"symbols\":[\"task\"],\"statements\":[[6,\"header\"],[8],[0,\"\\n    \"],[6,\"h1\"],[8],[0,\"Create your account\"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[6,\"form\"],[10,\"id\",\"setup\"],[10,\"class\",\"gh-flow-create\"],[8],[0,\"\\n\"],[0,\"    \"],[6,\"input\"],[10,\"style\",\"display:none;\"],[10,\"name\",\"username\"],[10,\"type\",\"text\"],[8],[9],[0,\"\\n    \"],[6,\"input\"],[10,\"style\",\"display:none;\"],[10,\"name\",\"password\"],[10,\"type\",\"password\"],[8],[9],[0,\"\\n\\n    \"],[1,[26,\"gh-profile-image\",null,[[\"email\",\"setImage\"],[[22,[\"email\"]],[26,\"action\",[[21,0,[]],\"setImage\"],null]]]],false],[0,\"\\n\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"errors\"]],[22,[\"hasValidated\"]],\"blogTitle\"]],{\"statements\":[[0,\"        \"],[6,\"label\"],[10,\"for\",\"blog-title\"],[8],[0,\"Blog title\"],[9],[0,\"\\n        \"],[6,\"span\"],[10,\"class\",\"gh-input-icon gh-icon-content\"],[8],[0,\"\\n            \"],[1,[26,\"svg-jar\",[\"content\"],null],false],[0,\"\\n            \"],[1,[26,\"gh-trim-focus-input\",null,[[\"tabindex\",\"type\",\"name\",\"placeholder\",\"autocorrect\",\"value\",\"input\",\"focus-out\",\"data-test-blog-title-input\"],[\"1\",\"text\",\"blog-title\",\"Eg. The Daily Awesome\",\"off\",[26,\"readonly\",[[22,[\"blogTitle\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"blogTitle\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"preValidate\",\"blogTitle\"],null],true]]],false],[0,\"\\n        \"],[9],[0,\"\\n        \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"errors\"]],\"blogTitle\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"errors\"]],[22,[\"hasValidated\"]],\"name\"]],{\"statements\":[[0,\"        \"],[6,\"label\"],[10,\"for\",\"name\"],[8],[0,\"Full name\"],[9],[0,\"\\n        \"],[6,\"span\"],[10,\"class\",\"gh-input-icon gh-icon-user\"],[8],[0,\"\\n            \"],[1,[26,\"svg-jar\",[\"user-circle\"],null],false],[0,\"\\n            \"],[1,[26,\"gh-text-input\",null,[[\"tabindex\",\"name\",\"placeholder\",\"autocorrect\",\"value\",\"input\",\"focus-out\",\"data-test-name-input\"],[\"2\",\"name\",\"Eg. John H. Watson\",\"off\",[26,\"readonly\",[[22,[\"name\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"name\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"preValidate\",\"name\"],null],true]]],false],[0,\"\\n        \"],[9],[0,\"\\n        \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"errors\"]],\"name\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"errors\"]],[22,[\"hasValidated\"]],\"email\"]],{\"statements\":[[0,\"        \"],[6,\"label\"],[10,\"for\",\"email\"],[8],[0,\"Email address\"],[9],[0,\"\\n        \"],[6,\"span\"],[10,\"class\",\"gh-input-icon gh-icon-mail\"],[8],[0,\"\\n            \"],[1,[26,\"svg-jar\",[\"email\"],null],false],[0,\"\\n            \"],[1,[26,\"gh-text-input\",null,[[\"tabindex\",\"type\",\"name\",\"placeholder\",\"autocorrect\",\"value\",\"input\",\"focus-out\",\"data-test-email-input\"],[\"3\",\"email\",\"email\",\"Eg. john@example.com\",\"off\",[26,\"readonly\",[[22,[\"email\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"email\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"preValidate\",\"email\"],null],true]]],false],[0,\"\\n        \"],[9],[0,\"\\n        \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"errors\"]],\"email\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"errors\"]],[22,[\"hasValidated\"]],\"password\"]],{\"statements\":[[0,\"        \"],[6,\"label\"],[10,\"for\",\"password\"],[8],[0,\"Password\"],[9],[0,\"\\n        \"],[6,\"span\"],[10,\"class\",\"gh-input-icon gh-icon-lock\"],[8],[0,\"\\n            \"],[1,[26,\"svg-jar\",[\"lock\"],null],false],[0,\"\\n            \"],[1,[26,\"gh-text-input\",null,[[\"tabindex\",\"type\",\"name\",\"placeholder\",\"autocorrect\",\"value\",\"input\",\"focus-out\",\"data-test-password-input\"],[\"4\",\"password\",\"password\",\"At least 10 characters\",\"off\",[26,\"readonly\",[[22,[\"password\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"password\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"preValidate\",\"password\"],null],true]]],false],[0,\"\\n        \"],[9],[0,\"\\n        \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"errors\"]],\"password\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-task-button\",null,[[\"task\",\"type\",\"tabindex\",\"class\"],[[22,[\"setup\"]],\"submit\",\"5\",\"gh-btn gh-btn-green gh-btn-lg gh-btn-block gh-btn-icon\"]],{\"statements\":[[4,\"if\",[[21,1,[\"isRunning\"]]],null,{\"statements\":[[0,\"            \"],[6,\"span\"],[8],[1,[26,\"svg-jar\",[\"spinner\"],[[\"class\"],[\"gh-icon-spinner gh-btn-icon-no-margin\"]]],false],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"            \"],[6,\"span\"],[8],[0,\"Last step: Invite your team \"],[1,[26,\"svg-jar\",[\"arrow-right-small\"],[[\"class\"],[\"gh-btn-icon-right\"]]],false],[9],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[1]},null],[9],[0,\"\\n\\n\"],[6,\"p\"],[10,\"class\",\"main-error\"],[8],[1,[20,\"flowErrors\"],false],[0,\" \"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/setup/two.hbs" } });
});
define("ghost-admin/templates/signin", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "3/g1Bdaw", "block": "{\"symbols\":[\"task\"],\"statements\":[[6,\"div\"],[10,\"class\",\"gh-flow\"],[8],[0,\"\\n    \"],[6,\"div\"],[10,\"class\",\"gh-flow-content-wrap\"],[8],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"gh-flow-content\"],[8],[0,\"\\n            \"],[6,\"form\"],[10,\"id\",\"login\"],[10,\"method\",\"post\"],[10,\"class\",\"gh-signin\"],[10,\"novalidate\",\"novalidate\"],[3,\"action\",[[21,0,[]],\"authenticate\"],[[\"on\"],[\"submit\"]]],[8],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"signin\",\"errors\"]],[22,[\"hasValidated\"]],\"identification\"]],{\"statements\":[[0,\"                    \"],[6,\"span\"],[10,\"class\",\"gh-input-icon gh-icon-mail\"],[8],[0,\"\\n                        \"],[1,[26,\"svg-jar\",[\"email\"],null],false],[0,\"\\n                        \"],[1,[26,\"gh-trim-focus-input\",null,[[\"class\",\"type\",\"placeholder\",\"name\",\"autocapitalize\",\"autocorrect\",\"tabindex\",\"value\",\"input\",\"focus-out\"],[\"email\",\"email\",\"Email Address\",\"identification\",\"off\",\"off\",\"1\",[26,\"readonly\",[[22,[\"signin\",\"identification\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"signin\",\"identification\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"validate\",\"identification\"],null]]]],false],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"signin\",\"errors\"]],[22,[\"hasValidated\"]],\"password\"]],{\"statements\":[[0,\"                    \"],[6,\"span\"],[10,\"class\",\"gh-input-icon gh-icon-lock forgotten-wrap\"],[8],[0,\"\\n                        \"],[1,[26,\"svg-jar\",[\"lock\"],null],false],[0,\"\\n                        \"],[1,[26,\"gh-text-input\",null,[[\"class\",\"type\",\"placeholder\",\"name\",\"tabindex\",\"autocorrect\",\"value\",\"input\"],[\"password\",\"password\",\"Password\",\"password\",\"2\",\"off\",[26,\"readonly\",[[22,[\"signin\",\"password\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"signin\",\"password\"]]],null]],[[\"value\"],[\"target.value\"]]]]]],false],[0,\"\\n\\n\"],[4,\"gh-task-button\",null,[[\"task\",\"class\",\"tabindex\",\"type\",\"successClass\",\"failureClass\"],[[22,[\"forgotten\"]],\"forgotten-link gh-btn gh-btn-link gh-btn-icon\",\"4\",\"button\",\"\",\"\"]],{\"statements\":[[0,\"                            \"],[6,\"span\"],[8],[4,\"if\",[[21,1,[\"isRunning\"]]],null,{\"statements\":[[1,[26,\"svg-jar\",[\"spinner\"],[[\"class\"],[\"gh-spinner\"]]],false]],\"parameters\":[]},{\"statements\":[[0,\"Forgot?\"]],\"parameters\":[]}],[9],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n                \"],[1,[26,\"gh-task-button\",[\"Sign in\"],[[\"task\",\"class\",\"type\",\"tabindex\"],[[22,[\"validateAndAuthenticate\"]],\"login gh-btn gh-btn-blue gh-btn-block gh-btn-icon\",\"submit\",\"3\"]]],false],[0,\"\\n            \"],[9],[0,\"\\n\\n            \"],[6,\"p\"],[10,\"class\",\"main-error\"],[8],[1,[26,\"if\",[[22,[\"flowErrors\"]],[22,[\"flowErrors\"]]],null],false],[0,\" \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/signin.hbs" } });
});
define("ghost-admin/templates/signup", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "6+7QQ5b0", "block": "{\"symbols\":[],\"statements\":[[6,\"div\"],[10,\"class\",\"gh-flow\"],[8],[0,\"\\n\\n    \"],[6,\"div\"],[10,\"class\",\"gh-flow-content-wrap\"],[8],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"gh-flow-content\"],[8],[0,\"\\n            \"],[6,\"header\"],[8],[0,\"\\n                \"],[6,\"h1\"],[8],[0,\"Create your account\"],[9],[0,\"\\n            \"],[9],[0,\"\\n\\n            \"],[6,\"form\"],[10,\"id\",\"signup\"],[10,\"class\",\"gh-flow-create\"],[10,\"method\",\"post\"],[10,\"novalidate\",\"novalidate\"],[8],[0,\"\\n\"],[0,\"                \"],[6,\"input\"],[10,\"style\",\"display:none;\"],[10,\"name\",\"fakeusernameremembered\"],[10,\"type\",\"text\"],[8],[9],[0,\"\\n                \"],[6,\"input\"],[10,\"style\",\"display:none;\"],[10,\"name\",\"fakepasswordremembered\"],[10,\"type\",\"password\"],[8],[9],[0,\"\\n\\n                \"],[1,[26,\"gh-profile-image\",null,[[\"email\",\"setImage\"],[[22,[\"signupDetails\",\"email\"]],[26,\"action\",[[21,0,[]],\"setImage\"],null]]]],false],[0,\"\\n\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"signupDetails\",\"errors\"]],[22,[\"hasValidated\"]],\"email\"]],{\"statements\":[[0,\"                    \"],[6,\"label\"],[10,\"for\",\"email-address\"],[8],[0,\"Email address\"],[9],[0,\"\\n                    \"],[6,\"span\"],[10,\"class\",\"gh-input-icon gh-icon-mail\"],[8],[0,\"\\n                        \"],[1,[26,\"svg-jar\",[\"email\"],null],false],[0,\"\\n                        \"],[1,[26,\"gh-text-input\",null,[[\"type\",\"name\",\"placeholder\",\"disabled\",\"autocorrect\",\"value\",\"input\"],[\"email\",\"email\",\"Eg. john@example.com\",\"disabled\",\"off\",[26,\"readonly\",[[22,[\"signupDetails\",\"email\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"signupDetails\",\"email\"]]],null]],[[\"value\"],[\"target.value\"]]]]]],false],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"signupDetails\",\"errors\"]],[22,[\"hasValidated\"]],\"name\"]],{\"statements\":[[0,\"                    \"],[6,\"label\"],[10,\"for\",\"full-name\"],[8],[0,\"Full name\"],[9],[0,\"\\n                    \"],[6,\"span\"],[10,\"class\",\"gh-input-icon gh-icon-user\"],[8],[0,\"\\n                        \"],[1,[26,\"svg-jar\",[\"user-circle\"],null],false],[0,\"\\n                        \"],[1,[26,\"gh-trim-focus-input\",null,[[\"tabindex\",\"type\",\"name\",\"placeholder\",\"autocorrect\",\"value\",\"input\",\"keyEvents\",\"focus-out\"],[\"1\",\"text\",\"name\",\"Eg. John H. Watson\",\"off\",[26,\"readonly\",[[22,[\"signupDetails\",\"name\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"signupDetails\",\"name\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"hash\",null,[[\"Enter\"],[[26,\"action\",[[21,0,[]],\"signup\"],null]]]],[26,\"action\",[[21,0,[]],\"validate\",\"name\"],null]]]],false],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"signupDetails\",\"errors\"]],\"name\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"signupDetails\",\"errors\"]],[22,[\"hasValidated\"]],\"password\"]],{\"statements\":[[0,\"                    \"],[6,\"label\"],[10,\"for\",\"password\"],[8],[0,\"Password\"],[9],[0,\"\\n                    \"],[6,\"span\"],[10,\"class\",\"gh-input-icon gh-icon-lock\"],[8],[0,\"\\n                        \"],[1,[26,\"svg-jar\",[\"lock\"],null],false],[0,\"\\n                        \"],[1,[26,\"gh-text-input\",null,[[\"tabindex\",\"type\",\"name\",\"placeholder\",\"onenter\",\"autocorrect\",\"value\",\"input\",\"focus-out\"],[\"2\",\"password\",\"password\",\"At least 10 characters\",[26,\"action\",[[21,0,[]],\"signup\"],null],\"off\",[26,\"readonly\",[[22,[\"signupDetails\",\"password\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"signupDetails\",\"password\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"validate\",\"password\"],null]]]],false],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"signupDetails\",\"errors\"]],\"password\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[9],[0,\"\\n\\n            \"],[1,[26,\"gh-task-button\",[\"Create Account\"],[[\"runningText\",\"task\",\"class\",\"tabindex\"],[\"Creating\",[22,[\"signup\"]],\"gh-btn gh-btn-green gh-btn-lg gh-btn-block gh-btn-icon\",\"3\"]]],false],[0,\"\\n\\n            \"],[6,\"p\"],[10,\"class\",\"main-error\"],[8],[1,[26,\"if\",[[22,[\"flowErrors\"]],[22,[\"flowErrors\"]]],null],false],[0,\" \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/signup.hbs" } });
});
define("ghost-admin/templates/subscribers", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "CdE/0Ttd", "block": "{\"symbols\":[],\"statements\":[[6,\"section\"],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[6,\"header\"],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[6,\"h2\"],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"Subscribers \"],[6,\"span\"],[10,\"style\",\"font-weight:200;margin-left:10px;display:inline-block;\"],[10,\"data-test-total-subscribers\",\"\"],[8],[0,\" (\"],[1,[20,\"total\"],false],[0,\")\"],[9],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[4,\"link-to\",[\"subscribers.import\"],[[\"class\"],[\"gh-btn gh-btn-hover-green\"]],{\"statements\":[[6,\"span\"],[8],[0,\"Import CSV\"],[9]],\"parameters\":[]},null],[0,\"\\n            \"],[6,\"a\"],[10,\"href\",\"#\"],[10,\"class\",\"gh-btn gh-btn-hover-blue\"],[3,\"action\",[[21,0,[]],\"exportData\"]],[8],[6,\"span\"],[8],[0,\"Export CSV\"],[9],[9],[0,\"\\n            \"],[4,\"link-to\",[\"subscribers.new\"],[[\"class\"],[\"gh-btn gh-btn-green\"]],{\"statements\":[[6,\"span\"],[8],[0,\"Add Subscriber\"],[9]],\"parameters\":[]},null],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[6,\"section\"],[10,\"class\",\"view-container\"],[8],[0,\"\\n        \"],[1,[26,\"gh-subscribers-table\",null,[[\"table\",\"isLoading\",\"loadNextPage\",\"sortByColumn\",\"delete\"],[[22,[\"table\"]],[22,[\"isLoading\"]],[26,\"action\",[[21,0,[]],\"loadNextPage\"],null],[26,\"action\",[[21,0,[]],\"sortByColumn\"],null],[26,\"action\",[[21,0,[]],\"deleteSubscriber\"],null]]]],false],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"subscriberToDelete\"]]],null,{\"statements\":[[0,\"    \"],[1,[26,\"gh-fullscreen-modal\",[\"delete-subscriber\"],[[\"model\",\"confirm\",\"close\",\"modifier\"],[[22,[\"subscriberToDelete\"]],[26,\"action\",[[21,0,[]],\"confirmDeleteSubscriber\"],null],[26,\"action\",[[21,0,[]],\"cancelDeleteSubscriber\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[1,[20,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/subscribers.hbs" } });
});
define("ghost-admin/templates/subscribers/import", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "g1GsUbjD", "block": "{\"symbols\":[],\"statements\":[[1,[26,\"gh-fullscreen-modal\",[\"import-subscribers\"],[[\"confirm\",\"close\",\"modifier\"],[[26,\"route-action\",[\"reset\"],null],[26,\"route-action\",[\"cancel\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/subscribers/import.hbs" } });
});
define("ghost-admin/templates/subscribers/new", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "t1cwEfTx", "block": "{\"symbols\":[],\"statements\":[[1,[26,\"gh-fullscreen-modal\",[\"new-subscriber\"],[[\"model\",\"confirm\",\"close\",\"modifier\"],[[22,[\"subscriber\"]],[26,\"route-action\",[\"save\"],null],[26,\"route-action\",[\"cancel\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/subscribers/new.hbs" } });
});
define("ghost-admin/templates/team/index-loading", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "tUpas101", "block": "{\"symbols\":[],\"statements\":[[6,\"section\"],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[6,\"header\"],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[6,\"h2\"],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"Team members\"],[9],[0,\"\\n\"],[4,\"unless\",[[22,[\"session\",\"user\",\"isAuthorOrContributor\"]]],null,{\"statements\":[[0,\"            \"],[6,\"section\"],[10,\"class\",\"view-actions\"],[8],[0,\"\\n                \"],[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-green\"],[3,\"action\",[[21,0,[]],\"toggleInviteUserModal\"]],[8],[6,\"span\"],[8],[0,\"Invite People\"],[9],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[9],[0,\"\\n\\n    \"],[6,\"div\"],[10,\"class\",\"gh-content\"],[8],[0,\"\\n        \"],[1,[20,\"gh-loading-spinner\"],false],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/team/index-loading.hbs" } });
});
define("ghost-admin/templates/team/index", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "sEsYJv1U", "block": "{\"symbols\":[\"user\",\"component\",\"user\",\"component\",\"user\",\"component\",\"invite\",\"component\"],\"statements\":[[6,\"section\"],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[6,\"header\"],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[6,\"h2\"],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"Team members\"],[9],[0,\"\\n\"],[4,\"unless\",[[22,[\"session\",\"user\",\"isAuthorOrContributor\"]]],null,{\"statements\":[[0,\"            \"],[6,\"section\"],[10,\"class\",\"view-actions\"],[8],[0,\"\\n                \"],[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-green\"],[3,\"action\",[[21,0,[]],\"toggleInviteUserModal\"]],[8],[6,\"span\"],[8],[0,\"Invite People\"],[9],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"showInviteUserModal\"]]],null,{\"statements\":[[0,\"        \"],[1,[26,\"gh-fullscreen-modal\",[\"invite-new-user\"],[[\"close\",\"modifier\"],[[26,\"action\",[[21,0,[]],\"toggleInviteUserModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n    \"],[6,\"section\"],[10,\"class\",\"gh-team\"],[8],[0,\"\\n\\n\"],[4,\"unless\",[[22,[\"session\",\"user\",\"isAuthorOrContributor\"]]],null,{\"statements\":[[4,\"if\",[[22,[\"invites\"]]],null,{\"statements\":[[0,\"        \"],[6,\"section\"],[10,\"class\",\"apps-grid-container gh-invited-users\"],[10,\"data-test-invited-users\",\"\"],[8],[0,\"\\n            \"],[6,\"span\"],[10,\"class\",\"apps-grid-title\"],[8],[0,\"Invited users\"],[9],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"apps-grid\"],[8],[0,\"\\n\\n\"],[4,\"each\",[[22,[\"sortedInvites\"]]],null,{\"statements\":[[4,\"gh-user-invited\",null,[[\"invite\",\"reload\"],[[21,7,[]],[26,\"route-action\",[\"reload\"],null]]],{\"statements\":[[0,\"                        \"],[6,\"div\"],[10,\"class\",\"apps-grid-cell\"],[11,\"data-test-invite-id\",[27,[[21,7,[\"id\"]]]]],[8],[0,\"\\n                            \"],[6,\"article\"],[10,\"class\",\"apps-card-app\"],[8],[0,\"\\n                                \"],[6,\"div\"],[10,\"class\",\"apps-card-left\"],[8],[0,\"\\n                                    \"],[6,\"span\"],[10,\"class\",\"user-list-item-icon\"],[8],[1,[26,\"svg-jar\",[\"email\"],null],false],[0,\"ic\"],[9],[0,\"\\n                                    \"],[6,\"div\"],[10,\"class\",\"apps-card-meta\"],[8],[0,\"\\n                                        \"],[6,\"h3\"],[10,\"class\",\"apps-card-app-title\"],[10,\"data-test-email\",\"\"],[8],[1,[21,7,[\"email\"]],false],[9],[0,\"\\n                                        \"],[6,\"p\"],[10,\"class\",\"apps-card-app-desc\"],[8],[0,\"\\n\"],[4,\"if\",[[21,7,[\"pending\"]]],null,{\"statements\":[[0,\"                                                \"],[6,\"span\"],[10,\"class\",\"description-error\"],[8],[0,\"\\n                                                    Invitation not sent - please try again\\n                                                \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                                \"],[6,\"span\"],[10,\"class\",\"description\"],[10,\"data-test-invite-description\",\"\"],[8],[0,\"\\n                                                    Invitation sent: \"],[1,[21,8,[\"createdAt\"]],false],[0,\",\\n                                                    \"],[1,[26,\"if\",[[21,8,[\"isExpired\"]],\"expired\",\"expires\"],null],false],[0,\" \"],[1,[21,8,[\"expiresAt\"]],false],[0,\"\\n                                                \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                                        \"],[9],[0,\"\\n                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n                                \"],[6,\"div\"],[10,\"class\",\"apps-card-right\"],[8],[0,\"\\n                                    \"],[6,\"div\"],[10,\"class\",\"apps-configured\"],[8],[0,\"\\n\"],[4,\"if\",[[21,8,[\"isSending\"]]],null,{\"statements\":[[0,\"                                            \"],[6,\"span\"],[8],[0,\"Sending Invite...\"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                            \"],[6,\"a\"],[10,\"class\",\"apps-configured-action red-hover\"],[10,\"href\",\"#revoke\"],[10,\"data-test-revoke-button\",\"\"],[3,\"action\",[[21,0,[]],\"revoke\"],[[\"target\"],[[21,8,[]]]]],[8],[0,\"\\n                                                Revoke\\n                                            \"],[9],[0,\"\\n                                            \"],[6,\"a\"],[10,\"class\",\"apps-configured-action green-hover\"],[10,\"href\",\"#resend\"],[10,\"data-test-resend-button\",\"\"],[3,\"action\",[[21,0,[]],\"resend\"],[[\"target\"],[[21,8,[]]]]],[8],[0,\"\\n                                                Resend\\n                                            \"],[9],[0,\"\\n\\n                                            \"],[6,\"span\"],[11,\"class\",[27,[\"apps-configured-action gh-badge \",[21,7,[\"role\",\"lowerCaseName\"]]]]],[10,\"data-test-role-name\",\"\"],[8],[1,[21,7,[\"role\",\"name\"]],false],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[8]},null]],\"parameters\":[7]},null],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"\\n    \"],[6,\"section\"],[10,\"class\",\"apps-grid-container gh-active-users\"],[10,\"data-test-active-users\",\"\"],[8],[0,\"\\n        \"],[6,\"span\"],[10,\"class\",\"apps-grid-title\"],[8],[0,\"Active users\"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"apps-grid\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"session\",\"user\",\"isAuthorOrContributor\"]]],null,{\"statements\":[[4,\"with\",[[22,[\"session\",\"user\"]]],null,{\"statements\":[[4,\"gh-user-active\",null,[[\"user\"],[[21,5,[]]]],{\"statements\":[[0,\"                        \"],[1,[26,\"gh-user-list-item\",null,[[\"user\",\"component\"],[[21,5,[]],[21,6,[]]]]],false],[0,\"\\n\"]],\"parameters\":[6]},null]],\"parameters\":[5]},null]],\"parameters\":[]},{\"statements\":[[4,\"each\",[[22,[\"sortedActiveUsers\"]]],[[\"key\"],[\"id\"]],{\"statements\":[[4,\"gh-user-active\",null,[[\"user\"],[[21,3,[]]]],{\"statements\":[[0,\"                        \"],[1,[26,\"gh-user-list-item\",null,[[\"user\",\"component\"],[[21,3,[]],[21,4,[]]]]],false],[0,\"\\n\"]],\"parameters\":[4]},null]],\"parameters\":[3]},null]],\"parameters\":[]}],[0,\"        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[1,[26,\"infinity-loader\",null,[[\"infinityModel\",\"scrollable\",\"triggerOffset\"],[[22,[\"activeUsers\"]],\".gh-main\",500]]],false],[0,\"\\n\\n    \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[26,\"and\",[[22,[\"suspendedUsers\"]],[26,\"not\",[[22,[\"session\",\"user\",\"isAuthorOrContributor\"]]],null]],null]],null,{\"statements\":[[0,\"    \"],[6,\"section\"],[10,\"class\",\"apps-grid-container gh-active-users\"],[10,\"data-test-suspended-users\",\"\"],[8],[0,\"\\n        \"],[6,\"span\"],[10,\"class\",\"apps-grid-title\"],[8],[0,\"Suspended users\"],[9],[0,\"\\n        \"],[6,\"div\"],[10,\"class\",\"apps-grid\"],[8],[0,\"\\n\"],[4,\"each\",[[22,[\"sortedSuspendedUsers\"]]],[[\"key\"],[\"id\"]],{\"statements\":[[4,\"gh-user-active\",null,[[\"user\"],[[21,1,[]]]],{\"statements\":[[0,\"                    \"],[1,[26,\"gh-user-list-item\",null,[[\"user\",\"component\"],[[21,1,[]],[21,2,[]]]]],false],[0,\"\\n\"]],\"parameters\":[2]},null]],\"parameters\":[1]},null],[0,\"        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/team/index.hbs" } });
});
define("ghost-admin/templates/team/user-loading", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "cbBxTvD9", "block": "{\"symbols\":[],\"statements\":[[6,\"section\"],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[6,\"header\"],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[6,\"h2\"],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            \"],[4,\"link-to\",[\"team\"],[[\"data-test-team-link\"],[true]],{\"statements\":[[0,\"Team\"]],\"parameters\":[]},null],[0,\"\\n            \"],[6,\"span\"],[8],[1,[26,\"svg-jar\",[\"arrow-right\"],null],false],[9],[0,\"\\n            \"],[1,[22,[\"user\",\"name\"]],false],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[6,\"section\"],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[6,\"div\"],[10,\"class\",\"gh-btn gh-btn-blue\"],[8],[6,\"span\"],[8],[0,\"Save\"],[9],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[6,\"div\"],[10,\"class\",\"gh-content\"],[8],[0,\"\\n        \"],[1,[20,\"gh-loading-spinner\"],false],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/team/user-loading.hbs" } });
});
define("ghost-admin/templates/team/user", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.HTMLBars.template({ "id": "aFDsD/mH", "block": "{\"symbols\":[],\"statements\":[[6,\"section\"],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[6,\"header\"],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[6,\"h2\"],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            \"],[4,\"link-to\",[\"team\"],[[\"data-test-team-link\"],[true]],{\"statements\":[[0,\"Team\"]],\"parameters\":[]},null],[0,\"\\n            \"],[6,\"span\"],[8],[1,[26,\"svg-jar\",[\"arrow-right\"],null],false],[9],[0,\"\\n            \"],[1,[22,[\"user\",\"name\"]],false],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"user\",\"isSuspended\"]]],null,{\"statements\":[[0,\"            \"],[6,\"span\"],[10,\"class\",\"gh-badge suspended\"],[10,\"data-test-suspended-badge\",\"\"],[8],[0,\"Suspended\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"showLeaveSettingsModal\"]]],null,{\"statements\":[[0,\"            \"],[1,[26,\"gh-fullscreen-modal\",[\"leave-settings\"],[[\"confirm\",\"close\",\"modifier\"],[[26,\"action\",[[21,0,[]],\"leaveSettings\"],null],[26,\"action\",[[21,0,[]],\"toggleLeaveSettingsModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n        \"],[6,\"section\"],[10,\"class\",\"view-actions\"],[8],[0,\"\\n\"],[4,\"if\",[[22,[\"userActionsAreVisible\"]]],null,{\"statements\":[[0,\"                \"],[6,\"span\"],[10,\"class\",\"dropdown\"],[8],[0,\"\\n\"],[4,\"gh-dropdown-button\",null,[[\"dropdownName\",\"classNames\",\"title\",\"data-test-user-actions\"],[\"user-actions-menu\",\"gh-btn gh-btn-default gh-btn-icon only-has-icon user-actions-cog\",\"User Actions\",true]],{\"statements\":[[0,\"                        \"],[6,\"span\"],[8],[0,\"\\n                            \"],[1,[26,\"svg-jar\",[\"settings\"],null],false],[0,\"\\n                            \"],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[0,\"User Settings\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"gh-dropdown\",null,[[\"name\",\"tagName\",\"classNames\"],[\"user-actions-menu\",\"ul\",\"user-actions-menu dropdown-menu dropdown-triangle-top-right\"]],{\"statements\":[[4,\"if\",[[22,[\"canMakeOwner\"]]],null,{\"statements\":[[0,\"                            \"],[6,\"li\"],[8],[0,\"\\n                                \"],[6,\"button\"],[3,\"action\",[[21,0,[]],\"toggleTransferOwnerModal\"]],[8],[0,\"\\n                                    Make Owner\\n                                \"],[9],[0,\"\\n\"],[4,\"if\",[[22,[\"showTransferOwnerModal\"]]],null,{\"statements\":[[0,\"                                    \"],[1,[26,\"gh-fullscreen-modal\",[\"transfer-owner\"],[[\"confirm\",\"close\",\"modifier\"],[[26,\"action\",[[21,0,[]],\"transferOwnership\"],null],[26,\"action\",[[21,0,[]],\"toggleTransferOwnerModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"if\",[[22,[\"deleteUserActionIsVisible\"]]],null,{\"statements\":[[0,\"                            \"],[6,\"li\"],[8],[0,\"\\n                                \"],[6,\"button\"],[10,\"class\",\"delete\"],[10,\"data-test-delete-button\",\"\"],[3,\"action\",[[21,0,[]],\"toggleDeleteUserModal\"]],[8],[0,\"\\n                                    Delete User\\n                                \"],[9],[0,\"\\n                            \"],[9],[0,\"\\n\"],[4,\"if\",[[22,[\"user\",\"isActive\"]]],null,{\"statements\":[[0,\"                                \"],[6,\"li\"],[8],[0,\"\\n                                    \"],[6,\"button\"],[10,\"class\",\"suspend\"],[10,\"data-test-suspend-button\",\"\"],[3,\"action\",[[21,0,[]],\"toggleSuspendUserModal\"]],[8],[0,\"\\n                                        Suspend User\\n                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"if\",[[22,[\"user\",\"isSuspended\"]]],null,{\"statements\":[[0,\"                                \"],[6,\"li\"],[8],[0,\"\\n                                    \"],[6,\"button\"],[10,\"class\",\"unsuspend\"],[10,\"data-test-unsuspend-button\",\"\"],[3,\"action\",[[21,0,[]],\"toggleUnsuspendUserModal\"]],[8],[0,\"\\n                                        Un-suspend User\\n                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n            \"],[1,[26,\"gh-task-button\",null,[[\"class\",\"task\",\"data-test-save-button\"],[\"gh-btn gh-btn-blue gh-btn-icon\",[22,[\"save\"]],true]]],false],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"showDeleteUserModal\"]]],null,{\"statements\":[[0,\"                \"],[1,[26,\"gh-fullscreen-modal\",[\"delete-user\"],[[\"model\",\"confirm\",\"close\",\"modifier\"],[[22,[\"user\"]],[26,\"action\",[[21,0,[]],\"deleteUser\"],null],[26,\"action\",[[21,0,[]],\"toggleDeleteUserModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[22,[\"showSuspendUserModal\"]]],null,{\"statements\":[[0,\"                \"],[1,[26,\"gh-fullscreen-modal\",[\"suspend-user\"],[[\"model\",\"confirm\",\"close\",\"modifier\"],[[22,[\"user\"]],[26,\"action\",[[21,0,[]],\"suspendUser\"],null],[26,\"action\",[[21,0,[]],\"toggleSuspendUserModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[22,[\"showUnsuspendUserModal\"]]],null,{\"statements\":[[0,\"                \"],[1,[26,\"gh-fullscreen-modal\",[\"unsuspend-user\"],[[\"model\",\"confirm\",\"close\",\"modifier\"],[[22,[\"user\"]],[26,\"action\",[[21,0,[]],\"unsuspendUser\"],null],[26,\"action\",[[21,0,[]],\"toggleUnsuspendUserModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[6,\"div\"],[10,\"class\",\"gm-main view-container settings-user\"],[8],[0,\"\\n        \"],[6,\"form\"],[10,\"class\",\"user-profile\"],[10,\"novalidate\",\"novalidate\"],[10,\"autocomplete\",\"off\"],[3,\"action\",[[21,0,[]],[26,\"perform\",[[22,[\"save\"]]],null]],[[\"on\"],[\"submit\"]]],[8],[0,\"\\n\\n          \"],[6,\"figure\"],[10,\"class\",\"user-cover\"],[11,\"style\",[26,\"background-image-style\",[[22,[\"user\",\"coverImageUrl\"]]],null],null],[8],[0,\"\\n              \"],[6,\"button\"],[10,\"class\",\"gh-btn gh-btn-default user-cover-edit\"],[10,\"type\",\"button\"],[3,\"action\",[[21,0,[]],\"toggleUploadCoverModal\"]],[8],[6,\"span\"],[8],[0,\"Change Cover\"],[9],[9],[0,\"\\n\"],[4,\"if\",[[22,[\"showUploadCoverModal\"]]],null,{\"statements\":[[0,\"                  \"],[1,[26,\"gh-fullscreen-modal\",[\"upload-image\"],[[\"model\",\"close\",\"modifier\"],[[26,\"hash\",null,[[\"model\",\"imageProperty\"],[[22,[\"user\"]],\"coverImage\"]]],[26,\"action\",[[21,0,[]],\"toggleUploadCoverModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"          \"],[9],[0,\"\\n\\n          \"],[6,\"figure\"],[10,\"class\",\"user-image bg-whitegrey\"],[8],[0,\"\\n              \"],[6,\"div\"],[10,\"id\",\"user-image\"],[10,\"class\",\"img\"],[11,\"style\",[26,\"background-image-style\",[[22,[\"user\",\"profileImageUrl\"]]],null],null],[8],[6,\"span\"],[10,\"class\",\"hidden\"],[8],[1,[22,[\"user\",\"name\"]],false],[0,\"\\\"s Picture\"],[9],[9],[0,\"\\n              \"],[6,\"button\"],[10,\"class\",\"edit-user-image\"],[10,\"type\",\"button\"],[3,\"action\",[[21,0,[]],\"toggleUploadImageModal\"]],[8],[0,\"Edit Picture\"],[9],[0,\"\\n\"],[4,\"if\",[[22,[\"showUploadImageModal\"]]],null,{\"statements\":[[0,\"                  \"],[1,[26,\"gh-fullscreen-modal\",[\"upload-image\"],[[\"model\",\"close\",\"modifier\"],[[26,\"hash\",null,[[\"model\",\"imageProperty\"],[[22,[\"user\"]],\"profileImage\"]]],[26,\"action\",[[21,0,[]],\"toggleUploadImageModal\"],null],\"action wide\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"          \"],[9],[0,\"\\n\\n\"],[0,\"            \"],[6,\"input\"],[10,\"style\",\"display:none;\"],[10,\"name\",\"fakeusernameremembered\"],[10,\"type\",\"text\"],[8],[9],[0,\"\\n            \"],[6,\"input\"],[10,\"style\",\"display:none;\"],[10,\"name\",\"fakepasswordremembered\"],[10,\"type\",\"password\"],[8],[9],[0,\"\\n\\n            \"],[6,\"fieldset\"],[10,\"class\",\"user-details-bottom\"],[8],[0,\"\\n\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\",\"class\"],[[22,[\"user\",\"errors\"]],[22,[\"user\",\"hasValidated\"]],\"name\",\"first-form-group\"]],{\"statements\":[[0,\"                    \"],[6,\"label\"],[10,\"for\",\"user-name\"],[8],[0,\"Full Name\"],[9],[0,\"\\n                    \"],[1,[26,\"gh-text-input\",null,[[\"id\",\"class\",\"placeholder\",\"autocorrect\",\"value\",\"input\",\"focus-out\",\"data-test-name-input\"],[\"user-name\",\"user-name\",\"Full Name\",\"off\",[26,\"readonly\",[[22,[\"user\",\"name\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"user\",\"name\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"validate\",\"name\"],[[\"target\"],[[22,[\"user\"]]]]],true]]],false],[0,\"\\n\"],[4,\"if\",[[22,[\"user\",\"errors\",\"name\"]]],null,{\"statements\":[[0,\"                        \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"user\",\"errors\"]],\"name\"]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                        \"],[6,\"p\"],[8],[0,\"Use your real name so people can recognise you\"],[9],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"user\",\"errors\"]],[22,[\"user\",\"hasValidated\"]],\"slug\"]],{\"statements\":[[0,\"                    \"],[6,\"label\"],[10,\"for\",\"user-slug\"],[8],[0,\"Slug\"],[9],[0,\"\\n                    \"],[1,[26,\"gh-text-input\",null,[[\"class\",\"id\",\"name\",\"placeholder\",\"selectOnClick\",\"autocorrect\",\"value\",\"input\",\"focus-out\",\"data-test-slug-input\"],[\"user-name\",\"user-slug\",\"user\",\"Slug\",\"true\",\"off\",[26,\"readonly\",[[22,[\"slugValue\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"slugValue\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],[26,\"perform\",[[22,[\"updateSlug\"]],[22,[\"slugValue\"]]],null]],null],true]]],false],[0,\"\\n                    \"],[6,\"p\"],[8],[1,[20,\"gh-blog-url\"],false],[0,\"/author/\"],[1,[20,\"slugValue\"],false],[9],[0,\"\\n                    \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"user\",\"errors\"]],\"slug\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"user\",\"errors\"]],[22,[\"user\",\"hasValidated\"]],\"email\"]],{\"statements\":[[0,\"                    \"],[6,\"label\"],[10,\"for\",\"user-email\"],[8],[0,\"Email\"],[9],[0,\"\\n\"],[4,\"if\",[[22,[\"canChangeEmail\"]]],null,{\"statements\":[[0,\"                        \"],[1,[26,\"gh-text-input\",null,[[\"type\",\"id\",\"name\",\"placeholder\",\"autocapitalize\",\"autocorrect\",\"autocomplete\",\"value\",\"input\",\"focus-out\",\"data-test-email-input\"],[\"email\",\"user-email\",\"email\",\"Email Address\",\"off\",\"off\",\"off\",[26,\"readonly\",[[22,[\"user\",\"email\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"user\",\"email\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"validate\",\"email\"],[[\"target\"],[[22,[\"user\"]]]]],true]]],false],[0,\"\\n                        \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"user\",\"errors\"]],\"email\"]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                        \"],[6,\"span\"],[8],[1,[22,[\"user\",\"email\"]],false],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                    \"],[6,\"p\"],[8],[0,\"Used for notifications\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[22,[\"rolesDropdownIsVisible\"]]],null,{\"statements\":[[0,\"                    \"],[6,\"div\"],[10,\"class\",\"form-group\"],[8],[0,\"\\n                        \"],[6,\"label\"],[10,\"for\",\"user-role\"],[8],[0,\"Role\"],[9],[0,\"\\n                        \"],[6,\"span\"],[10,\"class\",\"gh-select\"],[10,\"tabindex\",\"0\"],[8],[0,\"\\n                            \"],[1,[26,\"one-way-select\",null,[[\"id\",\"options\",\"optionValuePath\",\"optionLabelPath\",\"value\",\"update\"],[\"new-user-role\",[22,[\"roles\"]],\"id\",\"name\",[22,[\"user\",\"role\"]],[26,\"action\",[[21,0,[]],\"changeRole\"],null]]]],false],[0,\"\\n                        \"],[9],[0,\"\\n                        \"],[6,\"p\"],[8],[0,\"What permissions should this user have?\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"user\",\"errors\"]],[22,[\"user\",\"hasValidated\"]],\"location\"]],{\"statements\":[[0,\"                    \"],[6,\"label\"],[10,\"for\",\"user-location\"],[8],[0,\"Location\"],[9],[0,\"\\n                    \"],[1,[26,\"gh-text-input\",null,[[\"id\",\"value\",\"input\",\"focus-out\",\"data-test-location-input\"],[\"user-location\",[26,\"readonly\",[[22,[\"user\",\"location\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"user\",\"location\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"validate\",\"location\"],[[\"target\"],[[22,[\"user\"]]]]],true]]],false],[0,\"\\n                    \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\",\"data-test-location-error\"],[[22,[\"user\",\"errors\"]],\"location\",true]]],false],[0,\"\\n                    \"],[6,\"p\"],[8],[0,\"Where in the world do you live?\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"user\",\"errors\"]],[22,[\"user\",\"hasValidated\"]],\"website\"]],{\"statements\":[[0,\"                    \"],[6,\"label\"],[10,\"for\",\"user-website\"],[8],[0,\"Website\"],[9],[0,\"\\n                    \"],[1,[26,\"gh-text-input\",null,[[\"type\",\"id\",\"autocapitalize\",\"autocorrect\",\"autocomplete\",\"value\",\"input\",\"focus-out\",\"data-test-website-input\"],[\"url\",\"user-website\",\"off\",\"off\",\"off\",[26,\"readonly\",[[22,[\"user\",\"website\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"user\",\"website\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"validate\",\"website\"],[[\"target\"],[[22,[\"user\"]]]]],true]]],false],[0,\"\\n                    \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\",\"data-test-website-error\"],[[22,[\"user\",\"errors\"]],\"website\",true]]],false],[0,\"\\n                    \"],[6,\"p\"],[8],[0,\"Have a website or blog other than this one? Link it!\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"user\",\"errors\"]],[22,[\"user\",\"hasValidated\"]],\"facebook\"]],{\"statements\":[[0,\"                    \"],[6,\"label\"],[10,\"for\",\"user-facebook\"],[8],[0,\"Facebook Profile\"],[9],[0,\"\\n                    \"],[1,[26,\"gh-text-input\",null,[[\"type\",\"placeholder\",\"autocorrect\",\"id\",\"name\",\"value\",\"input\",\"focus-out\",\"data-test-facebook-input\"],[\"url\",\"https://www.facebook.com/username\",\"off\",\"user-facebook\",\"user[facebook]\",[26,\"readonly\",[[22,[\"user\",\"facebook\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"_scratchFacebook\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"validateFacebookUrl\"],null],true]]],false],[0,\"\\n                    \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\",\"data-test-facebook-error\"],[[22,[\"user\",\"errors\"]],\"facebook\",true]]],false],[0,\"\\n                    \"],[6,\"p\"],[8],[0,\"URL of your personal Facebook Profile\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"user\",\"errors\"]],[22,[\"user\",\"hasValidated\"]],\"twitter\"]],{\"statements\":[[0,\"                    \"],[6,\"label\"],[10,\"for\",\"user-twitter\"],[8],[0,\"Twitter Profile\"],[9],[0,\"\\n                    \"],[1,[26,\"gh-text-input\",null,[[\"type\",\"placeholder\",\"autocorrect\",\"id\",\"name\",\"value\",\"input\",\"focus-out\",\"data-test-twitter-input\"],[\"url\",\"https://twitter.com/username\",\"off\",\"user-twitter\",\"user[twitter]\",[26,\"readonly\",[[22,[\"user\",\"twitter\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"_scratchTwitter\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"validateTwitterUrl\"],null],true]]],false],[0,\"\\n                    \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\",\"data-test-twitter-error\"],[[22,[\"user\",\"errors\"]],\"twitter\",true]]],false],[0,\"\\n                    \"],[6,\"p\"],[8],[0,\"URL of your personal Twitter profile\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\",\"class\"],[[22,[\"user\",\"errors\"]],[22,[\"user\",\"hasValidated\"]],\"bio\",\"bio-container\"]],{\"statements\":[[0,\"                    \"],[6,\"label\"],[10,\"for\",\"user-bio\"],[8],[0,\"Bio\"],[9],[0,\"\\n                    \"],[1,[26,\"gh-textarea\",null,[[\"id\",\"value\",\"input\",\"focus-out\",\"data-test-bio-input\"],[\"user-bio\",[26,\"readonly\",[[22,[\"user\",\"bio\"]]],null],[26,\"action\",[[21,0,[]],[26,\"mut\",[[22,[\"user\",\"bio\"]]],null]],[[\"value\"],[\"target.value\"]]],[26,\"action\",[[21,0,[]],\"validate\",\"bio\"],[[\"target\"],[[22,[\"user\"]]]]],true]]],false],[0,\"\\n                    \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\",\"data-test-bio-error\"],[[22,[\"user\",\"errors\"]],\"bio\",true]]],false],[0,\"\\n                    \"],[6,\"p\"],[8],[0,\"\\n                        Write about you, in 200 characters or less.\\n                        \"],[1,[26,\"gh-count-characters\",[[22,[\"user\",\"bio\"]]],null],false],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n                \"],[6,\"hr\"],[8],[9],[0,\"\\n\\n            \"],[9],[0,\"\\n\\n        \"],[9],[0,\" \"],[0,\"\\n\\n\"],[4,\"if\",[[22,[\"canChangePassword\"]]],null,{\"statements\":[[0,\"            \"],[6,\"form\"],[10,\"id\",\"password-reset\"],[10,\"class\",\"user-profile\"],[10,\"novalidate\",\"novalidate\"],[10,\"autocomplete\",\"off\"],[3,\"action\",[[21,0,[]],[26,\"perform\",[[22,[\"user\",\"saveNewPassword\"]]],null]],[[\"on\"],[\"submit\"]]],[8],[0,\"\\n                \"],[6,\"fieldset\"],[8],[0,\"\\n\"],[4,\"unless\",[[22,[\"isNotOwnProfile\"]]],null,{\"statements\":[[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"user\",\"errors\"]],[22,[\"user\",\"hasValidated\"]],\"password\"]],{\"statements\":[[0,\"                            \"],[6,\"label\"],[10,\"for\",\"user-password-old\"],[8],[0,\"Old Password\"],[9],[0,\"\\n                            \"],[1,[26,\"gh-text-input\",null,[[\"type\",\"id\",\"value\",\"input\",\"keyEvents\",\"data-test-old-pass-input\"],[\"password\",\"user-password-old\",[26,\"readonly\",[[22,[\"user\",\"password\"]]],null],[26,\"action\",[[21,0,[]],\"updatePassword\"],[[\"value\"],[\"target.value\"]]],[26,\"hash\",null,[[\"Enter\"],[[26,\"action\",[[21,0,[]],[26,\"perform\",[[22,[\"user\",\"saveNewPassword\"]]],null]],null]]]],true]]],false],[0,\"\\n                            \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"user\",\"errors\"]],\"password\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"user\",\"errors\"]],[22,[\"user\",\"hasValidated\"]],\"newPassword\"]],{\"statements\":[[0,\"                        \"],[6,\"label\"],[10,\"for\",\"user-password-new\"],[8],[0,\"New Password\"],[9],[0,\"\\n                        \"],[1,[26,\"gh-text-input\",null,[[\"value\",\"type\",\"id\",\"input\",\"keyEvents\",\"data-test-new-pass-input\"],[[26,\"readonly\",[[22,[\"user\",\"newPassword\"]]],null],\"password\",\"user-password-new\",[26,\"action\",[[21,0,[]],\"updateNewPassword\"],[[\"value\"],[\"target.value\"]]],[26,\"hash\",null,[[\"Enter\"],[[26,\"action\",[[21,0,[]],[26,\"perform\",[[22,[\"user\",\"saveNewPassword\"]]],null]],null]]]],true]]],false],[0,\"\\n                        \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"user\",\"errors\"]],\"newPassword\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"gh-form-group\",null,[[\"errors\",\"hasValidated\",\"property\"],[[22,[\"user\",\"errors\"]],[22,[\"user\",\"hasValidated\"]],\"ne2Password\"]],{\"statements\":[[0,\"                        \"],[6,\"label\"],[10,\"for\",\"user-new-password-verification\"],[8],[0,\"Verify Password\"],[9],[0,\"\\n                        \"],[1,[26,\"gh-text-input\",null,[[\"value\",\"type\",\"id\",\"input\",\"keyEvents\",\"data-test-ne2-pass-input\"],[[26,\"readonly\",[[22,[\"user\",\"ne2Password\"]]],null],\"password\",\"user-new-password-verification\",[26,\"action\",[[21,0,[]],\"updateNe2Password\"],[[\"value\"],[\"target.value\"]]],[26,\"hash\",null,[[\"Enter\"],[[26,\"action\",[[21,0,[]],[26,\"perform\",[[22,[\"user\",\"saveNewPassword\"]]],null]],null]]]],true]]],false],[0,\"\\n                        \"],[1,[26,\"gh-error-message\",null,[[\"errors\",\"property\"],[[22,[\"user\",\"errors\"]],\"ne2Password\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n                    \"],[6,\"div\"],[10,\"class\",\"form-group\"],[8],[0,\"\\n                        \"],[1,[26,\"gh-task-button\",[\"Change Password\"],[[\"class\",\"task\",\"data-test-save-pw-button\"],[\"gh-btn gh-btn-red gh-btn-icon button-change-password\",[22,[\"user\",\"saveNewPassword\"]],true]]],false],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\" \"],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}", "meta": { "moduleName": "ghost-admin/templates/team/user.hbs" } });
});
define('ghost-admin/tests/mirage/mirage.lint-test', [], function () {
  'use strict';

  describe('ESLint | mirage', function () {

    it('mirage/config.js', function () {
      // test passed
    });

    it('mirage/config/authentication.js', function () {
      // test passed
    });

    it('mirage/config/configuration.js', function () {
      // test passed
    });

    it('mirage/config/invites.js', function () {
      // test passed
    });

    it('mirage/config/posts.js', function () {
      // test passed
    });

    it('mirage/config/roles.js', function () {
      // test passed
    });

    it('mirage/config/settings.js', function () {
      // test passed
    });

    it('mirage/config/slugs.js', function () {
      // test passed
    });

    it('mirage/config/subscribers.js', function () {
      // test passed
    });

    it('mirage/config/tags.js', function () {
      // test passed
    });

    it('mirage/config/themes.js', function () {
      // test passed
    });

    it('mirage/config/uploads.js', function () {
      // test passed
    });

    it('mirage/config/users.js', function () {
      // test passed
    });

    it('mirage/factories/invite.js', function () {
      // test passed
    });

    it('mirage/factories/notification.js', function () {
      // test passed
    });

    it('mirage/factories/post.js', function () {
      // test passed
    });

    it('mirage/factories/role.js', function () {
      // test passed
    });

    it('mirage/factories/subscriber.js', function () {
      // test passed
    });

    it('mirage/factories/tag.js', function () {
      // test passed
    });

    it('mirage/factories/user.js', function () {
      // test passed
    });

    it('mirage/fixtures/configurations.js', function () {
      // test passed
    });

    it('mirage/fixtures/private.js', function () {
      // test passed
    });

    it('mirage/fixtures/roles.js', function () {
      // test passed
    });

    it('mirage/fixtures/settings.js', function () {
      // test passed
    });

    it('mirage/fixtures/themes.js', function () {
      // test passed
    });

    it('mirage/fixtures/timezones.js', function () {
      // test passed
    });

    it('mirage/models/invite.js', function () {
      // test passed
    });

    it('mirage/models/notification.js', function () {
      // test passed
    });

    it('mirage/models/post.js', function () {
      // test passed
    });

    it('mirage/models/role.js', function () {
      // test passed
    });

    it('mirage/models/subscriber.js', function () {
      // test passed
    });

    it('mirage/models/tag.js', function () {
      // test passed
    });

    it('mirage/models/theme.js', function () {
      // test passed
    });

    it('mirage/models/user.js', function () {
      // test passed
    });

    it('mirage/scenarios/default.js', function () {
      // test passed
    });

    it('mirage/serializers/application.js', function () {
      // test passed
    });

    it('mirage/serializers/post.js', function () {
      // test passed
    });

    it('mirage/serializers/user.js', function () {
      // test passed
    });

    it('mirage/utils.js', function () {
      // test passed
    });
  });
});
define('ghost-admin/transforms/facebook-url-user', ['exports', 'ember-data/transform'], function (exports, _transform) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    exports.default = _transform.default.extend({
        deserialize(serialized) {
            if (serialized) {
                var _serialized$match = serialized.match(/(\S+)/),
                    _serialized$match2 = _slicedToArray(_serialized$match, 2);

                let user = _serialized$match2[1];


                return `https://www.facebook.com/${user}`;
            }
            return serialized;
        },

        serialize(deserialized) {
            if (deserialized) {
                var _deserialized$match = deserialized.match(/(?:https:\/\/)(?:www\.)(?:facebook\.com)\/(?:#!\/)?(\w+\/?\S+)/mi),
                    _deserialized$match2 = _slicedToArray(_deserialized$match, 2);

                let user = _deserialized$match2[1];


                return user;
            }
            return deserialized;
        }
    });
});
define('ghost-admin/transforms/json-string', ['exports', 'ember-data/transform'], function (exports, _transform) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _transform.default.extend({
        deserialize(serialized) {
            let _serialized = serialized === '' ? null : serialized;
            return JSON.parse(_serialized);
        },
        serialize(deserialized) {
            return deserialized ? JSON.stringify(deserialized) : null;
        }
    });
});
define('ghost-admin/transforms/moment-date', ['exports', 'ember-data/transform', 'moment'], function (exports, _transform, _moment) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _transform.default.extend({
        deserialize(serialized) {
            if (serialized) {
                return (0, _moment.default)(serialized);
            }
            return serialized;
        },

        serialize(deserialized) {
            if (deserialized) {
                return (0, _moment.default)(deserialized).toDate();
            }
            return deserialized;
        }
    });
});
define('ghost-admin/transforms/moment-utc', ['exports', 'ember-data/transform', 'moment'], function (exports, _transform, _moment) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _transform.default.extend({
        deserialize(serialized) {
            if (serialized) {
                return _moment.default.utc(serialized);
            }
            return serialized;
        },

        serialize(deserialized) {
            if (deserialized) {
                try {
                    return deserialized.toJSON();
                } catch (e) {
                    return deserialized;
                }
            }
            return deserialized;
        }
    });
});
define('ghost-admin/transforms/navigation-settings', ['exports', 'ghost-admin/models/navigation-item', 'ember-data/transform'], function (exports, _navigationItem, _transform) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _transform.default.extend({
        deserialize(serialized) {
            let navItems, settingsArray;

            try {
                settingsArray = JSON.parse(serialized) || [];
            } catch (e) {
                settingsArray = [];
            }

            navItems = settingsArray.map(itemDetails => _navigationItem.default.create(itemDetails));

            return Ember.A(navItems);
        },

        serialize(deserialized) {
            let settingsArray;

            if (Ember.isArray(deserialized)) {
                settingsArray = deserialized.map(item => {
                    let label = item.get('label').trim();
                    let url = item.get('url').trim();

                    return { label, url };
                }).compact();
            } else {
                settingsArray = [];
            }

            return JSON.stringify(settingsArray);
        }
    });
});
define('ghost-admin/transforms/raw', ['exports', 'ember-data/transform'], function (exports, _transform) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _transform.default.extend({
        deserialize(serialized) {
            return serialized;
        },

        serialize(deserialized) {
            return deserialized;
        }
    });
});
define('ghost-admin/transforms/slack-settings', ['exports', 'ghost-admin/models/slack-integration', 'ember-data/transform'], function (exports, _slackIntegration, _transform) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _transform.default.extend({
        deserialize(serialized) {
            let settingsArray;
            try {
                settingsArray = JSON.parse(serialized) || [];
            } catch (e) {
                settingsArray = [];
            }

            if (Ember.isEmpty(settingsArray)) {
                settingsArray.push({ url: '' });
            }

            let slackObjs = settingsArray.map(itemDetails => _slackIntegration.default.create(itemDetails));

            return slackObjs;
        },

        serialize(deserialized) {
            let settingsArray;
            if (Ember.isArray(deserialized)) {
                settingsArray = deserialized.map(item => {
                    let url = (item.get('url') || '').trim();
                    if (url) {
                        return { url };
                    }
                }).compact();
            } else {
                settingsArray = [];
            }
            return JSON.stringify(settingsArray);
        }
    });
});
define('ghost-admin/transforms/twitter-url-user', ['exports', 'ember-data/transform'], function (exports, _transform) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    exports.default = _transform.default.extend({
        deserialize(serialized) {
            if (serialized) {
                var _serialized$match = serialized.match(/@?([^/]*)/),
                    _serialized$match2 = _slicedToArray(_serialized$match, 2);

                let user = _serialized$match2[1];


                return `https://twitter.com/${user}`;
            }
            return serialized;
        },

        serialize(deserialized) {
            if (deserialized) {
                var _deserialized$match = deserialized.match(/(?:https:\/\/)(?:twitter\.com)\/(?:#!\/)?@?([^/]*)/),
                    _deserialized$match2 = _slicedToArray(_deserialized$match, 2);

                let user = _deserialized$match2[1];


                return `@${user}`;
            }
            return deserialized;
        }
    });
});
define('ghost-admin/transforms/unsplash-settings', ['exports', 'ember-data/transform', 'ghost-admin/models/unsplash-integration'], function (exports, _transform, _unsplashIntegration) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    /* eslint-disable camelcase */
    const DEFAULT_SETTINGS = {
        isActive: true
    };

    exports.default = _transform.default.extend({
        deserialize(serialized) {
            if (serialized) {
                let settingsObject;
                try {
                    settingsObject = JSON.parse(serialized) || DEFAULT_SETTINGS;
                } catch (e) {
                    settingsObject = DEFAULT_SETTINGS;
                }

                return _unsplashIntegration.default.create(settingsObject);
            }

            return DEFAULT_SETTINGS;
        },

        serialize(deserialized) {
            return deserialized ? JSON.stringify(deserialized) : JSON.stringify(DEFAULT_SETTINGS);
        }
    });
});
define('ghost-admin/transitions', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function () {
        this.transition(this.hasClass('fullscreen-modal-container'), this.toValue(true), this.use('fade', { duration: 150 }), this.reverse('fade', { duration: 150 }));

        this.transition(this.hasClass('fade-transition'), this.use('crossFade', { duration: 100 }));

        this.transition(this.hasClass('tour-container'), this.toValue(true), this.use('fade', { duration: 150 }), this.reverse('fade', { duration: 150 }));

        this.transition(this.hasClass('tour'), this.toValue(true), this.use('fade', { duration: 300 }), this.reverse('fade', { duration: 300 }));

        // TODO: Maybe animate with explode. gh-unsplash-window should ideally slide in from bottom to top of screen
        // this.transition(
        //     this.hasClass('gh-unsplash-window'),
        //     this.toValue(true),
        //     this.use('toUp', {duration: 500}),
        //     this.reverse('toDown', {duration: 500})
        // );
    };
});
define('ghost-admin/transitions/cross-fade', ['exports', 'liquid-fire/transitions/cross-fade'], function (exports, _crossFade) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _crossFade.default;
    }
  });
});
define('ghost-admin/transitions/default', ['exports', 'liquid-fire/transitions/default'], function (exports, _default) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _default.default;
    }
  });
});
define('ghost-admin/transitions/explode', ['exports', 'liquid-fire/transitions/explode'], function (exports, _explode) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _explode.default;
    }
  });
});
define('ghost-admin/transitions/fade', ['exports', 'liquid-fire/transitions/fade'], function (exports, _fade) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _fade.default;
    }
  });
});
define('ghost-admin/transitions/flex-grow', ['exports', 'liquid-fire/transitions/flex-grow'], function (exports, _flexGrow) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _flexGrow.default;
    }
  });
});
define('ghost-admin/transitions/fly-to', ['exports', 'liquid-fire/transitions/fly-to'], function (exports, _flyTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _flyTo.default;
    }
  });
});
define('ghost-admin/transitions/move-over', ['exports', 'liquid-fire/transitions/move-over'], function (exports, _moveOver) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _moveOver.default;
    }
  });
});
define('ghost-admin/transitions/scale', ['exports', 'liquid-fire/transitions/scale'], function (exports, _scale) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _scale.default;
    }
  });
});
define('ghost-admin/transitions/scroll-then', ['exports', 'liquid-fire/transitions/scroll-then'], function (exports, _scrollThen) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _scrollThen.default;
    }
  });
});
define('ghost-admin/transitions/to-down', ['exports', 'liquid-fire/transitions/to-down'], function (exports, _toDown) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _toDown.default;
    }
  });
});
define('ghost-admin/transitions/to-left', ['exports', 'liquid-fire/transitions/to-left'], function (exports, _toLeft) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _toLeft.default;
    }
  });
});
define('ghost-admin/transitions/to-right', ['exports', 'liquid-fire/transitions/to-right'], function (exports, _toRight) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _toRight.default;
    }
  });
});
define('ghost-admin/transitions/to-up', ['exports', 'liquid-fire/transitions/to-up'], function (exports, _toUp) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _toUp.default;
    }
  });
});
define('ghost-admin/transitions/wait', ['exports', 'liquid-fire/transitions/wait'], function (exports, _wait) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _wait.default;
    }
  });
});
define('ghost-admin/transitions/wormhole', ['exports', 'liquid-wormhole/transitions/wormhole'], function (exports, _wormhole) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function () {
        let newWormholeElement;

        if (this.newElement) {
            newWormholeElement = this.newElement.find('.liquid-wormhole-element:last-child');
        }

        return _wormhole.default.apply(this, arguments).finally(() => {
            if (this.newElement && newWormholeElement) {
                let autofocusElem = newWormholeElement[0].querySelector('[autofocus]');
                if (autofocusElem) {
                    autofocusElem.focus();
                }
            }
        });
    };
});
define('ghost-admin/utils/bound-one-way', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function (upstream, transform) {
        if (typeof transform !== 'function') {
            // default to the identity function
            transform = function transform(value) {
                return value;
            };
        }

        return Ember.computed(upstream, {
            get() {
                return transform(this.get(upstream));
            },
            set(key, value) {
                return value;
            }
        });
    };
});
define('ghost-admin/utils/caja-sanitizers', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    /**
     * google-caja uses url() and id() to verify if the values are allowed.
     */
    /**
     * Check if URL is allowed
     * URLs are allowed if they start with http://, https://, or /.
     * NOTE: # urls are not allowed as clicking them will break the editor when clicked
     */
    let url = function url(_url) {
        _url = _url.toString().replace(/['"]+/g, '');
        if (/^https?:\/\//.test(_url) || /^\//.test(_url)) {
            return _url;
        }
    };

    /**
     * Check if ID is allowed
     * All ids are allowed at the moment.
     */
    let id = function id(_id) {
        return _id;
    };

    exports.default = {
        url,
        id
    };
});
define('ghost-admin/utils/ctrl-or-cmd', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = navigator.userAgent.indexOf('Mac') !== -1 ? 'command' : 'ctrl';
});
define('ghost-admin/utils/document-title', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function () {
        Ember.Route.reopen({
            // `titleToken` can either be a static string or a function
            // that accepts a model object and returns a string (or array
            // of strings if there are multiple tokens).
            titleToken: null,

            // `title` can either be a static string or a function
            // that accepts an array of tokens and returns a string
            // that will be the document title. The `collectTitleTokens` action
            // stops bubbling once a route is encountered that has a `title`
            // defined.
            title: null,

            actions: {
                collectTitleTokens(tokens) {
                    let titleToken = this.titleToken;

                    let finalTitle;

                    if (typeof this.titleToken === 'function') {
                        titleToken = this.titleToken(this.currentModel);
                    }

                    if (Ember.isArray(titleToken)) {
                        tokens.unshift(...titleToken);
                    } else if (titleToken) {
                        tokens.unshift(titleToken);
                    }

                    if (this.title) {
                        if (typeof this.title === 'function') {
                            finalTitle = this.title(tokens);
                        } else {
                            finalTitle = this.title;
                        }

                        window.document.title = finalTitle;
                    } else {
                        return true;
                    }
                }
            }
        });

        Ember.Router.reopen({
            updateTitle: Ember.on('didTransition', function () {
                this.send('collectTitleTokens', []);
            })
        });
    };
});
define('ghost-admin/utils/format-markdown', ['exports', 'npm:markdown-it', 'npm:markdown-it-footnote', 'npm:markdown-it-lazy-headers', 'npm:markdown-it-mark', 'koenig-editor/helpers/sanitize-html'], function (exports, _npmMarkdownIt, _npmMarkdownItFootnote, _npmMarkdownItLazyHeaders, _npmMarkdownItMark, _sanitizeHtml) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = formatMarkdown;


    let slugify = function slugify(inputString, usedHeaders) {
        let slug = inputString.replace(/[^\w]/g, '').toLowerCase();
        if (usedHeaders[slug]) {
            usedHeaders[slug] += 1;
            slug += usedHeaders[slug];
        }
        return slug;
    };

    // originally from https://github.com/leff/markdown-it-named-headers
    // moved here to avoid pulling in http://stringjs.com dependency
    let markdownitNamedHeaders = function markdownitNamedHeaders(md) {
        let originalHeadingOpen = md.renderer.rules.heading_open;

        // eslint-disable-next-line camelcase
        md.renderer.rules.heading_open = function (tokens, idx, options, env, self) {
            let usedHeaders = {};

            tokens[idx].attrs = tokens[idx].attrs || [];

            let title = tokens[idx + 1].children.reduce(function (acc, t) {
                return acc + t.content;
            }, '');

            let slug = slugify(title, usedHeaders);
            tokens[idx].attrs.push(['id', slug]);

            if (originalHeadingOpen) {
                return originalHeadingOpen.apply(this, arguments);
            } else {
                return self.renderToken(...arguments);
            }
        };
    };

    let md = (0, _npmMarkdownIt.default)({
        html: true,
        breaks: true,
        linkify: true
    }).use(_npmMarkdownItFootnote.default).use(_npmMarkdownItLazyHeaders.default).use(_npmMarkdownItMark.default).use(markdownitNamedHeaders);

    // configure linkify-it
    md.linkify.set({
        fuzzyLink: false
    });

    function formatMarkdown(_markdown, replaceJS = true) {
        let markdown = _markdown || '';
        let escapedhtml = '';

        // convert markdown to HTML
        escapedhtml = md.render(markdown);

        return (0, _sanitizeHtml.sanitizeHtml)(escapedhtml, { replaceJS });
    }
});
define('ghost-admin/utils/ghost-paths', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function () {
        let path = window.location.pathname;
        let subdir = path.substr(0, path.search('/ghost/'));
        let adminRoot = `${subdir}/ghost/`;
        let assetRoot = `${subdir}/ghost/assets/`;
        let apiRoot = `${subdir}/ghost/api/v0.1`;

        function assetUrl(src) {
            return subdir + src;
        }

        return {
            adminRoot,
            assetRoot,
            apiRoot,
            subdir,
            blogRoot: `${subdir}/`,
            count: 'https://count.ghost.org/',

            url: {
                admin() {
                    return makeRoute(adminRoot, arguments);
                },

                api() {
                    return makeRoute(apiRoot, arguments);
                },

                join() {
                    if (arguments.length > 1) {
                        return makeRoute(arguments[0], Array.prototype.slice.call(arguments, 1));
                    } else if (arguments.length === 1) {
                        var _arguments = Array.prototype.slice.call(arguments);

                        let arg = _arguments[0];

                        return arg.slice(-1) === '/' ? arg : `${arg}/`;
                    }
                    return '/';
                },

                asset: assetUrl
            }
        };
    };

    let makeRoute = function makeRoute(root, args) {
        let slashAtStart = /^\//;
        let slashAtEnd = /\/$/;
        let parts = Array.prototype.slice.call(args, 0);
        let route = root.replace(slashAtEnd, '');

        parts.forEach(part => {
            if (part) {
                route = [route, part.replace(slashAtStart, '').replace(slashAtEnd, '')].join('/');
            }
        });

        return route += '/';
    };
});
define("ghost-admin/utils/isFinite", ["exports"], function (exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function (value) {
        return window.isFinite(value) && !window.isNaN(parseFloat(value));
    };
});
define('ghost-admin/utils/isNumber', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function (value) {
    return typeof value === 'number' || value && typeof value === 'object' && toString.call(value) === '[object Number]' || false;
  };

  const toString = Object.prototype.toString;
});
define('ghost-admin/utils/link-component', [], function () {
    'use strict';

    Ember.LinkComponent.reopen({
        active: Ember.computed('attrs.params', '_routing.currentState', function () {
            let isActive = this._super(...arguments);

            if (typeof this.get('alternateActive') === 'function') {
                this.get('alternateActive')(isActive);
            }

            return isActive;
        }),

        activeClass: Ember.computed('tagName', function () {
            return this.get('tagName') === 'button' ? '' : 'active';
        })
    });
});
define('ghost-admin/utils/random-password', ['exports', 'npm:password-generator'], function (exports, _npmPasswordGenerator) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function () {
        let word = (0, _npmPasswordGenerator.default)(6);
        let randomN = Math.floor(Math.random() * 1000);

        return word + randomN;
    };
});
define('ghost-admin/utils/route', [], function () {
    'use strict';

    Ember.Route.reopen({
        actions: {
            willTransition(transition) {
                if (this.get('upgradeStatus.isRequired')) {
                    transition.abort();
                    this.get('upgradeStatus').requireUpgrade();
                    return false;
                } else {
                    return true;
                }
            }
        }
    });
});
define('ghost-admin/utils/text-field', [], function () {
    'use strict';

    Ember.TextField.reopen({
        attributeBindings: ['autofocus']
    });
});
define('ghost-admin/utils/titleize', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function (input) {
        let words = input.split(' ').map((word, index) => {
            if (index === 0 || lowerWords.indexOf(word) === -1) {
                word = Ember.String.capitalize(word);
            }

            return word;
        });

        return words.join(' ');
    };

    const lowerWords = ['of', 'a', 'the', 'and', 'an', 'or', 'nor', 'but', 'is', 'if', 'then', 'else', 'when', 'at', 'from', 'by', 'on', 'off', 'for', 'in', 'out', 'over', 'to', 'into', 'with'];
});
define("ghost-admin/utils/window-proxy", ["exports"], function (exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = {
        changeLocation(url) {
            window.location = url;
        },

        replaceLocation(url) {
            window.location.replace(url);
        },

        replaceState(params, title, url) {
            window.history.replaceState(params, title, url);
        }
    };
});
define('ghost-admin/validators/base', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = Ember.Object.extend({
        passed: false,

        init() {
            this._super(...arguments);
            this.properties = this.properties || [];
        },

        /**
         * When passed a model and (optionally) a property name,
         * checks it against a list of validation functions
         * @param  {Ember.Object} model Model to validate
         * @param  {string} prop  Property name to check
         * @return {boolean}      True if the model passed all (or one) validation(s),
         *                        false if not
         */
        check(model, prop) {
            this.set('passed', true);

            if (prop && this[prop]) {
                this[prop](model);
            } else {
                this.get('properties').forEach(property => {
                    if (this[property]) {
                        this[property](model);
                    }
                });
            }
            return this.get('passed');
        },

        invalidate() {
            this.set('passed', false);
        }
    });
});
define('ghost-admin/validators/invite-user', ['exports', 'ghost-admin/validators/base', 'npm:validator'], function (exports, _base, _npmValidator) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.create({
        properties: ['email'],

        email(model) {
            let email = model.get('email');

            if (Ember.isBlank(email)) {
                model.get('errors').add('email', 'Please enter an email.');
                this.invalidate();
            } else if (!_npmValidator.default.isEmail(email)) {
                model.get('errors').add('email', 'Invalid Email.');
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/validators/nav-item', ['exports', 'ghost-admin/validators/base', 'npm:validator'], function (exports, _base, _npmValidator) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.create({
        properties: ['label', 'url'],

        label(model) {
            let label = model.get('label');
            let hasValidated = model.get('hasValidated');

            if (Ember.isBlank(label)) {
                model.get('errors').add('label', 'You must specify a label');
                this.invalidate();
            }

            hasValidated.addObject('label');
        },

        url(model) {
            let url = model.get('url');
            let hasValidated = model.get('hasValidated');
            /* eslint-disable camelcase */
            let validatorOptions = { require_protocol: true };
            /* eslint-enable camelcase */
            let urlRegex = new RegExp(/^(\/|#|[a-zA-Z0-9-]+:)/);

            if (Ember.isBlank(url)) {
                model.get('errors').add('url', 'You must specify a URL or relative path');
                this.invalidate();
            } else if (url.match(/\s/) || !_npmValidator.default.isURL(url, validatorOptions) && !url.match(urlRegex)) {
                model.get('errors').add('url', 'You must specify a valid URL or relative path');
                this.invalidate();
            }

            hasValidated.addObject('url');
        }
    });
});
define('ghost-admin/validators/new-user', ['exports', 'ghost-admin/validators/password', 'npm:validator'], function (exports, _password, _npmValidator) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _password.default.extend({
        init() {
            this._super(...arguments);
            this.properties = this.properties || ['name', 'email', 'password'];
        },

        name(model) {
            let name = model.get('name');

            if (!_npmValidator.default.isLength(name || '', 1)) {
                model.get('errors').add('name', 'Please enter a name.');
                this.invalidate();
            }
        },

        email(model) {
            let email = model.get('email');

            if (Ember.isBlank(email)) {
                model.get('errors').add('email', 'Please enter an email.');
                this.invalidate();
            } else if (!_npmValidator.default.isEmail(email)) {
                model.get('errors').add('email', 'Invalid Email.');
                this.invalidate();
            }
        },

        password(model) {
            this.passwordValidation(model);
        }
    });
});
define('ghost-admin/validators/password', ['exports', 'ghost-admin/validators/base', 'npm:validator'], function (exports, _base, _npmValidator) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });


    const BAD_PASSWORDS = ['1234567890', 'qwertyuiop', 'qwertzuiop', 'asdfghjkl;', 'abcdefghij', '0987654321', '1q2w3e4r5t', '12345asdfg'];
    const DISALLOWED_PASSWORDS = ['ghost', 'password', 'passw0rd'];

    exports.default = _base.default.extend({
        /**
        * Counts repeated characters if a string. When 50% or more characters are the same,
        * we return false and therefore invalidate the string.
        * @param {String} stringToTest The password string to check.
        * @return {Boolean}
        */
        _characterOccurance(stringToTest) {
            let chars = {};
            let allowedOccurancy;
            let valid = true;

            allowedOccurancy = stringToTest.length / 2;

            // Loop through string and accumulate character counts
            for (let i = 0; i < stringToTest.length; i += 1) {
                if (!chars[stringToTest[i]]) {
                    chars[stringToTest[i]] = 1;
                } else {
                    chars[stringToTest[i]] += 1;
                }
            }

            // check if any of the accumulated chars exceed the allowed occurancy
            // of 50% of the words' length.
            for (let charCount in chars) {
                if (chars[charCount] >= allowedOccurancy) {
                    valid = false;
                    return valid;
                }
            }

            return valid;
        },

        passwordValidation(model, password, errorTarget) {
            let blogUrl = model.get('config.blogUrl') || window.location.host;
            let blogTitle = model.get('blogTitle') || model.get('config.blogTitle');
            let blogUrlWithSlash;

            // the password that needs to be validated can differ from the password in the
            // passed model, e. g. for password changes or reset.
            password = password || model.get('password');
            errorTarget = errorTarget || 'password';

            blogUrl = blogUrl.replace(/^http(s?):\/\//, '');
            blogUrlWithSlash = blogUrl.match(/\/$/) ? blogUrl : `${blogUrl}/`;

            blogTitle = blogTitle ? blogTitle.trim().toLowerCase() : blogTitle;

            // password must be longer than 10 characters
            if (!_npmValidator.default.isLength(password || '', 10)) {
                model.get('errors').add(errorTarget, 'Password must be at least 10 characters long');
                return this.invalidate();
            }

            password = password.toString();

            // dissallow password from badPasswords list (e. g. '1234567890')
            BAD_PASSWORDS.map(badPassword => {
                if (badPassword === password) {
                    model.get('errors').add(errorTarget, 'Sorry, you cannot use an insecure password');
                    this.invalidate();
                }
            });

            // password must not match with users' email
            if (password.toLowerCase() === model.get('email').toLowerCase()) {
                model.get('errors').add(errorTarget, 'Sorry, you cannot use an insecure password');
                this.invalidate();
            }

            // password must not contain the words 'ghost', 'password', or 'passw0rd'
            DISALLOWED_PASSWORDS.map(disallowedPassword => {
                if (password.toLowerCase().indexOf(disallowedPassword) >= 0) {
                    model.get('errors').add(errorTarget, 'Sorry, you cannot use an insecure password');
                    this.invalidate();
                }
            });

            // password must not match with blog title
            if (password.toLowerCase() === blogTitle) {
                model.get('errors').add(errorTarget, 'Sorry, you cannot use an insecure password');
                this.invalidate();
            }

            // password must not match with blog URL (without protocol, with or without trailing slash)
            if (password.toLowerCase() === blogUrl || password.toLowerCase() === blogUrlWithSlash) {
                model.get('errors').add(errorTarget, 'Sorry, you cannot use an insecure password');
                this.invalidate();
            }

            // dissallow passwords where 50% or more of characters are the same
            if (!this._characterOccurance(password)) {
                model.get('errors').add(errorTarget, 'Sorry, you cannot use an insecure password');
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/validators/post', ['exports', 'ghost-admin/validators/base', 'moment', 'npm:validator'], function (exports, _base, _moment, _npmValidator) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.create({
        properties: ['title', 'authors', 'customExcerpt', 'codeinjectionHead', 'codeinjectionFoot', 'metaTitle', 'metaDescription', 'ogtitle', 'ogDescription', 'twitterTitle', 'twitterDescription', 'publishedAtBlogTime', 'publishedAtBlogDate'],

        title(model) {
            let title = model.get('title');

            if (Ember.isBlank(title)) {
                model.get('errors').add('title', 'You must specify a title for the post.');
                this.invalidate();
            }

            if (!_npmValidator.default.isLength(title || '', 0, 255)) {
                model.get('errors').add('title', 'Title cannot be longer than 255 characters.');
                this.invalidate();
            }
        },

        authors(model) {
            let authors = model.get('authors');

            if (Ember.isEmpty(authors)) {
                model.get('errors').add('authors', 'At least one author is required.');
                this.invalidate();
            }
        },

        customExcerpt(model) {
            let customExcerpt = model.get('customExcerpt');

            if (!_npmValidator.default.isLength(customExcerpt || '', 0, 300)) {
                model.get('errors').add('customExcerpt', 'Excerpt cannot be longer than 300 characters.');
                this.invalidate();
            }
        },

        codeinjectionFoot(model) {
            let codeinjectionFoot = model.get('codeinjectionFoot');

            if (!_npmValidator.default.isLength(codeinjectionFoot || '', 0, 65535)) {
                model.get('errors').add('codeinjectionFoot', 'Footer code cannot be longer than 65535 characters.');
                this.invalidate();
            }
        },

        codeinjectionHead(model) {
            let codeinjectionHead = model.get('codeinjectionHead');

            if (!_npmValidator.default.isLength(codeinjectionHead || '', 0, 65535)) {
                model.get('errors').add('codeinjectionHead', 'Header code cannot be longer than 65535 characters.');
                this.invalidate();
            }
        },

        metaTitle(model) {
            let metaTitle = model.get('metaTitle');

            if (!_npmValidator.default.isLength(metaTitle || '', 0, 300)) {
                model.get('errors').add('metaTitle', 'Meta Title cannot be longer than 300 characters.');
                this.invalidate();
            }
        },

        metaDescription(model) {
            let metaDescription = model.get('metaDescription');

            if (!_npmValidator.default.isLength(metaDescription || '', 0, 500)) {
                model.get('errors').add('metaDescription', 'Meta Description cannot be longer than 500 characters.');
                this.invalidate();
            }
        },

        ogTitle(model) {
            let ogTitle = model.get('ogTitle');

            if (!_npmValidator.default.isLength(ogTitle || '', 0, 300)) {
                model.get('errors').add('ogTitle', 'Facebook Title cannot be longer than 300 characters.');
                this.invalidate();
            }
        },

        ogDescription(model) {
            let ogDescription = model.get('ogDescription');

            if (!_npmValidator.default.isLength(ogDescription || '', 0, 500)) {
                model.get('errors').add('ogDescription', 'Facebook Description cannot be longer than 500 characters.');
                this.invalidate();
            }
        },

        twitterTitle(model) {
            let twitterTitle = model.get('twitterTitle');

            if (!_npmValidator.default.isLength(twitterTitle || '', 0, 300)) {
                model.get('errors').add('twitterTitle', 'Twitter Title cannot be longer than 300 characters.');
                this.invalidate();
            }
        },

        twitterDescription(model) {
            let twitterDescription = model.get('twitterDescription');

            if (!_npmValidator.default.isLength(twitterDescription || '', 0, 500)) {
                model.get('errors').add('twitterDescription', 'Twitter Description cannot be longer than 500 characters.');
                this.invalidate();
            }
        },
        // for posts which haven't been published before and where the blog date/time
        // is blank we should ignore the validation
        _shouldValidatePublishedAtBlog(model) {
            let publishedAtUTC = model.get('publishedAtUTC');
            let publishedAtBlogDate = model.get('publishedAtBlogDate');
            let publishedAtBlogTime = model.get('publishedAtBlogTime');

            return Ember.isPresent(publishedAtUTC) || Ember.isPresent(publishedAtBlogDate) || Ember.isPresent(publishedAtBlogTime);
        },

        // convenience method as .validate({property: 'x'}) doesn't accept multiple properties
        publishedAtBlog(model) {
            this.publishedAtBlogTime(model);
            this.publishedAtBlogDate(model);
        },

        publishedAtBlogTime(model) {
            let publishedAtBlogTime = model.get('publishedAtBlogTime');
            let timeRegex = /^(([0-1]?[0-9])|([2][0-3])):([0-5][0-9])$/;

            if (!timeRegex.test(publishedAtBlogTime) && this._shouldValidatePublishedAtBlog(model)) {
                model.get('errors').add('publishedAtBlogTime', 'Must be in format: "15:00"');
                this.invalidate();
            }
        },

        publishedAtBlogDate(model) {
            let publishedAtBlogDate = model.get('publishedAtBlogDate');
            let publishedAtBlogTime = model.get('publishedAtBlogTime');

            if (!this._shouldValidatePublishedAtBlog(model)) {
                return;
            }

            // we have a time string but no date string
            if (Ember.isBlank(publishedAtBlogDate) && !Ember.isBlank(publishedAtBlogTime)) {
                model.get('errors').add('publishedAtBlogDate', 'Can\'t be blank');
                return this.invalidate();
            }

            // don't validate the date if the time format is incorrect
            if (Ember.isEmpty(model.get('errors').errorsFor('publishedAtBlogTime'))) {
                let status = model.get('statusScratch') || model.get('status');
                let now = (0, _moment.default)();
                let publishedAtUTC = model.get('publishedAtUTC');
                let publishedAtBlogTZ = model.get('publishedAtBlogTZ');
                let matchesExisting = publishedAtUTC && publishedAtBlogTZ.isSame(publishedAtUTC);
                let isInFuture = publishedAtBlogTZ.isSameOrAfter(now.add(2, 'minutes'));

                // draft/published must be in past
                if ((status === 'draft' || status === 'published') && publishedAtBlogTZ.isSameOrAfter(now)) {
                    model.get('errors').add('publishedAtBlogDate', 'Must be in the past');
                    this.invalidate();

                    // scheduled must be at least 2 mins in the future
                    // ignore if it matches publishedAtUTC as that is likely an update of a scheduled post
                } else if (status === 'scheduled' && !matchesExisting && !isInFuture) {
                    model.get('errors').add('publishedAtBlogDate', 'Must be at least 2 mins in the future');
                    this.invalidate();
                }
            }
        }
    });
});
define('ghost-admin/validators/reset', ['exports', 'ghost-admin/validators/password', 'npm:validator'], function (exports, _password, _npmValidator) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _password.default.create({
        properties: ['newPassword'],

        newPassword(model) {
            let p1 = model.get('newPassword');
            let p2 = model.get('ne2Password');

            if (Ember.isBlank(p1)) {
                model.get('errors').add('newPassword', 'Please enter a password.');
                this.invalidate();
            } else if (!_npmValidator.default.equals(p1, p2 || '')) {
                model.get('errors').add('ne2Password', 'The two new passwords don\'t match.');
                this.invalidate();
            }

            this.passwordValidation(model, p1, 'newPassword');
        }
    });
});
define('ghost-admin/validators/setting', ['exports', 'ghost-admin/validators/base', 'npm:validator'], function (exports, _base, _npmValidator) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.create({
        properties: ['title', 'description', 'password'],
        title(model) {
            let title = model.get('title');

            if (!_npmValidator.default.isLength(title || '', 0, 150)) {
                model.get('errors').add('title', 'Title is too long');
                this.invalidate();
            }
        },

        description(model) {
            let desc = model.get('description');

            if (!_npmValidator.default.isLength(desc || '', 0, 200)) {
                model.get('errors').add('description', 'Description is too long');
                this.invalidate();
            }
        },

        password(model) {
            let isPrivate = model.get('isPrivate');
            let password = model.get('password');

            if (isPrivate && password === '') {
                model.get('errors').add('password', 'Password must be supplied');
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/validators/setup', ['exports', 'ghost-admin/validators/new-user', 'npm:validator'], function (exports, _newUser, _npmValidator) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _newUser.default.create({
        properties: ['name', 'email', 'password', 'blogTitle'],

        blogTitle(model) {
            let blogTitle = model.get('blogTitle');

            if (!_npmValidator.default.isLength(blogTitle || '', 1)) {
                model.get('errors').add('blogTitle', 'Please enter a blog title.');
                this.invalidate();
            }

            if (!_npmValidator.default.isLength(blogTitle || '', 0, 150)) {
                model.get('errors').add('blogTitle', 'Title is too long');
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/validators/signin', ['exports', 'ghost-admin/validators/base', 'npm:validator'], function (exports, _base, _npmValidator) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.create({
        properties: ['identification', 'signin', 'forgotPassword'],
        invalidMessage: 'Email address is not valid',

        identification(model) {
            let id = model.get('identification');

            if (!Ember.isBlank(id) && !_npmValidator.default.isEmail(id)) {
                model.get('errors').add('identification', this.get('invalidMessage'));
                this.invalidate();
            }
        },

        signin(model) {
            let id = model.get('identification');
            let password = model.get('password');

            model.get('errors').clear();

            if (Ember.isBlank(id)) {
                model.get('errors').add('identification', 'Please enter an email');
                this.invalidate();
            }

            if (!Ember.isBlank(id) && !_npmValidator.default.isEmail(id)) {
                model.get('errors').add('identification', this.get('invalidMessage'));
                this.invalidate();
            }

            if (Ember.isBlank(password)) {
                model.get('errors').add('password', 'Please enter a password');
                this.invalidate();
            }
        },

        forgotPassword(model) {
            let id = model.get('identification');

            model.get('errors').clear();

            if (Ember.isBlank(id) || !_npmValidator.default.isEmail(id)) {
                model.get('errors').add('identification', this.get('invalidMessage'));
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/validators/signup', ['exports', 'ghost-admin/validators/new-user'], function (exports, _newUser) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _newUser.default.create();
});
define('ghost-admin/validators/slack-integration', ['exports', 'ghost-admin/validators/base', 'npm:validator'], function (exports, _base, _npmValidator) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.create({
        properties: ['url'],

        url(model) {
            let url = model.get('url');
            let hasValidated = model.get('hasValidated');

            // eslint-disable-next-line camelcase
            if (!Ember.isBlank(url) && !_npmValidator.default.isURL(url, { require_protocol: true })) {
                model.get('errors').add('url', 'The URL must be in a format like https://hooks.slack.com/services/<your personal key>');

                this.invalidate();
            }

            hasValidated.addObject('url');
        }
    });
});
define('ghost-admin/validators/subscriber', ['exports', 'ghost-admin/validators/base', 'npm:validator'], function (exports, _base, _npmValidator) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.create({
        properties: ['email'],

        email(model) {
            let email = model.get('email');

            if (Ember.isBlank(email)) {
                model.get('errors').add('email', 'Please enter an email.');
                model.get('hasValidated').pushObject('email');
                this.invalidate();
            } else if (!_npmValidator.default.isEmail(email)) {
                model.get('errors').add('email', 'Invalid email.');
                model.get('hasValidated').pushObject('email');
                this.invalidate();
            } else if (!_npmValidator.default.isLength(email, 0, 191)) {
                model.get('errors').add('email', 'Email is too long');
                model.get('hasValidated').pushObject('email');
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/validators/tag-settings', ['exports', 'ghost-admin/validators/base', 'npm:validator'], function (exports, _base, _npmValidator) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _base.default.create({
        properties: ['name', 'slug', 'description', 'metaTitle', 'metaDescription'],

        name(model) {
            let name = model.get('name');

            if (Ember.isBlank(name)) {
                model.get('errors').add('name', 'You must specify a name for the tag.');
                this.invalidate();
            } else if (name.match(/^,/)) {
                model.get('errors').add('name', 'Tag names can\'t start with commas.');
                this.invalidate();
            } else if (!_npmValidator.default.isLength(name, 0, 191)) {
                model.get('errors').add('name', 'Tag names cannot be longer than 191 characters.');
                this.invalidate();
            }
        },

        slug(model) {
            let slug = model.get('slug');

            if (!_npmValidator.default.isLength(slug || '', 0, 191)) {
                model.get('errors').add('slug', 'URL cannot be longer than 191 characters.');
                this.invalidate();
            }
        },

        description(model) {
            let description = model.get('description');

            if (!_npmValidator.default.isLength(description || '', 0, 500)) {
                model.get('errors').add('description', 'Description cannot be longer than 500 characters.');
                this.invalidate();
            }
        },

        metaTitle(model) {
            let metaTitle = model.get('metaTitle');

            if (!_npmValidator.default.isLength(metaTitle || '', 0, 300)) {
                model.get('errors').add('metaTitle', 'Meta Title cannot be longer than 300 characters.');
                this.invalidate();
            }
        },

        metaDescription(model) {
            let metaDescription = model.get('metaDescription');

            if (!_npmValidator.default.isLength(metaDescription || '', 0, 500)) {
                model.get('errors').add('metaDescription', 'Meta Description cannot be longer than 500 characters.');
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/validators/user', ['exports', 'ghost-admin/validators/password', 'npm:validator'], function (exports, _password, _npmValidator) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = _password.default.create({
        properties: ['name', 'bio', 'email', 'location', 'website', 'roles'],

        isActive(model) {
            return model.get('status') === 'active';
        },

        name(model) {
            let name = model.get('name');

            if (this.isActive(model)) {
                if (Ember.isBlank(name)) {
                    model.get('errors').add('name', 'Please enter a name.');
                    this.invalidate();
                } else if (!_npmValidator.default.isLength(name, 0, 191)) {
                    model.get('errors').add('name', 'Name is too long');
                    this.invalidate();
                }
            }
        },

        bio(model) {
            let bio = model.get('bio');

            if (this.isActive(model)) {
                if (!_npmValidator.default.isLength(bio || '', 0, 200)) {
                    model.get('errors').add('bio', 'Bio is too long');
                    this.invalidate();
                }
            }
        },

        email(model) {
            let email = model.get('email');

            if (!_npmValidator.default.isEmail(email || '')) {
                model.get('errors').add('email', 'Please supply a valid email address');
                this.invalidate();
            }

            if (!_npmValidator.default.isLength(email || '', 0, 191)) {
                model.get('errors').add('email', 'Email is too long');
                this.invalidate();
            }
        },

        location(model) {
            let location = model.get('location');

            if (this.isActive(model)) {
                if (!_npmValidator.default.isLength(location || '', 0, 150)) {
                    model.get('errors').add('location', 'Location is too long');
                    this.invalidate();
                }
            }
        },

        website(model) {
            let website = model.get('website');
            // eslint-disable-next-line camelcase
            let isInvalidWebsite = !_npmValidator.default.isURL(website || '', { require_protocol: false }) || !_npmValidator.default.isLength(website || '', 0, 2000);

            if (this.isActive(model)) {
                if (!Ember.isBlank(website) && isInvalidWebsite) {
                    model.get('errors').add('website', 'Website is not a valid url');
                    this.invalidate();
                }
            }
        },

        roles(model) {
            if (!this.isActive(model)) {
                let roles = model.get('roles');

                if (roles.length < 1) {
                    model.get('errors').add('role', 'Please select a role');
                    this.invalidate();
                }
            }
        },

        passwordChange(model) {
            let newPassword = model.get('newPassword');
            let ne2Password = model.get('ne2Password');

            // validation only marks the requested property as validated so we
            // have to add properties manually
            model.get('hasValidated').addObject('newPassword');
            model.get('hasValidated').addObject('ne2Password');

            if (Ember.isBlank(newPassword) && Ember.isBlank(ne2Password)) {
                model.get('errors').add('newPassword', 'Sorry, passwords can\'t be blank');
                this.invalidate();
            } else {
                if (!_npmValidator.default.equals(newPassword, ne2Password || '')) {
                    model.get('errors').add('ne2Password', 'Your new passwords do not match');
                    this.invalidate();
                }

                this.passwordValidation(model, newPassword, 'newPassword');
            }
        },

        ownPasswordChange(model) {
            let oldPassword = model.get('password');

            this.passwordChange(model);

            // validation only marks the requested property as validated so we
            // have to add properties manually
            model.get('hasValidated').addObject('password');

            if (Ember.isBlank(oldPassword)) {
                model.get('errors').add('password', 'Your current password is required to set a new one');
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/views/application', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({});
});


define('ghost-admin/config/environment', [], function() {
  var prefix = 'ghost-admin';
try {
  var metaName = prefix + '/config/environment';
  var rawConfig = document.querySelector('meta[name="' + metaName + '"]').getAttribute('content');
  var config = JSON.parse(unescape(rawConfig));

  var exports = { 'default': config };

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

});

if (!runningTests) {
  require("ghost-admin/app")["default"].create({"version":"2.1","LOG_ACTIVE_GENERATION":true,"LOG_TRANSITIONS":true,"LOG_TRANSITIONS_INTERNAL":true,"LOG_VIEW_LOOKUPS":true,"name":"ghost-admin"});
}
//# sourceMappingURL=ghost.map
